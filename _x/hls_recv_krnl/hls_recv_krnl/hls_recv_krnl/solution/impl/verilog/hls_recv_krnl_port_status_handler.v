// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_recv_krnl_port_status_handler (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        useConn_dout,
        useConn_empty_n,
        useConn_read,
        s_axis_tcp_port_status_TDATA,
        s_axis_tcp_port_status_TVALID,
        s_axis_tcp_port_status_TREADY,
        s_axis_tcp_port_status_TKEEP,
        s_axis_tcp_port_status_TSTRB,
        s_axis_tcp_port_status_TLAST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] useConn_dout;
input   useConn_empty_n;
output   useConn_read;
input  [7:0] s_axis_tcp_port_status_TDATA;
input   s_axis_tcp_port_status_TVALID;
output   s_axis_tcp_port_status_TREADY;
input  [0:0] s_axis_tcp_port_status_TKEEP;
input  [0:0] s_axis_tcp_port_status_TSTRB;
input  [0:0] s_axis_tcp_port_status_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg useConn_read;
reg s_axis_tcp_port_status_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    useConn_blk_n;
reg    s_axis_tcp_port_status_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln742_fu_85_p2;
reg   [31:0] useConn_read_reg_90;
wire   [30:0] add_ln742_fu_75_p2;
reg    ap_block_state2;
reg   [30:0] i_reg_64;
reg    ap_block_state1;
wire   [31:0] zext_ln742_fu_81_p1;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln742_fu_85_p2 == 1'd1) & (s_axis_tcp_port_status_TVALID == 1'b0)) & (icmp_ln742_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_64 <= add_ln742_fu_75_p2;
    end else if ((~((ap_start == 1'b0) | (useConn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_64 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        useConn_read_reg_90 <= useConn_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln742_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        s_axis_tcp_port_status_TDATA_blk_n = s_axis_tcp_port_status_TVALID;
    end else begin
        s_axis_tcp_port_status_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln742_fu_85_p2 == 1'd1) & (s_axis_tcp_port_status_TVALID == 1'b0)) & (icmp_ln742_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        s_axis_tcp_port_status_TREADY = 1'b1;
    end else begin
        s_axis_tcp_port_status_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        useConn_blk_n = useConn_empty_n;
    end else begin
        useConn_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (useConn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        useConn_read = 1'b1;
    end else begin
        useConn_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (useConn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln742_fu_85_p2 == 1'd1) & (s_axis_tcp_port_status_TVALID == 1'b0)) & (icmp_ln742_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln742_fu_85_p2 == 1'd1) & (s_axis_tcp_port_status_TVALID == 1'b0)) & (icmp_ln742_fu_85_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln742_fu_75_p2 = (i_reg_64 + 31'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (useConn_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln742_fu_85_p2 == 1'd1) & (s_axis_tcp_port_status_TVALID == 1'b0));
end

assign icmp_ln742_fu_85_p2 = (($signed(zext_ln742_fu_81_p1) < $signed(useConn_read_reg_90)) ? 1'b1 : 1'b0);

assign zext_ln742_fu_81_p1 = i_reg_64;

endmodule //hls_recv_krnl_port_status_handler
