// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_recv_krnl_updateKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        cipherkey,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] p_read1;
input  [127:0] p_read2;
input  [127:0] p_read3;
input  [127:0] p_read4;
input  [127:0] p_read5;
input  [127:0] p_read6;
input  [127:0] p_read7;
input  [127:0] p_read8;
input  [127:0] p_read9;
input  [127:0] p_read10;
input  [127:0] p_read11;
input  [127:0] p_read12;
input  [127:0] p_read13;
input  [127:0] p_read14;
input  [127:0] p_read15;
input  [255:0] cipherkey;
output  [127:0] ap_return_0;
output  [127:0] ap_return_1;
output  [127:0] ap_return_2;
output  [127:0] ap_return_3;
output  [127:0] ap_return_4;
output  [127:0] ap_return_5;
output  [127:0] ap_return_6;
output  [127:0] ap_return_7;
output  [127:0] ap_return_8;
output  [127:0] ap_return_9;
output  [127:0] ap_return_10;
output  [127:0] ap_return_11;
output  [127:0] ap_return_12;
output  [127:0] ap_return_13;
output  [127:0] ap_return_14;
output  [127:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] decipher_0_2_address0;
reg    decipher_0_2_ce0;
wire   [7:0] decipher_0_2_q0;
reg   [7:0] decipher_0_2_address1;
reg    decipher_0_2_ce1;
wire   [7:0] decipher_0_2_q1;
reg   [7:0] decipher_0_2_address2;
reg    decipher_0_2_ce2;
wire   [7:0] decipher_0_2_q2;
reg   [7:0] decipher_0_2_address3;
reg    decipher_0_2_ce3;
wire   [7:0] decipher_0_2_q3;
wire   [3:0] Rcon_address0;
reg    Rcon_ce0;
wire   [7:0] Rcon_q0;
reg   [127:0] this_15_029_reg_414;
reg   [0:0] write_flag17_0_reg_426;
reg   [0:0] write_flag23_0_reg_438;
reg   [127:0] this_17_026_reg_450;
reg   [0:0] write_flag29_0_reg_462;
reg   [127:0] this_13_024_reg_474;
reg   [127:0] this_19_023_reg_486;
reg   [0:0] write_flag11_0_reg_498;
reg   [0:0] write_flag35_0_reg_510;
reg   [127:0] this_111_020_reg_522;
reg   [0:0] write_flag41_0_reg_534;
reg   [127:0] this_116_0_reg_546;
reg   [127:0] this_113_018_reg_556;
reg   [0:0] write_flag4_0_reg_568;
reg   [0:0] write_flag48_0_reg_580;
reg   [127:0] this_11550_016_reg_592;
reg   [4:0] iter_V_reg_604;
reg   [255:0] p_Val2_s_reg_616;
wire   [127:0] trunc_ln674_fu_626_p1;
reg   [127:0] trunc_ln674_reg_2102;
wire   [0:0] icmp_ln878_fu_675_p2;
reg   [0:0] icmp_ln878_reg_2112;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] trunc_ln878_fu_681_p1;
reg   [3:0] trunc_ln878_reg_2116;
reg   [31:0] round_tmp_V_reg_2146;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] xor_ln215_fu_798_p2;
reg   [31:0] xor_ln215_reg_2151;
wire   [31:0] xor_ln215_1_fu_814_p2;
reg   [31:0] xor_ln215_1_reg_2156;
wire   [31:0] xor_ln215_2_fu_830_p2;
reg   [31:0] xor_ln215_2_reg_2161;
wire   [31:0] round_tmp2_V_1_fu_846_p2;
reg   [31:0] round_tmp2_V_1_reg_2166;
wire   [4:0] add_ln691_fu_934_p2;
reg   [4:0] add_ln691_reg_2171;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] p_Result_12_reg_2196;
wire   [3:0] or_ln414_fu_1004_p2;
reg   [3:0] or_ln414_reg_2201;
reg   [31:0] p_Result_13_reg_2213;
reg   [31:0] p_Result_14_reg_2218;
wire   [0:0] write_flag48_1_fu_1029_p18;
reg   [0:0] write_flag48_1_reg_2223;
wire   [0:0] write_flag4_1_fu_1067_p18;
reg   [0:0] write_flag4_1_reg_2228;
wire   [0:0] write_flag41_1_fu_1105_p18;
reg   [0:0] write_flag41_1_reg_2233;
wire   [0:0] write_flag35_1_fu_1143_p18;
reg   [0:0] write_flag35_1_reg_2238;
wire   [0:0] write_flag11_1_fu_1181_p18;
reg   [0:0] write_flag11_1_reg_2243;
wire   [0:0] write_flag29_1_fu_1219_p18;
reg   [0:0] write_flag29_1_reg_2248;
wire   [0:0] write_flag23_1_fu_1257_p18;
reg   [0:0] write_flag23_1_reg_2253;
wire   [0:0] write_flag17_1_fu_1295_p18;
reg   [0:0] write_flag17_1_reg_2258;
wire   [127:0] this_11550_1_fu_1377_p18;
reg    ap_enable_reg_pp0_iter1;
wire   [127:0] this_113_1_fu_1414_p18;
wire   [127:0] this_116_1_fu_1451_p18;
wire   [127:0] this_111_1_fu_1488_p18;
wire   [127:0] this_19_1_fu_1525_p18;
wire   [127:0] this_13_1_fu_1562_p18;
wire   [127:0] this_17_1_fu_1599_p18;
wire   [127:0] this_15_1_fu_1636_p18;
wire   [255:0] p_Result_20_fu_1673_p9;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_iter_V_phi_fu_608_p4;
reg   [255:0] ap_phi_mux_p_Val2_s_phi_fu_619_p4;
wire   [63:0] zext_ln708_fu_705_p1;
wire   [63:0] zext_ln534_fu_726_p1;
wire   [63:0] zext_ln708_1_fu_741_p1;
wire   [63:0] zext_ln708_2_fu_756_p1;
wire   [63:0] zext_ln708_3_fu_761_p1;
wire   [63:0] zext_ln708_4_fu_944_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln708_5_fu_959_p1;
wire   [63:0] zext_ln708_6_fu_974_p1;
wire   [63:0] zext_ln708_7_fu_989_p1;
reg   [127:0] p_Val2_1_fu_168;
wire   [127:0] p_Result_18_fu_852_p5;
wire    ap_CS_fsm_state5;
reg   [0:0] write_flag44_0_fu_172;
reg   [127:0] p_Val2_2_fu_176;
reg   [0:0] write_flag8_0_fu_180;
reg   [0:0] write_flag38_0_fu_184;
reg   [127:0] p_Val2_3_fu_188;
reg   [127:0] p_Val2_4_fu_192;
reg   [0:0] write_flag32_0_fu_196;
reg   [127:0] p_Val2_5_fu_200;
reg   [0:0] write_flag14_0_fu_204;
reg   [0:0] write_flag26_0_fu_208;
reg   [127:0] p_Val2_6_fu_212;
reg   [127:0] p_Val2_7_fu_216;
reg   [0:0] write_flag20_0_fu_220;
wire   [7:0] p_Result_s_66_fu_695_p4;
wire   [2:0] trunc_ln1_fu_710_p4;
wire   [2:0] ret_fu_720_p2;
wire   [7:0] p_Result_2_fu_731_p4;
wire   [7:0] p_Result_3_fu_746_p4;
wire   [7:0] tmp_fu_685_p4;
wire   [7:0] ret_1_fu_776_p2;
wire   [31:0] trunc_ln674_1_fu_794_p1;
wire   [31:0] p_Result_17_fu_782_p5;
wire   [31:0] p_Result_7_fu_804_p4;
wire   [31:0] p_Result_8_fu_820_p4;
wire   [31:0] p_Result_9_fu_836_p4;
wire   [7:0] trunc_ln708_fu_940_p1;
wire   [7:0] p_Result_5_fu_949_p4;
wire   [7:0] p_Result_6_fu_964_p4;
wire   [7:0] p_Result_10_fu_979_p4;
wire   [31:0] p_Result_19_fu_1333_p5;
wire   [31:0] xor_ln215_4_fu_1345_p2;
wire   [31:0] xor_ln215_5_fu_1350_p2;
wire   [31:0] xor_ln215_6_fu_1355_p2;
wire   [31:0] xor_ln215_7_fu_1360_p2;
wire   [127:0] p_Result_15_fu_1365_p5;
wire   [127:0] select_ln613_fu_1731_p3;
wire   [127:0] select_ln613_1_fu_1738_p3;
wire   [127:0] select_ln613_2_fu_1745_p3;
wire   [127:0] select_ln613_3_fu_1752_p3;
wire   [127:0] select_ln613_4_fu_1759_p3;
wire   [127:0] select_ln613_5_fu_1766_p3;
wire   [127:0] select_ln613_6_fu_1773_p3;
wire   [127:0] select_ln613_7_fu_1780_p3;
wire   [127:0] select_ln613_8_fu_1787_p3;
wire   [127:0] select_ln613_9_fu_1794_p3;
wire   [127:0] select_ln613_10_fu_1801_p3;
wire   [127:0] select_ln613_11_fu_1808_p3;
wire   [127:0] select_ln613_12_fu_1815_p3;
wire   [127:0] select_ln613_13_fu_1822_p3;
wire   [127:0] select_ln613_14_fu_1829_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

hls_recv_krnl_updateKey_decipher_0_2 #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
decipher_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(decipher_0_2_address0),
    .ce0(decipher_0_2_ce0),
    .q0(decipher_0_2_q0),
    .address1(decipher_0_2_address1),
    .ce1(decipher_0_2_ce1),
    .q1(decipher_0_2_q1),
    .address2(decipher_0_2_address2),
    .ce2(decipher_0_2_ce2),
    .q2(decipher_0_2_q2),
    .address3(decipher_0_2_address3),
    .ce3(decipher_0_2_ce3),
    .q3(decipher_0_2_q3)
);

hls_recv_krnl_updateKey_Rcon #(
    .DataWidth( 8 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
Rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon_address0),
    .ce0(Rcon_ce0),
    .q0(Rcon_q0)
);

hls_recv_krnl_mux_164_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 1 ))
mux_164_1_1_1_U172(
    .din0(1'd1),
    .din1(write_flag48_0_reg_580),
    .din2(1'd1),
    .din3(write_flag48_0_reg_580),
    .din4(1'd1),
    .din5(write_flag48_0_reg_580),
    .din6(1'd1),
    .din7(write_flag48_0_reg_580),
    .din8(1'd1),
    .din9(write_flag48_0_reg_580),
    .din10(1'd1),
    .din11(write_flag48_0_reg_580),
    .din12(1'd1),
    .din13(write_flag48_0_reg_580),
    .din14(1'd1),
    .din15(1'd1),
    .din16(or_ln414_fu_1004_p2),
    .dout(write_flag48_1_fu_1029_p18)
);

hls_recv_krnl_mux_164_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 1 ))
mux_164_1_1_1_U173(
    .din0(write_flag4_0_reg_568),
    .din1(1'd1),
    .din2(write_flag4_0_reg_568),
    .din3(write_flag4_0_reg_568),
    .din4(write_flag4_0_reg_568),
    .din5(write_flag4_0_reg_568),
    .din6(write_flag4_0_reg_568),
    .din7(write_flag4_0_reg_568),
    .din8(write_flag4_0_reg_568),
    .din9(write_flag4_0_reg_568),
    .din10(write_flag4_0_reg_568),
    .din11(write_flag4_0_reg_568),
    .din12(write_flag4_0_reg_568),
    .din13(write_flag4_0_reg_568),
    .din14(write_flag4_0_reg_568),
    .din15(write_flag4_0_reg_568),
    .din16(or_ln414_fu_1004_p2),
    .dout(write_flag4_1_fu_1067_p18)
);

hls_recv_krnl_mux_164_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 1 ))
mux_164_1_1_1_U174(
    .din0(write_flag41_0_reg_534),
    .din1(write_flag41_0_reg_534),
    .din2(write_flag41_0_reg_534),
    .din3(write_flag41_0_reg_534),
    .din4(write_flag41_0_reg_534),
    .din5(write_flag41_0_reg_534),
    .din6(write_flag41_0_reg_534),
    .din7(write_flag41_0_reg_534),
    .din8(write_flag41_0_reg_534),
    .din9(write_flag41_0_reg_534),
    .din10(write_flag41_0_reg_534),
    .din11(write_flag41_0_reg_534),
    .din12(write_flag41_0_reg_534),
    .din13(1'd1),
    .din14(write_flag41_0_reg_534),
    .din15(write_flag41_0_reg_534),
    .din16(or_ln414_fu_1004_p2),
    .dout(write_flag41_1_fu_1105_p18)
);

hls_recv_krnl_mux_164_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 1 ))
mux_164_1_1_1_U175(
    .din0(write_flag35_0_reg_510),
    .din1(write_flag35_0_reg_510),
    .din2(write_flag35_0_reg_510),
    .din3(write_flag35_0_reg_510),
    .din4(write_flag35_0_reg_510),
    .din5(write_flag35_0_reg_510),
    .din6(write_flag35_0_reg_510),
    .din7(write_flag35_0_reg_510),
    .din8(write_flag35_0_reg_510),
    .din9(write_flag35_0_reg_510),
    .din10(write_flag35_0_reg_510),
    .din11(1'd1),
    .din12(write_flag35_0_reg_510),
    .din13(write_flag35_0_reg_510),
    .din14(write_flag35_0_reg_510),
    .din15(write_flag35_0_reg_510),
    .din16(or_ln414_fu_1004_p2),
    .dout(write_flag35_1_fu_1143_p18)
);

hls_recv_krnl_mux_164_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 1 ))
mux_164_1_1_1_U176(
    .din0(write_flag11_0_reg_498),
    .din1(write_flag11_0_reg_498),
    .din2(write_flag11_0_reg_498),
    .din3(1'd1),
    .din4(write_flag11_0_reg_498),
    .din5(write_flag11_0_reg_498),
    .din6(write_flag11_0_reg_498),
    .din7(write_flag11_0_reg_498),
    .din8(write_flag11_0_reg_498),
    .din9(write_flag11_0_reg_498),
    .din10(write_flag11_0_reg_498),
    .din11(write_flag11_0_reg_498),
    .din12(write_flag11_0_reg_498),
    .din13(write_flag11_0_reg_498),
    .din14(write_flag11_0_reg_498),
    .din15(write_flag11_0_reg_498),
    .din16(or_ln414_fu_1004_p2),
    .dout(write_flag11_1_fu_1181_p18)
);

hls_recv_krnl_mux_164_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 1 ))
mux_164_1_1_1_U177(
    .din0(write_flag29_0_reg_462),
    .din1(write_flag29_0_reg_462),
    .din2(write_flag29_0_reg_462),
    .din3(write_flag29_0_reg_462),
    .din4(write_flag29_0_reg_462),
    .din5(write_flag29_0_reg_462),
    .din6(write_flag29_0_reg_462),
    .din7(write_flag29_0_reg_462),
    .din8(write_flag29_0_reg_462),
    .din9(1'd1),
    .din10(write_flag29_0_reg_462),
    .din11(write_flag29_0_reg_462),
    .din12(write_flag29_0_reg_462),
    .din13(write_flag29_0_reg_462),
    .din14(write_flag29_0_reg_462),
    .din15(write_flag29_0_reg_462),
    .din16(or_ln414_fu_1004_p2),
    .dout(write_flag29_1_fu_1219_p18)
);

hls_recv_krnl_mux_164_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 1 ))
mux_164_1_1_1_U178(
    .din0(write_flag23_0_reg_438),
    .din1(write_flag23_0_reg_438),
    .din2(write_flag23_0_reg_438),
    .din3(write_flag23_0_reg_438),
    .din4(write_flag23_0_reg_438),
    .din5(write_flag23_0_reg_438),
    .din6(write_flag23_0_reg_438),
    .din7(1'd1),
    .din8(write_flag23_0_reg_438),
    .din9(write_flag23_0_reg_438),
    .din10(write_flag23_0_reg_438),
    .din11(write_flag23_0_reg_438),
    .din12(write_flag23_0_reg_438),
    .din13(write_flag23_0_reg_438),
    .din14(write_flag23_0_reg_438),
    .din15(write_flag23_0_reg_438),
    .din16(or_ln414_fu_1004_p2),
    .dout(write_flag23_1_fu_1257_p18)
);

hls_recv_krnl_mux_164_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 1 ))
mux_164_1_1_1_U179(
    .din0(write_flag17_0_reg_426),
    .din1(write_flag17_0_reg_426),
    .din2(write_flag17_0_reg_426),
    .din3(write_flag17_0_reg_426),
    .din4(write_flag17_0_reg_426),
    .din5(1'd1),
    .din6(write_flag17_0_reg_426),
    .din7(write_flag17_0_reg_426),
    .din8(write_flag17_0_reg_426),
    .din9(write_flag17_0_reg_426),
    .din10(write_flag17_0_reg_426),
    .din11(write_flag17_0_reg_426),
    .din12(write_flag17_0_reg_426),
    .din13(write_flag17_0_reg_426),
    .din14(write_flag17_0_reg_426),
    .din15(write_flag17_0_reg_426),
    .din16(or_ln414_fu_1004_p2),
    .dout(write_flag17_1_fu_1295_p18)
);

hls_recv_krnl_mux_164_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 128 ),
    .din5_WIDTH( 128 ),
    .din6_WIDTH( 128 ),
    .din7_WIDTH( 128 ),
    .din8_WIDTH( 128 ),
    .din9_WIDTH( 128 ),
    .din10_WIDTH( 128 ),
    .din11_WIDTH( 128 ),
    .din12_WIDTH( 128 ),
    .din13_WIDTH( 128 ),
    .din14_WIDTH( 128 ),
    .din15_WIDTH( 128 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 128 ))
mux_164_128_1_1_U180(
    .din0(p_Result_15_fu_1365_p5),
    .din1(this_11550_016_reg_592),
    .din2(p_Result_15_fu_1365_p5),
    .din3(this_11550_016_reg_592),
    .din4(p_Result_15_fu_1365_p5),
    .din5(this_11550_016_reg_592),
    .din6(p_Result_15_fu_1365_p5),
    .din7(this_11550_016_reg_592),
    .din8(p_Result_15_fu_1365_p5),
    .din9(this_11550_016_reg_592),
    .din10(p_Result_15_fu_1365_p5),
    .din11(this_11550_016_reg_592),
    .din12(p_Result_15_fu_1365_p5),
    .din13(this_11550_016_reg_592),
    .din14(p_Result_15_fu_1365_p5),
    .din15(p_Result_15_fu_1365_p5),
    .din16(or_ln414_reg_2201),
    .dout(this_11550_1_fu_1377_p18)
);

hls_recv_krnl_mux_164_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 128 ),
    .din5_WIDTH( 128 ),
    .din6_WIDTH( 128 ),
    .din7_WIDTH( 128 ),
    .din8_WIDTH( 128 ),
    .din9_WIDTH( 128 ),
    .din10_WIDTH( 128 ),
    .din11_WIDTH( 128 ),
    .din12_WIDTH( 128 ),
    .din13_WIDTH( 128 ),
    .din14_WIDTH( 128 ),
    .din15_WIDTH( 128 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 128 ))
mux_164_128_1_1_U181(
    .din0(this_113_018_reg_556),
    .din1(this_113_018_reg_556),
    .din2(this_113_018_reg_556),
    .din3(this_113_018_reg_556),
    .din4(this_113_018_reg_556),
    .din5(this_113_018_reg_556),
    .din6(this_113_018_reg_556),
    .din7(this_113_018_reg_556),
    .din8(this_113_018_reg_556),
    .din9(this_113_018_reg_556),
    .din10(this_113_018_reg_556),
    .din11(this_113_018_reg_556),
    .din12(this_113_018_reg_556),
    .din13(p_Result_15_fu_1365_p5),
    .din14(this_113_018_reg_556),
    .din15(this_113_018_reg_556),
    .din16(or_ln414_reg_2201),
    .dout(this_113_1_fu_1414_p18)
);

hls_recv_krnl_mux_164_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 128 ),
    .din5_WIDTH( 128 ),
    .din6_WIDTH( 128 ),
    .din7_WIDTH( 128 ),
    .din8_WIDTH( 128 ),
    .din9_WIDTH( 128 ),
    .din10_WIDTH( 128 ),
    .din11_WIDTH( 128 ),
    .din12_WIDTH( 128 ),
    .din13_WIDTH( 128 ),
    .din14_WIDTH( 128 ),
    .din15_WIDTH( 128 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 128 ))
mux_164_128_1_1_U182(
    .din0(this_116_0_reg_546),
    .din1(p_Result_15_fu_1365_p5),
    .din2(this_116_0_reg_546),
    .din3(this_116_0_reg_546),
    .din4(this_116_0_reg_546),
    .din5(this_116_0_reg_546),
    .din6(this_116_0_reg_546),
    .din7(this_116_0_reg_546),
    .din8(this_116_0_reg_546),
    .din9(this_116_0_reg_546),
    .din10(this_116_0_reg_546),
    .din11(this_116_0_reg_546),
    .din12(this_116_0_reg_546),
    .din13(this_116_0_reg_546),
    .din14(this_116_0_reg_546),
    .din15(this_116_0_reg_546),
    .din16(or_ln414_reg_2201),
    .dout(this_116_1_fu_1451_p18)
);

hls_recv_krnl_mux_164_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 128 ),
    .din5_WIDTH( 128 ),
    .din6_WIDTH( 128 ),
    .din7_WIDTH( 128 ),
    .din8_WIDTH( 128 ),
    .din9_WIDTH( 128 ),
    .din10_WIDTH( 128 ),
    .din11_WIDTH( 128 ),
    .din12_WIDTH( 128 ),
    .din13_WIDTH( 128 ),
    .din14_WIDTH( 128 ),
    .din15_WIDTH( 128 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 128 ))
mux_164_128_1_1_U183(
    .din0(this_111_020_reg_522),
    .din1(this_111_020_reg_522),
    .din2(this_111_020_reg_522),
    .din3(this_111_020_reg_522),
    .din4(this_111_020_reg_522),
    .din5(this_111_020_reg_522),
    .din6(this_111_020_reg_522),
    .din7(this_111_020_reg_522),
    .din8(this_111_020_reg_522),
    .din9(this_111_020_reg_522),
    .din10(this_111_020_reg_522),
    .din11(p_Result_15_fu_1365_p5),
    .din12(this_111_020_reg_522),
    .din13(this_111_020_reg_522),
    .din14(this_111_020_reg_522),
    .din15(this_111_020_reg_522),
    .din16(or_ln414_reg_2201),
    .dout(this_111_1_fu_1488_p18)
);

hls_recv_krnl_mux_164_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 128 ),
    .din5_WIDTH( 128 ),
    .din6_WIDTH( 128 ),
    .din7_WIDTH( 128 ),
    .din8_WIDTH( 128 ),
    .din9_WIDTH( 128 ),
    .din10_WIDTH( 128 ),
    .din11_WIDTH( 128 ),
    .din12_WIDTH( 128 ),
    .din13_WIDTH( 128 ),
    .din14_WIDTH( 128 ),
    .din15_WIDTH( 128 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 128 ))
mux_164_128_1_1_U184(
    .din0(this_19_023_reg_486),
    .din1(this_19_023_reg_486),
    .din2(this_19_023_reg_486),
    .din3(this_19_023_reg_486),
    .din4(this_19_023_reg_486),
    .din5(this_19_023_reg_486),
    .din6(this_19_023_reg_486),
    .din7(this_19_023_reg_486),
    .din8(this_19_023_reg_486),
    .din9(p_Result_15_fu_1365_p5),
    .din10(this_19_023_reg_486),
    .din11(this_19_023_reg_486),
    .din12(this_19_023_reg_486),
    .din13(this_19_023_reg_486),
    .din14(this_19_023_reg_486),
    .din15(this_19_023_reg_486),
    .din16(or_ln414_reg_2201),
    .dout(this_19_1_fu_1525_p18)
);

hls_recv_krnl_mux_164_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 128 ),
    .din5_WIDTH( 128 ),
    .din6_WIDTH( 128 ),
    .din7_WIDTH( 128 ),
    .din8_WIDTH( 128 ),
    .din9_WIDTH( 128 ),
    .din10_WIDTH( 128 ),
    .din11_WIDTH( 128 ),
    .din12_WIDTH( 128 ),
    .din13_WIDTH( 128 ),
    .din14_WIDTH( 128 ),
    .din15_WIDTH( 128 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 128 ))
mux_164_128_1_1_U185(
    .din0(this_13_024_reg_474),
    .din1(this_13_024_reg_474),
    .din2(this_13_024_reg_474),
    .din3(p_Result_15_fu_1365_p5),
    .din4(this_13_024_reg_474),
    .din5(this_13_024_reg_474),
    .din6(this_13_024_reg_474),
    .din7(this_13_024_reg_474),
    .din8(this_13_024_reg_474),
    .din9(this_13_024_reg_474),
    .din10(this_13_024_reg_474),
    .din11(this_13_024_reg_474),
    .din12(this_13_024_reg_474),
    .din13(this_13_024_reg_474),
    .din14(this_13_024_reg_474),
    .din15(this_13_024_reg_474),
    .din16(or_ln414_reg_2201),
    .dout(this_13_1_fu_1562_p18)
);

hls_recv_krnl_mux_164_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 128 ),
    .din5_WIDTH( 128 ),
    .din6_WIDTH( 128 ),
    .din7_WIDTH( 128 ),
    .din8_WIDTH( 128 ),
    .din9_WIDTH( 128 ),
    .din10_WIDTH( 128 ),
    .din11_WIDTH( 128 ),
    .din12_WIDTH( 128 ),
    .din13_WIDTH( 128 ),
    .din14_WIDTH( 128 ),
    .din15_WIDTH( 128 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 128 ))
mux_164_128_1_1_U186(
    .din0(this_17_026_reg_450),
    .din1(this_17_026_reg_450),
    .din2(this_17_026_reg_450),
    .din3(this_17_026_reg_450),
    .din4(this_17_026_reg_450),
    .din5(this_17_026_reg_450),
    .din6(this_17_026_reg_450),
    .din7(p_Result_15_fu_1365_p5),
    .din8(this_17_026_reg_450),
    .din9(this_17_026_reg_450),
    .din10(this_17_026_reg_450),
    .din11(this_17_026_reg_450),
    .din12(this_17_026_reg_450),
    .din13(this_17_026_reg_450),
    .din14(this_17_026_reg_450),
    .din15(this_17_026_reg_450),
    .din16(or_ln414_reg_2201),
    .dout(this_17_1_fu_1599_p18)
);

hls_recv_krnl_mux_164_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 128 ),
    .din5_WIDTH( 128 ),
    .din6_WIDTH( 128 ),
    .din7_WIDTH( 128 ),
    .din8_WIDTH( 128 ),
    .din9_WIDTH( 128 ),
    .din10_WIDTH( 128 ),
    .din11_WIDTH( 128 ),
    .din12_WIDTH( 128 ),
    .din13_WIDTH( 128 ),
    .din14_WIDTH( 128 ),
    .din15_WIDTH( 128 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 128 ))
mux_164_128_1_1_U187(
    .din0(this_15_029_reg_414),
    .din1(this_15_029_reg_414),
    .din2(this_15_029_reg_414),
    .din3(this_15_029_reg_414),
    .din4(this_15_029_reg_414),
    .din5(p_Result_15_fu_1365_p5),
    .din6(this_15_029_reg_414),
    .din7(this_15_029_reg_414),
    .din8(this_15_029_reg_414),
    .din9(this_15_029_reg_414),
    .din10(this_15_029_reg_414),
    .din11(this_15_029_reg_414),
    .din12(this_15_029_reg_414),
    .din13(this_15_029_reg_414),
    .din14(this_15_029_reg_414),
    .din15(this_15_029_reg_414),
    .din16(or_ln414_reg_2201),
    .dout(this_15_1_fu_1636_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        iter_V_reg_604 <= add_ln691_reg_2171;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iter_V_reg_604 <= 5'd2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        p_Val2_s_reg_616 <= p_Result_20_fu_1673_p9;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_reg_616 <= cipherkey;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        this_116_0_reg_546 <= this_116_1_fu_1451_p18;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        this_116_0_reg_546 <= {{cipherkey[255:128]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        write_flag11_0_reg_498 <= write_flag11_1_reg_2243;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag11_0_reg_498 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag14_0_fu_204 <= 1'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln878_reg_2116 == 4'd4) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        write_flag14_0_fu_204 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        write_flag17_0_reg_426 <= write_flag17_1_reg_2258;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag17_0_reg_426 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag20_0_fu_220 <= 1'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln878_reg_2116 == 4'd6) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        write_flag20_0_fu_220 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        write_flag23_0_reg_438 <= write_flag23_1_reg_2253;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag23_0_reg_438 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag26_0_fu_208 <= 1'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln878_reg_2116 == 4'd8) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        write_flag26_0_fu_208 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        write_flag29_0_reg_462 <= write_flag29_1_reg_2248;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag29_0_reg_462 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag32_0_fu_196 <= 1'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln878_reg_2116 == 4'd10) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        write_flag32_0_fu_196 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        write_flag35_0_reg_510 <= write_flag35_1_reg_2238;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag35_0_reg_510 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag38_0_fu_184 <= 1'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln878_reg_2116 == 4'd12) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        write_flag38_0_fu_184 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        write_flag41_0_reg_534 <= write_flag41_1_reg_2233;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag41_0_reg_534 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag44_0_fu_172 <= 1'd0;
    end else if ((~(trunc_ln878_reg_2116 == 4'd12) & ~(trunc_ln878_reg_2116 == 4'd10) & ~(trunc_ln878_reg_2116 == 4'd8) & ~(trunc_ln878_reg_2116 == 4'd6) & ~(trunc_ln878_reg_2116 == 4'd4) & ~(trunc_ln878_reg_2116 == 4'd2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        write_flag44_0_fu_172 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        write_flag48_0_reg_580 <= write_flag48_1_reg_2223;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag48_0_reg_580 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        write_flag4_0_reg_568 <= write_flag4_1_reg_2228;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag4_0_reg_568 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag8_0_fu_180 <= 1'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln878_reg_2116 == 4'd2) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        write_flag8_0_fu_180 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        add_ln691_reg_2171 <= add_ln691_fu_934_p2;
        write_flag11_1_reg_2243 <= write_flag11_1_fu_1181_p18;
        write_flag17_1_reg_2258 <= write_flag17_1_fu_1295_p18;
        write_flag23_1_reg_2253 <= write_flag23_1_fu_1257_p18;
        write_flag29_1_reg_2248 <= write_flag29_1_fu_1219_p18;
        write_flag35_1_reg_2238 <= write_flag35_1_fu_1143_p18;
        write_flag41_1_reg_2233 <= write_flag41_1_fu_1105_p18;
        write_flag48_1_reg_2223 <= write_flag48_1_fu_1029_p18;
        write_flag4_1_reg_2228 <= write_flag4_1_fu_1067_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln878_reg_2112 <= icmp_ln878_fu_675_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        or_ln414_reg_2201[3 : 1] <= or_ln414_fu_1004_p2[3 : 1];
        p_Result_12_reg_2196 <= {{p_Val2_s_reg_616[159:128]}};
        p_Result_13_reg_2213 <= {{p_Val2_s_reg_616[191:160]}};
        p_Result_14_reg_2218 <= {{p_Val2_s_reg_616[223:192]}};
        round_tmp2_V_1_reg_2166 <= round_tmp2_V_1_fu_846_p2;
        round_tmp_V_reg_2146 <= {{p_Val2_s_reg_616[255:224]}};
        xor_ln215_1_reg_2156 <= xor_ln215_1_fu_814_p2;
        xor_ln215_2_reg_2161 <= xor_ln215_2_fu_830_p2;
        xor_ln215_reg_2151 <= xor_ln215_fu_798_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(trunc_ln878_reg_2116 == 4'd12) & ~(trunc_ln878_reg_2116 == 4'd10) & ~(trunc_ln878_reg_2116 == 4'd8) & ~(trunc_ln878_reg_2116 == 4'd6) & ~(trunc_ln878_reg_2116 == 4'd4) & ~(trunc_ln878_reg_2116 == 4'd2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        p_Val2_1_fu_168 <= p_Result_18_fu_852_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln878_reg_2116 == 4'd12) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        p_Val2_2_fu_176 <= p_Result_18_fu_852_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln878_reg_2116 == 4'd2) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        p_Val2_3_fu_188 <= p_Result_18_fu_852_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln878_reg_2116 == 4'd10) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        p_Val2_4_fu_192 <= p_Result_18_fu_852_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln878_reg_2116 == 4'd8) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        p_Val2_5_fu_200 <= p_Result_18_fu_852_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln878_reg_2116 == 4'd4) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        p_Val2_6_fu_212 <= p_Result_18_fu_852_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln878_reg_2116 == 4'd6) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        p_Val2_7_fu_216 <= p_Result_18_fu_852_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_2112 == 1'd1))) begin
        this_111_020_reg_522 <= this_111_1_fu_1488_p18;
        this_113_018_reg_556 <= this_113_1_fu_1414_p18;
        this_11550_016_reg_592 <= this_11550_1_fu_1377_p18;
        this_13_024_reg_474 <= this_13_1_fu_1562_p18;
        this_15_029_reg_414 <= this_15_1_fu_1636_p18;
        this_17_026_reg_450 <= this_17_1_fu_1599_p18;
        this_19_023_reg_486 <= this_19_1_fu_1525_p18;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln674_reg_2102 <= trunc_ln674_fu_626_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_fu_675_p2 == 1'd1))) begin
        trunc_ln878_reg_2116 <= trunc_ln878_fu_681_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Rcon_ce0 = 1'b1;
    end else begin
        Rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln878_fu_675_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln878_reg_2112 == 1'd1))) begin
        ap_phi_mux_iter_V_phi_fu_608_p4 = add_ln691_reg_2171;
    end else begin
        ap_phi_mux_iter_V_phi_fu_608_p4 = iter_V_reg_604;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln878_reg_2112 == 1'd1))) begin
        ap_phi_mux_p_Val2_s_phi_fu_619_p4 = p_Result_20_fu_1673_p9;
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_619_p4 = p_Val2_s_reg_616;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            decipher_0_2_address0 = zext_ln708_7_fu_989_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            decipher_0_2_address0 = zext_ln708_3_fu_761_p1;
        end else begin
            decipher_0_2_address0 = 'bx;
        end
    end else begin
        decipher_0_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            decipher_0_2_address1 = zext_ln708_6_fu_974_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            decipher_0_2_address1 = zext_ln708_2_fu_756_p1;
        end else begin
            decipher_0_2_address1 = 'bx;
        end
    end else begin
        decipher_0_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            decipher_0_2_address2 = zext_ln708_5_fu_959_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            decipher_0_2_address2 = zext_ln708_1_fu_741_p1;
        end else begin
            decipher_0_2_address2 = 'bx;
        end
    end else begin
        decipher_0_2_address2 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            decipher_0_2_address3 = zext_ln708_4_fu_944_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            decipher_0_2_address3 = zext_ln708_fu_705_p1;
        end else begin
            decipher_0_2_address3 = 'bx;
        end
    end else begin
        decipher_0_2_address3 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        decipher_0_2_ce0 = 1'b1;
    end else begin
        decipher_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        decipher_0_2_ce1 = 1'b1;
    end else begin
        decipher_0_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        decipher_0_2_ce2 = 1'b1;
    end else begin
        decipher_0_2_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        decipher_0_2_ce3 = 1'b1;
    end else begin
        decipher_0_2_ce3 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln878_fu_675_p2 == 1'd0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln878_fu_675_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Rcon_address0 = zext_ln534_fu_726_p1;

assign add_ln691_fu_934_p2 = (iter_V_reg_604 + 5'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = trunc_ln674_reg_2102;

assign ap_return_1 = select_ln613_fu_1731_p3;

assign ap_return_10 = select_ln613_9_fu_1794_p3;

assign ap_return_11 = select_ln613_10_fu_1801_p3;

assign ap_return_12 = select_ln613_11_fu_1808_p3;

assign ap_return_13 = select_ln613_12_fu_1815_p3;

assign ap_return_14 = select_ln613_13_fu_1822_p3;

assign ap_return_15 = select_ln613_14_fu_1829_p3;

assign ap_return_2 = select_ln613_1_fu_1738_p3;

assign ap_return_3 = select_ln613_2_fu_1745_p3;

assign ap_return_4 = select_ln613_3_fu_1752_p3;

assign ap_return_5 = select_ln613_4_fu_1759_p3;

assign ap_return_6 = select_ln613_5_fu_1766_p3;

assign ap_return_7 = select_ln613_6_fu_1773_p3;

assign ap_return_8 = select_ln613_7_fu_1780_p3;

assign ap_return_9 = select_ln613_8_fu_1787_p3;

assign icmp_ln878_fu_675_p2 = ((ap_phi_mux_iter_V_phi_fu_608_p4 < 5'd15) ? 1'b1 : 1'b0);

assign or_ln414_fu_1004_p2 = (trunc_ln878_reg_2116 | 4'd1);

assign p_Result_10_fu_979_p4 = {{round_tmp2_V_1_fu_846_p2[31:24]}};

assign p_Result_15_fu_1365_p5 = {{{{xor_ln215_7_fu_1360_p2}, {xor_ln215_6_fu_1355_p2}}, {xor_ln215_5_fu_1350_p2}}, {xor_ln215_4_fu_1345_p2}};

assign p_Result_17_fu_782_p5 = {{{{decipher_0_2_q0}, {decipher_0_2_q1}}, {decipher_0_2_q2}}, {ret_1_fu_776_p2}};

assign p_Result_18_fu_852_p5 = {{{{round_tmp2_V_1_fu_846_p2}, {xor_ln215_2_fu_830_p2}}, {xor_ln215_1_fu_814_p2}}, {xor_ln215_fu_798_p2}};

assign p_Result_19_fu_1333_p5 = {{{{decipher_0_2_q0}, {decipher_0_2_q1}}, {decipher_0_2_q2}}, {decipher_0_2_q3}};

assign p_Result_20_fu_1673_p9 = {{{{{{{{xor_ln215_7_fu_1360_p2}, {xor_ln215_6_fu_1355_p2}}, {xor_ln215_5_fu_1350_p2}}, {xor_ln215_4_fu_1345_p2}}, {round_tmp2_V_1_reg_2166}}, {xor_ln215_2_reg_2161}}, {xor_ln215_1_reg_2156}}, {xor_ln215_reg_2151}};

assign p_Result_2_fu_731_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_619_p4[247:240]}};

assign p_Result_3_fu_746_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_619_p4[255:248]}};

assign p_Result_5_fu_949_p4 = {{round_tmp2_V_1_fu_846_p2[15:8]}};

assign p_Result_6_fu_964_p4 = {{round_tmp2_V_1_fu_846_p2[23:16]}};

assign p_Result_7_fu_804_p4 = {{p_Val2_s_reg_616[63:32]}};

assign p_Result_8_fu_820_p4 = {{p_Val2_s_reg_616[95:64]}};

assign p_Result_9_fu_836_p4 = {{p_Val2_s_reg_616[127:96]}};

assign p_Result_s_66_fu_695_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_619_p4[239:232]}};

assign ret_1_fu_776_p2 = (decipher_0_2_q3 ^ Rcon_q0);

assign ret_fu_720_p2 = ($signed(trunc_ln1_fu_710_p4) + $signed(3'd7));

assign round_tmp2_V_1_fu_846_p2 = (xor_ln215_2_fu_830_p2 ^ p_Result_9_fu_836_p4);

assign select_ln613_10_fu_1801_p3 = ((write_flag35_0_reg_510[0:0] == 1'b1) ? this_111_020_reg_522 : p_read11);

assign select_ln613_11_fu_1808_p3 = ((write_flag38_0_fu_184[0:0] == 1'b1) ? p_Val2_2_fu_176 : p_read12);

assign select_ln613_12_fu_1815_p3 = ((write_flag41_0_reg_534[0:0] == 1'b1) ? this_113_018_reg_556 : p_read13);

assign select_ln613_13_fu_1822_p3 = ((write_flag44_0_fu_172[0:0] == 1'b1) ? p_Val2_1_fu_168 : p_read14);

assign select_ln613_14_fu_1829_p3 = ((write_flag48_0_reg_580[0:0] == 1'b1) ? this_11550_016_reg_592 : p_read15);

assign select_ln613_1_fu_1738_p3 = ((write_flag8_0_fu_180[0:0] == 1'b1) ? p_Val2_3_fu_188 : p_read2);

assign select_ln613_2_fu_1745_p3 = ((write_flag11_0_reg_498[0:0] == 1'b1) ? this_13_024_reg_474 : p_read3);

assign select_ln613_3_fu_1752_p3 = ((write_flag14_0_fu_204[0:0] == 1'b1) ? p_Val2_6_fu_212 : p_read4);

assign select_ln613_4_fu_1759_p3 = ((write_flag17_0_reg_426[0:0] == 1'b1) ? this_15_029_reg_414 : p_read5);

assign select_ln613_5_fu_1766_p3 = ((write_flag20_0_fu_220[0:0] == 1'b1) ? p_Val2_7_fu_216 : p_read6);

assign select_ln613_6_fu_1773_p3 = ((write_flag23_0_reg_438[0:0] == 1'b1) ? this_17_026_reg_450 : p_read7);

assign select_ln613_7_fu_1780_p3 = ((write_flag26_0_fu_208[0:0] == 1'b1) ? p_Val2_5_fu_200 : p_read8);

assign select_ln613_8_fu_1787_p3 = ((write_flag29_0_reg_462[0:0] == 1'b1) ? this_19_023_reg_486 : p_read9);

assign select_ln613_9_fu_1794_p3 = ((write_flag32_0_fu_196[0:0] == 1'b1) ? p_Val2_4_fu_192 : p_read10);

assign select_ln613_fu_1731_p3 = ((write_flag4_0_reg_568[0:0] == 1'b1) ? this_116_0_reg_546 : p_read1);

assign tmp_fu_685_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_619_p4[231:224]}};

assign trunc_ln1_fu_710_p4 = {{ap_phi_mux_iter_V_phi_fu_608_p4[3:1]}};

assign trunc_ln674_1_fu_794_p1 = p_Val2_s_reg_616[31:0];

assign trunc_ln674_fu_626_p1 = cipherkey[127:0];

assign trunc_ln708_fu_940_p1 = round_tmp2_V_1_fu_846_p2[7:0];

assign trunc_ln878_fu_681_p1 = ap_phi_mux_iter_V_phi_fu_608_p4[3:0];

assign xor_ln215_1_fu_814_p2 = (xor_ln215_fu_798_p2 ^ p_Result_7_fu_804_p4);

assign xor_ln215_2_fu_830_p2 = (xor_ln215_1_fu_814_p2 ^ p_Result_8_fu_820_p4);

assign xor_ln215_4_fu_1345_p2 = (p_Result_19_fu_1333_p5 ^ p_Result_12_reg_2196);

assign xor_ln215_5_fu_1350_p2 = (xor_ln215_4_fu_1345_p2 ^ p_Result_13_reg_2213);

assign xor_ln215_6_fu_1355_p2 = (xor_ln215_5_fu_1350_p2 ^ p_Result_14_reg_2218);

assign xor_ln215_7_fu_1360_p2 = (xor_ln215_6_fu_1355_p2 ^ round_tmp_V_reg_2146);

assign xor_ln215_fu_798_p2 = (trunc_ln674_1_fu_794_p1 ^ p_Result_17_fu_782_p5);

assign zext_ln534_fu_726_p1 = ret_fu_720_p2;

assign zext_ln708_1_fu_741_p1 = p_Result_2_fu_731_p4;

assign zext_ln708_2_fu_756_p1 = p_Result_3_fu_746_p4;

assign zext_ln708_3_fu_761_p1 = tmp_fu_685_p4;

assign zext_ln708_4_fu_944_p1 = trunc_ln708_fu_940_p1;

assign zext_ln708_5_fu_959_p1 = p_Result_5_fu_949_p4;

assign zext_ln708_6_fu_974_p1 = p_Result_6_fu_964_p4;

assign zext_ln708_7_fu_989_p1 = p_Result_10_fu_979_p4;

assign zext_ln708_fu_705_p1 = p_Result_s_66_fu_695_p4;

always @ (posedge ap_clk) begin
    or_ln414_reg_2201[0] <= 1'b1;
end

endmodule //hls_recv_krnl_updateKey
