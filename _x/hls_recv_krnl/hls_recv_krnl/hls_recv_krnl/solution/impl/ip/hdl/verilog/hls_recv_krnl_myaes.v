// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_recv_krnl_myaes (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        ciphertextStrm_dout,
        ciphertextStrm_empty_n,
        ciphertextStrm_read,
        endCiphertextStrm_dout,
        endCiphertextStrm_empty_n,
        endCiphertextStrm_read,
        cipherkeyStrm_dout,
        cipherkeyStrm_empty_n,
        cipherkeyStrm_read,
        IVStrm_dout,
        IVStrm_empty_n,
        IVStrm_read,
        plaintextStrm_din,
        plaintextStrm_full_n,
        plaintextStrm_write,
        endPlaintextStrm_din,
        endPlaintextStrm_full_n,
        endPlaintextStrm_write,
        timeaes_din,
        timeaes_full_n,
        timeaes_write,
        ComputeWordCnt_loc_dout,
        ComputeWordCnt_loc_empty_n,
        ComputeWordCnt_loc_read,
        ComputeWordCnt_loc_out_din,
        ComputeWordCnt_loc_out_full_n,
        ComputeWordCnt_loc_out_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_pp0_stage0 = 8'd4;
parameter    ap_ST_fsm_state32 = 8'd8;
parameter    ap_ST_fsm_state33 = 8'd16;
parameter    ap_ST_fsm_state34 = 8'd32;
parameter    ap_ST_fsm_pp1_stage0 = 8'd64;
parameter    ap_ST_fsm_state64 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [127:0] ciphertextStrm_dout;
input   ciphertextStrm_empty_n;
output   ciphertextStrm_read;
input  [0:0] endCiphertextStrm_dout;
input   endCiphertextStrm_empty_n;
output   endCiphertextStrm_read;
input  [255:0] cipherkeyStrm_dout;
input   cipherkeyStrm_empty_n;
output   cipherkeyStrm_read;
input  [127:0] IVStrm_dout;
input   IVStrm_empty_n;
output   IVStrm_read;
output  [127:0] plaintextStrm_din;
input   plaintextStrm_full_n;
output   plaintextStrm_write;
output  [0:0] endPlaintextStrm_din;
input   endPlaintextStrm_full_n;
output   endPlaintextStrm_write;
output  [31:0] timeaes_din;
input   timeaes_full_n;
output   timeaes_write;
input  [31:0] ComputeWordCnt_loc_dout;
input   ComputeWordCnt_loc_empty_n;
output   ComputeWordCnt_loc_read;
output  [31:0] ComputeWordCnt_loc_out_din;
input   ComputeWordCnt_loc_out_full_n;
output   ComputeWordCnt_loc_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg ciphertextStrm_read;
reg endCiphertextStrm_read;
reg cipherkeyStrm_read;
reg IVStrm_read;
reg[127:0] plaintextStrm_din;
reg plaintextStrm_write;
reg[0:0] endPlaintextStrm_din;
reg endPlaintextStrm_write;
reg[31:0] timeaes_din;
reg timeaes_write;
reg ComputeWordCnt_loc_read;
reg ComputeWordCnt_loc_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    ciphertextStrm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] e_1_reg_223;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] e_4_reg_244;
reg    endCiphertextStrm_blk_n;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] ap_phi_mux_e_1_phi_fu_226_p4;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln878_fu_508_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [0:0] ap_phi_mux_e_4_phi_fu_247_p4;
reg    cipherkeyStrm_blk_n;
reg    IVStrm_blk_n;
reg    plaintextStrm_blk_n;
reg    ap_enable_reg_pp0_iter28;
reg   [0:0] e_1_reg_223_pp0_iter27_reg;
reg    ap_enable_reg_pp1_iter28;
reg   [0:0] e_4_reg_244_pp1_iter27_reg;
reg    endPlaintextStrm_blk_n;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state64;
reg    timeaes_blk_n;
reg    ComputeWordCnt_loc_blk_n;
reg    ComputeWordCnt_loc_out_blk_n;
reg   [127:0] feedback_r_V_reg_213;
reg   [0:0] e_1_reg_223_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
wire    ap_block_state14_pp0_stage0_iter11;
wire    ap_block_state15_pp0_stage0_iter12;
wire    ap_block_state16_pp0_stage0_iter13;
wire    ap_block_state17_pp0_stage0_iter14;
wire    ap_block_state18_pp0_stage0_iter15;
wire    ap_block_state19_pp0_stage0_iter16;
wire    ap_block_state20_pp0_stage0_iter17;
wire    ap_block_state21_pp0_stage0_iter18;
wire    ap_block_state22_pp0_stage0_iter19;
wire    ap_block_state23_pp0_stage0_iter20;
wire    ap_block_state24_pp0_stage0_iter21;
wire    ap_block_state25_pp0_stage0_iter22;
wire    ap_block_state26_pp0_stage0_iter23;
wire    ap_block_state27_pp0_stage0_iter24;
wire    ap_block_state28_pp0_stage0_iter25;
wire    ap_block_state29_pp0_stage0_iter26;
wire    ap_block_state30_pp0_stage0_iter27;
reg    ap_block_state31_pp0_stage0_iter28;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] e_1_reg_223_pp0_iter2_reg;
reg   [0:0] e_1_reg_223_pp0_iter3_reg;
reg   [0:0] e_1_reg_223_pp0_iter4_reg;
reg   [0:0] e_1_reg_223_pp0_iter5_reg;
reg   [0:0] e_1_reg_223_pp0_iter6_reg;
reg   [0:0] e_1_reg_223_pp0_iter7_reg;
reg   [0:0] e_1_reg_223_pp0_iter8_reg;
reg   [0:0] e_1_reg_223_pp0_iter9_reg;
reg   [0:0] e_1_reg_223_pp0_iter10_reg;
reg   [0:0] e_1_reg_223_pp0_iter11_reg;
reg   [0:0] e_1_reg_223_pp0_iter12_reg;
reg   [0:0] e_1_reg_223_pp0_iter13_reg;
reg   [0:0] e_1_reg_223_pp0_iter14_reg;
reg   [0:0] e_1_reg_223_pp0_iter15_reg;
reg   [0:0] e_1_reg_223_pp0_iter16_reg;
reg   [0:0] e_1_reg_223_pp0_iter17_reg;
reg   [0:0] e_1_reg_223_pp0_iter18_reg;
reg   [0:0] e_1_reg_223_pp0_iter19_reg;
reg   [0:0] e_1_reg_223_pp0_iter20_reg;
reg   [0:0] e_1_reg_223_pp0_iter21_reg;
reg   [0:0] e_1_reg_223_pp0_iter22_reg;
reg   [0:0] e_1_reg_223_pp0_iter23_reg;
reg   [0:0] e_1_reg_223_pp0_iter24_reg;
reg   [0:0] e_1_reg_223_pp0_iter25_reg;
reg   [0:0] e_1_reg_223_pp0_iter26_reg;
reg   [0:0] e_4_reg_244_pp1_iter1_reg;
reg    ap_block_state35_pp1_stage0_iter0;
reg    ap_block_state36_pp1_stage0_iter1;
wire    ap_block_state37_pp1_stage0_iter2;
wire    ap_block_state38_pp1_stage0_iter3;
wire    ap_block_state39_pp1_stage0_iter4;
wire    ap_block_state40_pp1_stage0_iter5;
wire    ap_block_state41_pp1_stage0_iter6;
wire    ap_block_state42_pp1_stage0_iter7;
wire    ap_block_state43_pp1_stage0_iter8;
wire    ap_block_state44_pp1_stage0_iter9;
wire    ap_block_state45_pp1_stage0_iter10;
wire    ap_block_state46_pp1_stage0_iter11;
wire    ap_block_state47_pp1_stage0_iter12;
wire    ap_block_state48_pp1_stage0_iter13;
wire    ap_block_state49_pp1_stage0_iter14;
wire    ap_block_state50_pp1_stage0_iter15;
wire    ap_block_state51_pp1_stage0_iter16;
wire    ap_block_state52_pp1_stage0_iter17;
wire    ap_block_state53_pp1_stage0_iter18;
wire    ap_block_state54_pp1_stage0_iter19;
wire    ap_block_state55_pp1_stage0_iter20;
wire    ap_block_state56_pp1_stage0_iter21;
wire    ap_block_state57_pp1_stage0_iter22;
wire    ap_block_state58_pp1_stage0_iter23;
wire    ap_block_state59_pp1_stage0_iter24;
wire    ap_block_state60_pp1_stage0_iter25;
wire    ap_block_state61_pp1_stage0_iter26;
wire    ap_block_state62_pp1_stage0_iter27;
reg    ap_block_state63_pp1_stage0_iter28;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] e_4_reg_244_pp1_iter2_reg;
reg   [0:0] e_4_reg_244_pp1_iter3_reg;
reg   [0:0] e_4_reg_244_pp1_iter4_reg;
reg   [0:0] e_4_reg_244_pp1_iter5_reg;
reg   [0:0] e_4_reg_244_pp1_iter6_reg;
reg   [0:0] e_4_reg_244_pp1_iter7_reg;
reg   [0:0] e_4_reg_244_pp1_iter8_reg;
reg   [0:0] e_4_reg_244_pp1_iter9_reg;
reg   [0:0] e_4_reg_244_pp1_iter10_reg;
reg   [0:0] e_4_reg_244_pp1_iter11_reg;
reg   [0:0] e_4_reg_244_pp1_iter12_reg;
reg   [0:0] e_4_reg_244_pp1_iter13_reg;
reg   [0:0] e_4_reg_244_pp1_iter14_reg;
reg   [0:0] e_4_reg_244_pp1_iter15_reg;
reg   [0:0] e_4_reg_244_pp1_iter16_reg;
reg   [0:0] e_4_reg_244_pp1_iter17_reg;
reg   [0:0] e_4_reg_244_pp1_iter18_reg;
reg   [0:0] e_4_reg_244_pp1_iter19_reg;
reg   [0:0] e_4_reg_244_pp1_iter20_reg;
reg   [0:0] e_4_reg_244_pp1_iter21_reg;
reg   [0:0] e_4_reg_244_pp1_iter22_reg;
reg   [0:0] e_4_reg_244_pp1_iter23_reg;
reg   [0:0] e_4_reg_244_pp1_iter24_reg;
reg   [0:0] e_4_reg_244_pp1_iter25_reg;
reg   [0:0] e_4_reg_244_pp1_iter26_reg;
reg   [127:0] feedback_r_V_6_reg_254;
reg   [255:0] reg_389;
reg   [127:0] reg_394;
reg   [127:0] reg_400;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state34;
reg   [127:0] reg_405;
reg   [127:0] reg_410;
reg   [127:0] reg_415;
reg   [127:0] reg_420;
reg   [127:0] reg_425;
reg   [127:0] reg_430;
reg   [127:0] reg_435;
reg   [127:0] reg_440;
reg   [127:0] reg_445;
reg   [127:0] reg_450;
reg   [127:0] reg_455;
reg   [127:0] reg_460;
reg   [127:0] reg_465;
reg   [127:0] reg_470;
reg   [127:0] reg_475;
reg   [127:0] reg_475_pp0_iter2_reg;
reg   [127:0] reg_475_pp0_iter3_reg;
reg   [127:0] reg_475_pp0_iter4_reg;
reg   [127:0] reg_475_pp0_iter5_reg;
reg   [127:0] reg_475_pp0_iter6_reg;
reg   [127:0] reg_475_pp0_iter7_reg;
reg   [127:0] reg_475_pp0_iter8_reg;
reg   [127:0] reg_475_pp0_iter9_reg;
reg   [127:0] reg_475_pp0_iter10_reg;
reg   [127:0] reg_475_pp0_iter11_reg;
reg   [127:0] reg_475_pp0_iter12_reg;
reg   [127:0] reg_475_pp0_iter13_reg;
reg   [127:0] reg_475_pp0_iter14_reg;
reg   [127:0] reg_475_pp0_iter15_reg;
reg   [127:0] reg_475_pp0_iter16_reg;
reg   [127:0] reg_475_pp0_iter17_reg;
reg   [127:0] reg_475_pp0_iter18_reg;
reg   [127:0] reg_475_pp0_iter19_reg;
reg   [127:0] reg_475_pp0_iter20_reg;
reg   [127:0] reg_475_pp0_iter21_reg;
reg   [127:0] reg_475_pp0_iter22_reg;
reg   [127:0] reg_475_pp0_iter23_reg;
reg   [127:0] reg_475_pp0_iter24_reg;
reg   [127:0] reg_475_pp0_iter25_reg;
reg   [127:0] reg_475_pp0_iter26_reg;
reg   [127:0] reg_475_pp0_iter27_reg;
reg   [127:0] reg_475_pp1_iter2_reg;
reg   [127:0] reg_475_pp1_iter3_reg;
reg   [127:0] reg_475_pp1_iter4_reg;
reg   [127:0] reg_475_pp1_iter5_reg;
reg   [127:0] reg_475_pp1_iter6_reg;
reg   [127:0] reg_475_pp1_iter7_reg;
reg   [127:0] reg_475_pp1_iter8_reg;
reg   [127:0] reg_475_pp1_iter9_reg;
reg   [127:0] reg_475_pp1_iter10_reg;
reg   [127:0] reg_475_pp1_iter11_reg;
reg   [127:0] reg_475_pp1_iter12_reg;
reg   [127:0] reg_475_pp1_iter13_reg;
reg   [127:0] reg_475_pp1_iter14_reg;
reg   [127:0] reg_475_pp1_iter15_reg;
reg   [127:0] reg_475_pp1_iter16_reg;
reg   [127:0] reg_475_pp1_iter17_reg;
reg   [127:0] reg_475_pp1_iter18_reg;
reg   [127:0] reg_475_pp1_iter19_reg;
reg   [127:0] reg_475_pp1_iter20_reg;
reg   [127:0] reg_475_pp1_iter21_reg;
reg   [127:0] reg_475_pp1_iter22_reg;
reg   [127:0] reg_475_pp1_iter23_reg;
reg   [127:0] reg_475_pp1_iter24_reg;
reg   [127:0] reg_475_pp1_iter25_reg;
reg   [127:0] reg_475_pp1_iter26_reg;
reg   [127:0] reg_475_pp1_iter27_reg;
reg   [31:0] ComputeWordCnt_loc_read_reg_659;
reg   [0:0] tmp_14_reg_664;
reg   [0:0] tmp_16_reg_669;
wire   [32:0] sub_i_i_i_i_fu_492_p2;
reg   [32:0] sub_i_i_i_i_reg_764;
wire   [31:0] add_ln878_fu_498_p2;
reg   [31:0] add_ln878_reg_769;
reg    ap_block_state33;
reg   [0:0] tmp_19_reg_822;
reg   [0:0] tmp_21_reg_827;
wire    grp_updateKey_fu_289_ap_ready;
wire    grp_updateKey_fu_289_ap_done;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter14;
reg    ap_enable_reg_pp1_iter15;
reg    ap_enable_reg_pp1_iter16;
reg    ap_enable_reg_pp1_iter17;
reg    ap_enable_reg_pp1_iter18;
reg    ap_enable_reg_pp1_iter19;
reg    ap_enable_reg_pp1_iter20;
reg    ap_enable_reg_pp1_iter21;
reg    ap_enable_reg_pp1_iter22;
reg    ap_enable_reg_pp1_iter23;
reg    ap_enable_reg_pp1_iter24;
reg    ap_enable_reg_pp1_iter25;
reg    ap_enable_reg_pp1_iter26;
reg    ap_enable_reg_pp1_iter27;
reg    ap_condition_pp1_exit_iter27_state62;
wire    grp_process_r_fu_264_ap_start;
wire    grp_process_r_fu_264_ap_done;
wire    grp_process_r_fu_264_ap_idle;
wire    grp_process_r_fu_264_ap_ready;
reg    grp_process_r_fu_264_ap_ce;
wire   [127:0] grp_process_r_fu_264_ap_return;
reg    ap_block_state3_pp0_stage0_iter0_ignore_call3;
reg    ap_block_state4_pp0_stage0_iter1_ignore_call3;
wire    ap_block_state5_pp0_stage0_iter2_ignore_call3;
wire    ap_block_state6_pp0_stage0_iter3_ignore_call3;
wire    ap_block_state7_pp0_stage0_iter4_ignore_call3;
wire    ap_block_state8_pp0_stage0_iter5_ignore_call3;
wire    ap_block_state9_pp0_stage0_iter6_ignore_call3;
wire    ap_block_state10_pp0_stage0_iter7_ignore_call3;
wire    ap_block_state11_pp0_stage0_iter8_ignore_call3;
wire    ap_block_state12_pp0_stage0_iter9_ignore_call3;
wire    ap_block_state13_pp0_stage0_iter10_ignore_call3;
wire    ap_block_state14_pp0_stage0_iter11_ignore_call3;
wire    ap_block_state15_pp0_stage0_iter12_ignore_call3;
wire    ap_block_state16_pp0_stage0_iter13_ignore_call3;
wire    ap_block_state17_pp0_stage0_iter14_ignore_call3;
wire    ap_block_state18_pp0_stage0_iter15_ignore_call3;
wire    ap_block_state19_pp0_stage0_iter16_ignore_call3;
wire    ap_block_state20_pp0_stage0_iter17_ignore_call3;
wire    ap_block_state21_pp0_stage0_iter18_ignore_call3;
wire    ap_block_state22_pp0_stage0_iter19_ignore_call3;
wire    ap_block_state23_pp0_stage0_iter20_ignore_call3;
wire    ap_block_state24_pp0_stage0_iter21_ignore_call3;
wire    ap_block_state25_pp0_stage0_iter22_ignore_call3;
wire    ap_block_state26_pp0_stage0_iter23_ignore_call3;
wire    ap_block_state27_pp0_stage0_iter24_ignore_call3;
wire    ap_block_state28_pp0_stage0_iter25_ignore_call3;
wire    ap_block_state29_pp0_stage0_iter26_ignore_call3;
wire    ap_block_state30_pp0_stage0_iter27_ignore_call3;
reg    ap_block_state31_pp0_stage0_iter28_ignore_call3;
reg    ap_block_pp0_stage0_11001_ignoreCallOp112;
reg    ap_block_state35_pp1_stage0_iter0_ignore_call3;
reg    ap_block_state36_pp1_stage0_iter1_ignore_call3;
wire    ap_block_state37_pp1_stage0_iter2_ignore_call3;
wire    ap_block_state38_pp1_stage0_iter3_ignore_call3;
wire    ap_block_state39_pp1_stage0_iter4_ignore_call3;
wire    ap_block_state40_pp1_stage0_iter5_ignore_call3;
wire    ap_block_state41_pp1_stage0_iter6_ignore_call3;
wire    ap_block_state42_pp1_stage0_iter7_ignore_call3;
wire    ap_block_state43_pp1_stage0_iter8_ignore_call3;
wire    ap_block_state44_pp1_stage0_iter9_ignore_call3;
wire    ap_block_state45_pp1_stage0_iter10_ignore_call3;
wire    ap_block_state46_pp1_stage0_iter11_ignore_call3;
wire    ap_block_state47_pp1_stage0_iter12_ignore_call3;
wire    ap_block_state48_pp1_stage0_iter13_ignore_call3;
wire    ap_block_state49_pp1_stage0_iter14_ignore_call3;
wire    ap_block_state50_pp1_stage0_iter15_ignore_call3;
wire    ap_block_state51_pp1_stage0_iter16_ignore_call3;
wire    ap_block_state52_pp1_stage0_iter17_ignore_call3;
wire    ap_block_state53_pp1_stage0_iter18_ignore_call3;
wire    ap_block_state54_pp1_stage0_iter19_ignore_call3;
wire    ap_block_state55_pp1_stage0_iter20_ignore_call3;
wire    ap_block_state56_pp1_stage0_iter21_ignore_call3;
wire    ap_block_state57_pp1_stage0_iter22_ignore_call3;
wire    ap_block_state58_pp1_stage0_iter23_ignore_call3;
wire    ap_block_state59_pp1_stage0_iter24_ignore_call3;
wire    ap_block_state60_pp1_stage0_iter25_ignore_call3;
wire    ap_block_state61_pp1_stage0_iter26_ignore_call3;
wire    ap_block_state62_pp1_stage0_iter27_ignore_call3;
reg    ap_block_state63_pp1_stage0_iter28_ignore_call3;
reg    ap_block_pp1_stage0_11001_ignoreCallOp233;
wire    grp_updateKey_fu_289_ap_start;
wire    grp_updateKey_fu_289_ap_idle;
reg   [127:0] grp_updateKey_fu_289_p_read1;
reg   [127:0] grp_updateKey_fu_289_p_read2;
reg   [127:0] grp_updateKey_fu_289_p_read3;
reg   [127:0] grp_updateKey_fu_289_p_read4;
reg   [127:0] grp_updateKey_fu_289_p_read5;
reg   [127:0] grp_updateKey_fu_289_p_read6;
reg   [127:0] grp_updateKey_fu_289_p_read7;
reg   [127:0] grp_updateKey_fu_289_p_read8;
reg   [127:0] grp_updateKey_fu_289_p_read9;
reg   [127:0] grp_updateKey_fu_289_p_read10;
reg   [127:0] grp_updateKey_fu_289_p_read11;
reg   [127:0] grp_updateKey_fu_289_p_read12;
reg   [127:0] grp_updateKey_fu_289_p_read13;
reg   [127:0] grp_updateKey_fu_289_p_read14;
reg   [127:0] grp_updateKey_fu_289_p_read15;
wire   [127:0] grp_updateKey_fu_289_ap_return_0;
wire   [127:0] grp_updateKey_fu_289_ap_return_1;
wire   [127:0] grp_updateKey_fu_289_ap_return_2;
wire   [127:0] grp_updateKey_fu_289_ap_return_3;
wire   [127:0] grp_updateKey_fu_289_ap_return_4;
wire   [127:0] grp_updateKey_fu_289_ap_return_5;
wire   [127:0] grp_updateKey_fu_289_ap_return_6;
wire   [127:0] grp_updateKey_fu_289_ap_return_7;
wire   [127:0] grp_updateKey_fu_289_ap_return_8;
wire   [127:0] grp_updateKey_fu_289_ap_return_9;
wire   [127:0] grp_updateKey_fu_289_ap_return_10;
wire   [127:0] grp_updateKey_fu_289_ap_return_11;
wire   [127:0] grp_updateKey_fu_289_ap_return_12;
wire   [127:0] grp_updateKey_fu_289_ap_return_13;
wire   [127:0] grp_updateKey_fu_289_ap_return_14;
wire   [127:0] grp_updateKey_fu_289_ap_return_15;
reg   [31:0] i_V_reg_233;
reg    ap_block_state32;
reg    grp_process_r_fu_264_ap_start_reg;
reg    grp_updateKey_fu_289_ap_start_reg;
reg    ap_block_state1_ignore_call22;
reg    ap_block_state33_ignore_call20;
reg   [127:0] decipher_key_list_V_1_2_fu_90;
reg   [127:0] decipher_key_list_V_2_2_fu_94;
reg   [127:0] decipher_key_list_V_3_2_fu_98;
reg   [127:0] decipher_key_list_V_4_2_fu_102;
reg   [127:0] decipher_key_list_V_5_2_fu_106;
reg   [127:0] decipher_key_list_V_6_2_fu_110;
reg   [127:0] decipher_key_list_V_7_2_fu_114;
reg   [127:0] decipher_key_list_V_8_2_fu_118;
reg   [127:0] decipher_key_list_V_9_2_fu_122;
reg   [127:0] decipher_key_list_V_10_2_fu_126;
reg   [127:0] decipher_key_list_V_11_2_fu_130;
reg   [127:0] decipher_key_list_V_12_2_fu_134;
reg   [127:0] decipher_key_list_V_13_2_fu_138;
reg   [127:0] decipher_key_list_V_14_2_fu_142;
reg   [127:0] decipher_key_list_V_15_1_fu_146;
reg    ap_block_state1;
wire   [127:0] ret_fu_482_p2;
reg    ap_block_pp0_stage0_01001;
wire   [127:0] ret_2_fu_652_p2;
reg    ap_block_pp1_stage0_01001;
wire   [32:0] ComputeWordCnt_cast_i_i_fu_489_p1;
wire   [32:0] i_V_cast_fu_504_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp1_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter18 = 1'b0;
#0 ap_enable_reg_pp1_iter19 = 1'b0;
#0 ap_enable_reg_pp1_iter20 = 1'b0;
#0 ap_enable_reg_pp1_iter21 = 1'b0;
#0 ap_enable_reg_pp1_iter22 = 1'b0;
#0 ap_enable_reg_pp1_iter23 = 1'b0;
#0 ap_enable_reg_pp1_iter24 = 1'b0;
#0 ap_enable_reg_pp1_iter25 = 1'b0;
#0 ap_enable_reg_pp1_iter26 = 1'b0;
#0 ap_enable_reg_pp1_iter27 = 1'b0;
#0 grp_process_r_fu_264_ap_start_reg = 1'b0;
#0 grp_updateKey_fu_289_ap_start_reg = 1'b0;
end

hls_recv_krnl_process_r grp_process_r_fu_264(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_process_r_fu_264_ap_start),
    .ap_done(grp_process_r_fu_264_ap_done),
    .ap_idle(grp_process_r_fu_264_ap_idle),
    .ap_ready(grp_process_r_fu_264_ap_ready),
    .ap_ce(grp_process_r_fu_264_ap_ce),
    .p_read(reg_400),
    .p_read1(reg_405),
    .p_read2(reg_410),
    .p_read3(reg_415),
    .p_read4(reg_420),
    .p_read5(reg_425),
    .p_read6(reg_430),
    .p_read7(reg_435),
    .p_read8(reg_440),
    .p_read9(reg_445),
    .p_read10(reg_450),
    .p_read11(reg_455),
    .p_read12(reg_460),
    .p_read13(reg_465),
    .p_read14(reg_470),
    .ciphertext(ciphertextStrm_dout),
    .ap_return(grp_process_r_fu_264_ap_return)
);

hls_recv_krnl_updateKey grp_updateKey_fu_289(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_updateKey_fu_289_ap_start),
    .ap_done(grp_updateKey_fu_289_ap_done),
    .ap_idle(grp_updateKey_fu_289_ap_idle),
    .ap_ready(grp_updateKey_fu_289_ap_ready),
    .p_read1(grp_updateKey_fu_289_p_read1),
    .p_read2(grp_updateKey_fu_289_p_read2),
    .p_read3(grp_updateKey_fu_289_p_read3),
    .p_read4(grp_updateKey_fu_289_p_read4),
    .p_read5(grp_updateKey_fu_289_p_read5),
    .p_read6(grp_updateKey_fu_289_p_read6),
    .p_read7(grp_updateKey_fu_289_p_read7),
    .p_read8(grp_updateKey_fu_289_p_read8),
    .p_read9(grp_updateKey_fu_289_p_read9),
    .p_read10(grp_updateKey_fu_289_p_read10),
    .p_read11(grp_updateKey_fu_289_p_read11),
    .p_read12(grp_updateKey_fu_289_p_read12),
    .p_read13(grp_updateKey_fu_289_p_read13),
    .p_read14(grp_updateKey_fu_289_p_read14),
    .p_read15(grp_updateKey_fu_289_p_read15),
    .cipherkey(reg_389),
    .ap_return_0(grp_updateKey_fu_289_ap_return_0),
    .ap_return_1(grp_updateKey_fu_289_ap_return_1),
    .ap_return_2(grp_updateKey_fu_289_ap_return_2),
    .ap_return_3(grp_updateKey_fu_289_ap_return_3),
    .ap_return_4(grp_updateKey_fu_289_ap_return_4),
    .ap_return_5(grp_updateKey_fu_289_ap_return_5),
    .ap_return_6(grp_updateKey_fu_289_ap_return_6),
    .ap_return_7(grp_updateKey_fu_289_ap_return_7),
    .ap_return_8(grp_updateKey_fu_289_ap_return_8),
    .ap_return_9(grp_updateKey_fu_289_ap_return_9),
    .ap_return_10(grp_updateKey_fu_289_ap_return_10),
    .ap_return_11(grp_updateKey_fu_289_ap_return_11),
    .ap_return_12(grp_updateKey_fu_289_ap_return_12),
    .ap_return_13(grp_updateKey_fu_289_ap_return_13),
    .ap_return_14(grp_updateKey_fu_289_ap_return_14),
    .ap_return_15(grp_updateKey_fu_289_ap_return_15)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((timeaes_full_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd0)) | ((1'b0 == IVStrm_empty_n) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((cipherkeyStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((endCiphertextStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((grp_updateKey_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end else if (((grp_updateKey_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter28 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((grp_updateKey_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
        end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter26 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter27_state62)) | ((grp_updateKey_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state34)))) begin
            ap_enable_reg_pp1_iter27 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter28 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter27_state62))) begin
            ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter26;
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
        end else if (((grp_updateKey_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
            ap_enable_reg_pp1_iter28 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_process_r_fu_264_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_phi_mux_e_4_phi_fu_247_p4 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_e_1_phi_fu_226_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
            grp_process_r_fu_264_ap_start_reg <= 1'b1;
        end else if ((grp_process_r_fu_264_ap_ready == 1'b1)) begin
            grp_process_r_fu_264_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_updateKey_fu_289_ap_start_reg <= 1'b0;
    end else begin
        if (((~(((timeaes_full_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd0)) | ((1'b0 == IVStrm_empty_n) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((cipherkeyStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((endCiphertextStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd1)) | (~((cipherkeyStrm_empty_n == 1'b0) | (endCiphertextStrm_empty_n == 1'b0) | (1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (1'b0 == IVStrm_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_updateKey_fu_289_ap_start_reg <= 1'b1;
        end else if ((grp_updateKey_fu_289_ap_ready == 1'b1)) begin
            grp_updateKey_fu_289_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((e_1_reg_223 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_1_reg_223 <= tmp_16_reg_669;
    end else if (((grp_updateKey_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        e_1_reg_223 <= tmp_14_reg_664;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (e_4_reg_244 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        e_4_reg_244 <= tmp_21_reg_827;
    end else if (((grp_updateKey_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        e_4_reg_244 <= tmp_19_reg_822;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (e_4_reg_244_pp1_iter27_reg == 1'd0) & (ap_enable_reg_pp1_iter28 == 1'b1))) begin
        feedback_r_V_6_reg_254 <= reg_475_pp1_iter27_reg;
    end else if (((grp_updateKey_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        feedback_r_V_6_reg_254 <= reg_394;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (e_1_reg_223_pp0_iter27_reg == 1'd0) & (ap_enable_reg_pp0_iter28 == 1'b1))) begin
        feedback_r_V_reg_213 <= reg_475_pp0_iter27_reg;
    end else if (((grp_updateKey_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        feedback_r_V_reg_213 <= reg_394;
    end
end

always @ (posedge ap_clk) begin
    if (((endPlaintextStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
        i_V_reg_233 <= add_ln878_reg_769;
    end else if ((~((timeaes_full_n == 1'b0) | (endPlaintextStrm_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
        i_V_reg_233 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ComputeWordCnt_loc_read_reg_659 <= ComputeWordCnt_loc_dout;
        tmp_14_reg_664 <= endCiphertextStrm_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((timeaes_full_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd0)) | ((1'b0 == IVStrm_empty_n) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((cipherkeyStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((endCiphertextStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state33))) begin
        add_ln878_reg_769 <= add_ln878_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_updateKey_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        decipher_key_list_V_10_2_fu_126 <= grp_updateKey_fu_289_ap_return_10;
        decipher_key_list_V_11_2_fu_130 <= grp_updateKey_fu_289_ap_return_11;
        decipher_key_list_V_12_2_fu_134 <= grp_updateKey_fu_289_ap_return_12;
        decipher_key_list_V_13_2_fu_138 <= grp_updateKey_fu_289_ap_return_13;
        decipher_key_list_V_14_2_fu_142 <= grp_updateKey_fu_289_ap_return_14;
        decipher_key_list_V_15_1_fu_146 <= grp_updateKey_fu_289_ap_return_15;
        decipher_key_list_V_1_2_fu_90 <= grp_updateKey_fu_289_ap_return_1;
        decipher_key_list_V_2_2_fu_94 <= grp_updateKey_fu_289_ap_return_2;
        decipher_key_list_V_3_2_fu_98 <= grp_updateKey_fu_289_ap_return_3;
        decipher_key_list_V_4_2_fu_102 <= grp_updateKey_fu_289_ap_return_4;
        decipher_key_list_V_5_2_fu_106 <= grp_updateKey_fu_289_ap_return_5;
        decipher_key_list_V_6_2_fu_110 <= grp_updateKey_fu_289_ap_return_6;
        decipher_key_list_V_7_2_fu_114 <= grp_updateKey_fu_289_ap_return_7;
        decipher_key_list_V_8_2_fu_118 <= grp_updateKey_fu_289_ap_return_8;
        decipher_key_list_V_9_2_fu_122 <= grp_updateKey_fu_289_ap_return_9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        e_1_reg_223_pp0_iter10_reg <= e_1_reg_223_pp0_iter9_reg;
        e_1_reg_223_pp0_iter11_reg <= e_1_reg_223_pp0_iter10_reg;
        e_1_reg_223_pp0_iter12_reg <= e_1_reg_223_pp0_iter11_reg;
        e_1_reg_223_pp0_iter13_reg <= e_1_reg_223_pp0_iter12_reg;
        e_1_reg_223_pp0_iter14_reg <= e_1_reg_223_pp0_iter13_reg;
        e_1_reg_223_pp0_iter15_reg <= e_1_reg_223_pp0_iter14_reg;
        e_1_reg_223_pp0_iter16_reg <= e_1_reg_223_pp0_iter15_reg;
        e_1_reg_223_pp0_iter17_reg <= e_1_reg_223_pp0_iter16_reg;
        e_1_reg_223_pp0_iter18_reg <= e_1_reg_223_pp0_iter17_reg;
        e_1_reg_223_pp0_iter19_reg <= e_1_reg_223_pp0_iter18_reg;
        e_1_reg_223_pp0_iter20_reg <= e_1_reg_223_pp0_iter19_reg;
        e_1_reg_223_pp0_iter21_reg <= e_1_reg_223_pp0_iter20_reg;
        e_1_reg_223_pp0_iter22_reg <= e_1_reg_223_pp0_iter21_reg;
        e_1_reg_223_pp0_iter23_reg <= e_1_reg_223_pp0_iter22_reg;
        e_1_reg_223_pp0_iter24_reg <= e_1_reg_223_pp0_iter23_reg;
        e_1_reg_223_pp0_iter25_reg <= e_1_reg_223_pp0_iter24_reg;
        e_1_reg_223_pp0_iter26_reg <= e_1_reg_223_pp0_iter25_reg;
        e_1_reg_223_pp0_iter27_reg <= e_1_reg_223_pp0_iter26_reg;
        e_1_reg_223_pp0_iter2_reg <= e_1_reg_223_pp0_iter1_reg;
        e_1_reg_223_pp0_iter3_reg <= e_1_reg_223_pp0_iter2_reg;
        e_1_reg_223_pp0_iter4_reg <= e_1_reg_223_pp0_iter3_reg;
        e_1_reg_223_pp0_iter5_reg <= e_1_reg_223_pp0_iter4_reg;
        e_1_reg_223_pp0_iter6_reg <= e_1_reg_223_pp0_iter5_reg;
        e_1_reg_223_pp0_iter7_reg <= e_1_reg_223_pp0_iter6_reg;
        e_1_reg_223_pp0_iter8_reg <= e_1_reg_223_pp0_iter7_reg;
        e_1_reg_223_pp0_iter9_reg <= e_1_reg_223_pp0_iter8_reg;
        reg_475_pp0_iter10_reg <= reg_475_pp0_iter9_reg;
        reg_475_pp0_iter11_reg <= reg_475_pp0_iter10_reg;
        reg_475_pp0_iter12_reg <= reg_475_pp0_iter11_reg;
        reg_475_pp0_iter13_reg <= reg_475_pp0_iter12_reg;
        reg_475_pp0_iter14_reg <= reg_475_pp0_iter13_reg;
        reg_475_pp0_iter15_reg <= reg_475_pp0_iter14_reg;
        reg_475_pp0_iter16_reg <= reg_475_pp0_iter15_reg;
        reg_475_pp0_iter17_reg <= reg_475_pp0_iter16_reg;
        reg_475_pp0_iter18_reg <= reg_475_pp0_iter17_reg;
        reg_475_pp0_iter19_reg <= reg_475_pp0_iter18_reg;
        reg_475_pp0_iter20_reg <= reg_475_pp0_iter19_reg;
        reg_475_pp0_iter21_reg <= reg_475_pp0_iter20_reg;
        reg_475_pp0_iter22_reg <= reg_475_pp0_iter21_reg;
        reg_475_pp0_iter23_reg <= reg_475_pp0_iter22_reg;
        reg_475_pp0_iter24_reg <= reg_475_pp0_iter23_reg;
        reg_475_pp0_iter25_reg <= reg_475_pp0_iter24_reg;
        reg_475_pp0_iter26_reg <= reg_475_pp0_iter25_reg;
        reg_475_pp0_iter27_reg <= reg_475_pp0_iter26_reg;
        reg_475_pp0_iter2_reg <= reg_475;
        reg_475_pp0_iter3_reg <= reg_475_pp0_iter2_reg;
        reg_475_pp0_iter4_reg <= reg_475_pp0_iter3_reg;
        reg_475_pp0_iter5_reg <= reg_475_pp0_iter4_reg;
        reg_475_pp0_iter6_reg <= reg_475_pp0_iter5_reg;
        reg_475_pp0_iter7_reg <= reg_475_pp0_iter6_reg;
        reg_475_pp0_iter8_reg <= reg_475_pp0_iter7_reg;
        reg_475_pp0_iter9_reg <= reg_475_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_1_reg_223_pp0_iter1_reg <= e_1_reg_223;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        e_4_reg_244_pp1_iter10_reg <= e_4_reg_244_pp1_iter9_reg;
        e_4_reg_244_pp1_iter11_reg <= e_4_reg_244_pp1_iter10_reg;
        e_4_reg_244_pp1_iter12_reg <= e_4_reg_244_pp1_iter11_reg;
        e_4_reg_244_pp1_iter13_reg <= e_4_reg_244_pp1_iter12_reg;
        e_4_reg_244_pp1_iter14_reg <= e_4_reg_244_pp1_iter13_reg;
        e_4_reg_244_pp1_iter15_reg <= e_4_reg_244_pp1_iter14_reg;
        e_4_reg_244_pp1_iter16_reg <= e_4_reg_244_pp1_iter15_reg;
        e_4_reg_244_pp1_iter17_reg <= e_4_reg_244_pp1_iter16_reg;
        e_4_reg_244_pp1_iter18_reg <= e_4_reg_244_pp1_iter17_reg;
        e_4_reg_244_pp1_iter19_reg <= e_4_reg_244_pp1_iter18_reg;
        e_4_reg_244_pp1_iter20_reg <= e_4_reg_244_pp1_iter19_reg;
        e_4_reg_244_pp1_iter21_reg <= e_4_reg_244_pp1_iter20_reg;
        e_4_reg_244_pp1_iter22_reg <= e_4_reg_244_pp1_iter21_reg;
        e_4_reg_244_pp1_iter23_reg <= e_4_reg_244_pp1_iter22_reg;
        e_4_reg_244_pp1_iter24_reg <= e_4_reg_244_pp1_iter23_reg;
        e_4_reg_244_pp1_iter25_reg <= e_4_reg_244_pp1_iter24_reg;
        e_4_reg_244_pp1_iter26_reg <= e_4_reg_244_pp1_iter25_reg;
        e_4_reg_244_pp1_iter27_reg <= e_4_reg_244_pp1_iter26_reg;
        e_4_reg_244_pp1_iter2_reg <= e_4_reg_244_pp1_iter1_reg;
        e_4_reg_244_pp1_iter3_reg <= e_4_reg_244_pp1_iter2_reg;
        e_4_reg_244_pp1_iter4_reg <= e_4_reg_244_pp1_iter3_reg;
        e_4_reg_244_pp1_iter5_reg <= e_4_reg_244_pp1_iter4_reg;
        e_4_reg_244_pp1_iter6_reg <= e_4_reg_244_pp1_iter5_reg;
        e_4_reg_244_pp1_iter7_reg <= e_4_reg_244_pp1_iter6_reg;
        e_4_reg_244_pp1_iter8_reg <= e_4_reg_244_pp1_iter7_reg;
        e_4_reg_244_pp1_iter9_reg <= e_4_reg_244_pp1_iter8_reg;
        reg_475_pp1_iter10_reg <= reg_475_pp1_iter9_reg;
        reg_475_pp1_iter11_reg <= reg_475_pp1_iter10_reg;
        reg_475_pp1_iter12_reg <= reg_475_pp1_iter11_reg;
        reg_475_pp1_iter13_reg <= reg_475_pp1_iter12_reg;
        reg_475_pp1_iter14_reg <= reg_475_pp1_iter13_reg;
        reg_475_pp1_iter15_reg <= reg_475_pp1_iter14_reg;
        reg_475_pp1_iter16_reg <= reg_475_pp1_iter15_reg;
        reg_475_pp1_iter17_reg <= reg_475_pp1_iter16_reg;
        reg_475_pp1_iter18_reg <= reg_475_pp1_iter17_reg;
        reg_475_pp1_iter19_reg <= reg_475_pp1_iter18_reg;
        reg_475_pp1_iter20_reg <= reg_475_pp1_iter19_reg;
        reg_475_pp1_iter21_reg <= reg_475_pp1_iter20_reg;
        reg_475_pp1_iter22_reg <= reg_475_pp1_iter21_reg;
        reg_475_pp1_iter23_reg <= reg_475_pp1_iter22_reg;
        reg_475_pp1_iter24_reg <= reg_475_pp1_iter23_reg;
        reg_475_pp1_iter25_reg <= reg_475_pp1_iter24_reg;
        reg_475_pp1_iter26_reg <= reg_475_pp1_iter25_reg;
        reg_475_pp1_iter27_reg <= reg_475_pp1_iter26_reg;
        reg_475_pp1_iter2_reg <= reg_475;
        reg_475_pp1_iter3_reg <= reg_475_pp1_iter2_reg;
        reg_475_pp1_iter4_reg <= reg_475_pp1_iter3_reg;
        reg_475_pp1_iter5_reg <= reg_475_pp1_iter4_reg;
        reg_475_pp1_iter6_reg <= reg_475_pp1_iter5_reg;
        reg_475_pp1_iter7_reg <= reg_475_pp1_iter6_reg;
        reg_475_pp1_iter8_reg <= reg_475_pp1_iter7_reg;
        reg_475_pp1_iter9_reg <= reg_475_pp1_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        e_4_reg_244_pp1_iter1_reg <= e_4_reg_244;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) | ((1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd1)))) begin
        reg_389 <= cipherkeyStrm_dout;
        reg_394 <= IVStrm_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_400 <= grp_updateKey_fu_289_ap_return_0;
        reg_405 <= grp_updateKey_fu_289_ap_return_1;
        reg_410 <= grp_updateKey_fu_289_ap_return_2;
        reg_415 <= grp_updateKey_fu_289_ap_return_3;
        reg_420 <= grp_updateKey_fu_289_ap_return_4;
        reg_425 <= grp_updateKey_fu_289_ap_return_5;
        reg_430 <= grp_updateKey_fu_289_ap_return_6;
        reg_435 <= grp_updateKey_fu_289_ap_return_7;
        reg_440 <= grp_updateKey_fu_289_ap_return_8;
        reg_445 <= grp_updateKey_fu_289_ap_return_9;
        reg_450 <= grp_updateKey_fu_289_ap_return_10;
        reg_455 <= grp_updateKey_fu_289_ap_return_11;
        reg_460 <= grp_updateKey_fu_289_ap_return_12;
        reg_465 <= grp_updateKey_fu_289_ap_return_13;
        reg_470 <= grp_updateKey_fu_289_ap_return_14;
    end
end

always @ (posedge ap_clk) begin
    if ((((e_1_reg_223 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (e_4_reg_244 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        reg_475 <= ciphertextStrm_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        sub_i_i_i_i_reg_764 <= sub_i_i_i_i_fu_492_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_e_1_phi_fu_226_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_16_reg_669 <= endCiphertextStrm_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd1))) begin
        tmp_19_reg_822 <= endCiphertextStrm_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_phi_mux_e_4_phi_fu_247_p4 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_21_reg_827 <= endCiphertextStrm_dout;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ComputeWordCnt_loc_blk_n = ComputeWordCnt_loc_empty_n;
    end else begin
        ComputeWordCnt_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ComputeWordCnt_loc_out_blk_n = ComputeWordCnt_loc_out_full_n;
    end else begin
        ComputeWordCnt_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cipherkeyStrm_empty_n == 1'b0) | (endCiphertextStrm_empty_n == 1'b0) | (1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (1'b0 == IVStrm_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ComputeWordCnt_loc_out_write = 1'b1;
    end else begin
        ComputeWordCnt_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((cipherkeyStrm_empty_n == 1'b0) | (endCiphertextStrm_empty_n == 1'b0) | (1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (1'b0 == IVStrm_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ComputeWordCnt_loc_read = 1'b1;
    end else begin
        ComputeWordCnt_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd1)) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        IVStrm_blk_n = IVStrm_empty_n;
    end else begin
        IVStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~(((timeaes_full_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd0)) | ((1'b0 == IVStrm_empty_n) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((cipherkeyStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((endCiphertextStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd1)) | (~((cipherkeyStrm_empty_n == 1'b0) | (endCiphertextStrm_empty_n == 1'b0) | (1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (1'b0 == IVStrm_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        IVStrm_read = 1'b1;
    end else begin
        IVStrm_read = 1'b0;
    end
end

always @ (*) begin
    if ((ap_phi_mux_e_1_phi_fu_226_p4 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter27 == 1'b1) & (ap_enable_reg_pp1_iter26 == 1'b0))) begin
        ap_condition_pp1_exit_iter27_state62 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter27_state62 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_phi_mux_e_4_phi_fu_247_p4 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((~(((timeaes_full_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd0)) | ((1'b0 == IVStrm_empty_n) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((cipherkeyStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((endCiphertextStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter27 == 1'b0) & (ap_enable_reg_pp1_iter26 == 1'b0) & (ap_enable_reg_pp1_iter25 == 1'b0) & (ap_enable_reg_pp1_iter24 == 1'b0) & (ap_enable_reg_pp1_iter23 == 1'b0) & (ap_enable_reg_pp1_iter22 == 1'b0) & (ap_enable_reg_pp1_iter21 == 1'b0) & (ap_enable_reg_pp1_iter20 == 1'b0) & (ap_enable_reg_pp1_iter19 == 1'b0) & (ap_enable_reg_pp1_iter18 == 1'b0) & (ap_enable_reg_pp1_iter17 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter28 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((e_1_reg_223 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_e_1_phi_fu_226_p4 = tmp_16_reg_669;
    end else begin
        ap_phi_mux_e_1_phi_fu_226_p4 = e_1_reg_223;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (e_4_reg_244 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_e_4_phi_fu_247_p4 = tmp_21_reg_827;
    end else begin
        ap_phi_mux_e_4_phi_fu_247_p4 = e_4_reg_244;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd1)) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        cipherkeyStrm_blk_n = cipherkeyStrm_empty_n;
    end else begin
        cipherkeyStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~(((timeaes_full_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd0)) | ((1'b0 == IVStrm_empty_n) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((cipherkeyStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((endCiphertextStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd1)) | (~((cipherkeyStrm_empty_n == 1'b0) | (endCiphertextStrm_empty_n == 1'b0) | (1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (1'b0 == IVStrm_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        cipherkeyStrm_read = 1'b1;
    end else begin
        cipherkeyStrm_read = 1'b0;
    end
end

always @ (*) begin
    if ((((e_1_reg_223 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (e_4_reg_244 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        ciphertextStrm_blk_n = ciphertextStrm_empty_n;
    end else begin
        ciphertextStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((e_1_reg_223 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (e_4_reg_244 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        ciphertextStrm_read = 1'b1;
    end else begin
        ciphertextStrm_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_e_1_phi_fu_226_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd1)) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_phi_mux_e_4_phi_fu_247_p4 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        endCiphertextStrm_blk_n = endCiphertextStrm_empty_n;
    end else begin
        endCiphertextStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~(((timeaes_full_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd0)) | ((1'b0 == IVStrm_empty_n) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((cipherkeyStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((endCiphertextStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd1)) | (~((cipherkeyStrm_empty_n == 1'b0) | (endCiphertextStrm_empty_n == 1'b0) | (1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (1'b0 == IVStrm_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_phi_mux_e_4_phi_fu_247_p4 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_e_1_phi_fu_226_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        endCiphertextStrm_read = 1'b1;
    end else begin
        endCiphertextStrm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state32) | ((1'b0 == ap_block_pp0_stage0) & (e_1_reg_223_pp0_iter27_reg == 1'd0) & (ap_enable_reg_pp0_iter28 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (e_4_reg_244_pp1_iter27_reg == 1'd0) & (ap_enable_reg_pp1_iter28 == 1'b1)))) begin
        endPlaintextStrm_blk_n = endPlaintextStrm_full_n;
    end else begin
        endPlaintextStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((endPlaintextStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state64)) | (~((timeaes_full_n == 1'b0) | (endPlaintextStrm_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32)))) begin
        endPlaintextStrm_din = 1'd1;
    end else if ((((1'b0 == ap_block_pp1_stage0_01001) & (e_4_reg_244_pp1_iter27_reg == 1'd0) & (ap_enable_reg_pp1_iter28 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (e_1_reg_223_pp0_iter27_reg == 1'd0) & (ap_enable_reg_pp0_iter28 == 1'b1)))) begin
        endPlaintextStrm_din = 1'd0;
    end else begin
        endPlaintextStrm_din = 'bx;
    end
end

always @ (*) begin
    if ((((endPlaintextStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state64)) | (~((timeaes_full_n == 1'b0) | (endPlaintextStrm_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32)) | ((1'b0 == ap_block_pp1_stage0_11001) & (e_4_reg_244_pp1_iter27_reg == 1'd0) & (ap_enable_reg_pp1_iter28 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (e_1_reg_223_pp0_iter27_reg == 1'd0) & (ap_enable_reg_pp0_iter28 == 1'b1)))) begin
        endPlaintextStrm_write = 1'b1;
    end else begin
        endPlaintextStrm_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001_ignoreCallOp233) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp112) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_process_r_fu_264_ap_ce = 1'b1;
    end else begin
        grp_process_r_fu_264_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_updateKey_fu_289_p_read1 = decipher_key_list_V_1_2_fu_90;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_updateKey_fu_289_p_read1 = 128'd0;
    end else begin
        grp_updateKey_fu_289_p_read1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_updateKey_fu_289_p_read10 = decipher_key_list_V_10_2_fu_126;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_updateKey_fu_289_p_read10 = 128'd0;
    end else begin
        grp_updateKey_fu_289_p_read10 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_updateKey_fu_289_p_read11 = decipher_key_list_V_11_2_fu_130;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_updateKey_fu_289_p_read11 = 128'd0;
    end else begin
        grp_updateKey_fu_289_p_read11 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_updateKey_fu_289_p_read12 = decipher_key_list_V_12_2_fu_134;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_updateKey_fu_289_p_read12 = 128'd0;
    end else begin
        grp_updateKey_fu_289_p_read12 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_updateKey_fu_289_p_read13 = decipher_key_list_V_13_2_fu_138;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_updateKey_fu_289_p_read13 = 128'd0;
    end else begin
        grp_updateKey_fu_289_p_read13 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_updateKey_fu_289_p_read14 = decipher_key_list_V_14_2_fu_142;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_updateKey_fu_289_p_read14 = 128'd0;
    end else begin
        grp_updateKey_fu_289_p_read14 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_updateKey_fu_289_p_read15 = decipher_key_list_V_15_1_fu_146;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_updateKey_fu_289_p_read15 = 128'd0;
    end else begin
        grp_updateKey_fu_289_p_read15 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_updateKey_fu_289_p_read2 = decipher_key_list_V_2_2_fu_94;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_updateKey_fu_289_p_read2 = 128'd0;
    end else begin
        grp_updateKey_fu_289_p_read2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_updateKey_fu_289_p_read3 = decipher_key_list_V_3_2_fu_98;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_updateKey_fu_289_p_read3 = 128'd0;
    end else begin
        grp_updateKey_fu_289_p_read3 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_updateKey_fu_289_p_read4 = decipher_key_list_V_4_2_fu_102;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_updateKey_fu_289_p_read4 = 128'd0;
    end else begin
        grp_updateKey_fu_289_p_read4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_updateKey_fu_289_p_read5 = decipher_key_list_V_5_2_fu_106;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_updateKey_fu_289_p_read5 = 128'd0;
    end else begin
        grp_updateKey_fu_289_p_read5 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_updateKey_fu_289_p_read6 = decipher_key_list_V_6_2_fu_110;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_updateKey_fu_289_p_read6 = 128'd0;
    end else begin
        grp_updateKey_fu_289_p_read6 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_updateKey_fu_289_p_read7 = decipher_key_list_V_7_2_fu_114;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_updateKey_fu_289_p_read7 = 128'd0;
    end else begin
        grp_updateKey_fu_289_p_read7 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_updateKey_fu_289_p_read8 = decipher_key_list_V_8_2_fu_118;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_updateKey_fu_289_p_read8 = 128'd0;
    end else begin
        grp_updateKey_fu_289_p_read8 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_updateKey_fu_289_p_read9 = decipher_key_list_V_9_2_fu_122;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_updateKey_fu_289_p_read9 = 128'd0;
    end else begin
        grp_updateKey_fu_289_p_read9 = 'bx;
    end
end

always @ (*) begin
    if ((~(((timeaes_full_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd0)) | ((1'b0 == IVStrm_empty_n) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((cipherkeyStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((endCiphertextStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (e_1_reg_223_pp0_iter27_reg == 1'd0) & (ap_enable_reg_pp0_iter28 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (e_4_reg_244_pp1_iter27_reg == 1'd0) & (ap_enable_reg_pp1_iter28 == 1'b1)))) begin
        plaintextStrm_blk_n = plaintextStrm_full_n;
    end else begin
        plaintextStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (e_4_reg_244_pp1_iter27_reg == 1'd0) & (ap_enable_reg_pp1_iter28 == 1'b1))) begin
        plaintextStrm_din = ret_2_fu_652_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (e_1_reg_223_pp0_iter27_reg == 1'd0) & (ap_enable_reg_pp0_iter28 == 1'b1))) begin
        plaintextStrm_din = ret_fu_482_p2;
    end else begin
        plaintextStrm_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (e_4_reg_244_pp1_iter27_reg == 1'd0) & (ap_enable_reg_pp1_iter28 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (e_1_reg_223_pp0_iter27_reg == 1'd0) & (ap_enable_reg_pp0_iter28 == 1'b1)))) begin
        plaintextStrm_write = 1'b1;
    end else begin
        plaintextStrm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | ((1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd0)))) begin
        timeaes_blk_n = timeaes_full_n;
    end else begin
        timeaes_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((timeaes_full_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd0)) | ((1'b0 == IVStrm_empty_n) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((cipherkeyStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((endCiphertextStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd0))) begin
        timeaes_din = 32'd1;
    end else if ((~((timeaes_full_n == 1'b0) | (endPlaintextStrm_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
        timeaes_din = 32'd0;
    end else begin
        timeaes_din = 'bx;
    end
end

always @ (*) begin
    if (((~((timeaes_full_n == 1'b0) | (endPlaintextStrm_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32)) | (~(((timeaes_full_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd0)) | ((1'b0 == IVStrm_empty_n) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((cipherkeyStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((endCiphertextStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd0)))) begin
        timeaes_write = 1'b1;
    end else begin
        timeaes_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((cipherkeyStrm_empty_n == 1'b0) | (endCiphertextStrm_empty_n == 1'b0) | (1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (1'b0 == IVStrm_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_updateKey_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_phi_mux_e_1_phi_fu_226_p4 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_phi_mux_e_1_phi_fu_226_p4 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state32 : begin
            if ((~((timeaes_full_n == 1'b0) | (endPlaintextStrm_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if ((~(((timeaes_full_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd0)) | ((1'b0 == IVStrm_empty_n) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((cipherkeyStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((endCiphertextStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((timeaes_full_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd0)) | ((1'b0 == IVStrm_empty_n) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((cipherkeyStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((endCiphertextStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln878_fu_508_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((grp_updateKey_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter27 == 1'b1) & (ap_enable_reg_pp1_iter26 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter27 == 1'b1) & (ap_enable_reg_pp1_iter26 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state64 : begin
            if (((endPlaintextStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ComputeWordCnt_cast_i_i_fu_489_p1 = ComputeWordCnt_loc_read_reg_659;

assign ComputeWordCnt_loc_out_din = ComputeWordCnt_loc_dout;

assign add_ln878_fu_498_p2 = (i_V_reg_233 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((e_1_reg_223 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ciphertextStrm_empty_n == 1'b0)) | ((endCiphertextStrm_empty_n == 1'b0) & (ap_phi_mux_e_1_phi_fu_226_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter28 == 1'b1) & (((endPlaintextStrm_full_n == 1'b0) & (e_1_reg_223_pp0_iter27_reg == 1'd0)) | ((plaintextStrm_full_n == 1'b0) & (e_1_reg_223_pp0_iter27_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((e_1_reg_223 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ciphertextStrm_empty_n == 1'b0)) | ((endCiphertextStrm_empty_n == 1'b0) & (ap_phi_mux_e_1_phi_fu_226_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter28 == 1'b1) & (((endPlaintextStrm_full_n == 1'b0) & (e_1_reg_223_pp0_iter27_reg == 1'd0)) | ((plaintextStrm_full_n == 1'b0) & (e_1_reg_223_pp0_iter27_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp112 = (((e_1_reg_223 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ciphertextStrm_empty_n == 1'b0)) | ((endCiphertextStrm_empty_n == 1'b0) & (ap_phi_mux_e_1_phi_fu_226_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter28 == 1'b1) & (((endPlaintextStrm_full_n == 1'b0) & (e_1_reg_223_pp0_iter27_reg == 1'd0)) | ((plaintextStrm_full_n == 1'b0) & (e_1_reg_223_pp0_iter27_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((e_1_reg_223 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ciphertextStrm_empty_n == 1'b0)) | ((endCiphertextStrm_empty_n == 1'b0) & (ap_phi_mux_e_1_phi_fu_226_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter28 == 1'b1) & (((endPlaintextStrm_full_n == 1'b0) & (e_1_reg_223_pp0_iter27_reg == 1'd0)) | ((plaintextStrm_full_n == 1'b0) & (e_1_reg_223_pp0_iter27_reg == 1'd0)))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((ciphertextStrm_empty_n == 1'b0) & (e_4_reg_244 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((endCiphertextStrm_empty_n == 1'b0) & (ap_phi_mux_e_4_phi_fu_247_p4 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter28 == 1'b1) & (((endPlaintextStrm_full_n == 1'b0) & (e_4_reg_244_pp1_iter27_reg == 1'd0)) | ((plaintextStrm_full_n == 1'b0) & (e_4_reg_244_pp1_iter27_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ciphertextStrm_empty_n == 1'b0) & (e_4_reg_244 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((endCiphertextStrm_empty_n == 1'b0) & (ap_phi_mux_e_4_phi_fu_247_p4 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter28 == 1'b1) & (((endPlaintextStrm_full_n == 1'b0) & (e_4_reg_244_pp1_iter27_reg == 1'd0)) | ((plaintextStrm_full_n == 1'b0) & (e_4_reg_244_pp1_iter27_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001_ignoreCallOp233 = (((ciphertextStrm_empty_n == 1'b0) & (e_4_reg_244 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((endCiphertextStrm_empty_n == 1'b0) & (ap_phi_mux_e_4_phi_fu_247_p4 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter28 == 1'b1) & (((endPlaintextStrm_full_n == 1'b0) & (e_4_reg_244_pp1_iter27_reg == 1'd0)) | ((plaintextStrm_full_n == 1'b0) & (e_4_reg_244_pp1_iter27_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ciphertextStrm_empty_n == 1'b0) & (e_4_reg_244 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((endCiphertextStrm_empty_n == 1'b0) & (ap_phi_mux_e_4_phi_fu_247_p4 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter28 == 1'b1) & (((endPlaintextStrm_full_n == 1'b0) & (e_4_reg_244_pp1_iter27_reg == 1'd0)) | ((plaintextStrm_full_n == 1'b0) & (e_4_reg_244_pp1_iter27_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_state1 = ((cipherkeyStrm_empty_n == 1'b0) | (endCiphertextStrm_empty_n == 1'b0) | (1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (1'b0 == IVStrm_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter13_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter14_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter15_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter16_ignore_call3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_ignore_call22 = ((cipherkeyStrm_empty_n == 1'b0) | (endCiphertextStrm_empty_n == 1'b0) | (1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (1'b0 == IVStrm_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state20_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter17_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter18_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter19_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter20_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter21_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter22_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter23_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter24_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter25_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter26_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter27_ignore_call3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state31_pp0_stage0_iter28 = (((endPlaintextStrm_full_n == 1'b0) & (e_1_reg_223_pp0_iter27_reg == 1'd0)) | ((plaintextStrm_full_n == 1'b0) & (e_1_reg_223_pp0_iter27_reg == 1'd0)));
end

always @ (*) begin
    ap_block_state31_pp0_stage0_iter28_ignore_call3 = (((endPlaintextStrm_full_n == 1'b0) & (e_1_reg_223_pp0_iter27_reg == 1'd0)) | ((plaintextStrm_full_n == 1'b0) & (e_1_reg_223_pp0_iter27_reg == 1'd0)));
end

always @ (*) begin
    ap_block_state32 = ((timeaes_full_n == 1'b0) | (endPlaintextStrm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state33 = (((timeaes_full_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd0)) | ((1'b0 == IVStrm_empty_n) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((cipherkeyStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((endCiphertextStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)));
end

always @ (*) begin
    ap_block_state33_ignore_call20 = (((timeaes_full_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd0)) | ((1'b0 == IVStrm_empty_n) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((cipherkeyStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)) | ((endCiphertextStrm_empty_n == 1'b0) & (icmp_ln878_fu_508_p2 == 1'd1)));
end

always @ (*) begin
    ap_block_state35_pp1_stage0_iter0 = ((endCiphertextStrm_empty_n == 1'b0) & (ap_phi_mux_e_4_phi_fu_247_p4 == 1'd0));
end

always @ (*) begin
    ap_block_state35_pp1_stage0_iter0_ignore_call3 = ((endCiphertextStrm_empty_n == 1'b0) & (ap_phi_mux_e_4_phi_fu_247_p4 == 1'd0));
end

always @ (*) begin
    ap_block_state36_pp1_stage0_iter1 = ((ciphertextStrm_empty_n == 1'b0) & (e_4_reg_244 == 1'd0));
end

always @ (*) begin
    ap_block_state36_pp1_stage0_iter1_ignore_call3 = ((ciphertextStrm_empty_n == 1'b0) & (e_4_reg_244 == 1'd0));
end

assign ap_block_state37_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage0_iter2_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage0_iter3_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage0_iter4_ignore_call3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((endCiphertextStrm_empty_n == 1'b0) & (ap_phi_mux_e_1_phi_fu_226_p4 == 1'd0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0_ignore_call3 = ((endCiphertextStrm_empty_n == 1'b0) & (ap_phi_mux_e_1_phi_fu_226_p4 == 1'd0));
end

assign ap_block_state40_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage0_iter5_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage0_iter6_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp1_stage0_iter7_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp1_stage0_iter8_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp1_stage0_iter9_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp1_stage0_iter10_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp1_stage0_iter11_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp1_stage0_iter12_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp1_stage0_iter13_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp1_stage0_iter14_ignore_call3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((e_1_reg_223 == 1'd0) & (ciphertextStrm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1_ignore_call3 = ((e_1_reg_223 == 1'd0) & (ciphertextStrm_empty_n == 1'b0));
end

assign ap_block_state50_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp1_stage0_iter15_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp1_stage0_iter16_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp1_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp1_stage0_iter17_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp1_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp1_stage0_iter18_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp1_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp1_stage0_iter19_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp1_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp1_stage0_iter20_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp1_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp1_stage0_iter21_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp1_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp1_stage0_iter22_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp1_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp1_stage0_iter23_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp1_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp1_stage0_iter24_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp1_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp1_stage0_iter25_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp1_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp1_stage0_iter26_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp1_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp1_stage0_iter27_ignore_call3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state63_pp1_stage0_iter28 = (((endPlaintextStrm_full_n == 1'b0) & (e_4_reg_244_pp1_iter27_reg == 1'd0)) | ((plaintextStrm_full_n == 1'b0) & (e_4_reg_244_pp1_iter27_reg == 1'd0)));
end

always @ (*) begin
    ap_block_state63_pp1_stage0_iter28_ignore_call3 = (((endPlaintextStrm_full_n == 1'b0) & (e_4_reg_244_pp1_iter27_reg == 1'd0)) | ((plaintextStrm_full_n == 1'b0) & (e_4_reg_244_pp1_iter27_reg == 1'd0)));
end

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_process_r_fu_264_ap_start = grp_process_r_fu_264_ap_start_reg;

assign grp_updateKey_fu_289_ap_start = grp_updateKey_fu_289_ap_start_reg;

assign i_V_cast_fu_504_p1 = i_V_reg_233;

assign icmp_ln878_fu_508_p2 = (($signed(i_V_cast_fu_504_p1) < $signed(sub_i_i_i_i_reg_764)) ? 1'b1 : 1'b0);

assign ret_2_fu_652_p2 = (grp_process_r_fu_264_ap_return ^ feedback_r_V_6_reg_254);

assign ret_fu_482_p2 = (grp_process_r_fu_264_ap_return ^ feedback_r_V_reg_213);

assign start_out = real_start;

assign sub_i_i_i_i_fu_492_p2 = ($signed(ComputeWordCnt_cast_i_i_fu_489_p1) + $signed(33'd8589934591));

endmodule //hls_recv_krnl_myaes
