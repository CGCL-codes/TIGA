// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_recv_krnl_prepare_aes (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        ciphertextStrm_din,
        ciphertextStrm_full_n,
        ciphertextStrm_write,
        endCiphertextStrm_din,
        endCiphertextStrm_full_n,
        endCiphertextStrm_write,
        cipherkeyStrm_din,
        cipherkeyStrm_full_n,
        cipherkeyStrm_write,
        IVStrm_din,
        IVStrm_full_n,
        IVStrm_write,
        ComputeWordCnt_loc_dout,
        ComputeWordCnt_loc_empty_n,
        ComputeWordCnt_loc_read,
        ComputeWordCnt_loc_out_din,
        ComputeWordCnt_loc_out_full_n,
        ComputeWordCnt_loc_out_write,
        sha_out_dout,
        sha_out_empty_n,
        sha_out_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [127:0] ciphertextStrm_din;
input   ciphertextStrm_full_n;
output   ciphertextStrm_write;
output  [0:0] endCiphertextStrm_din;
input   endCiphertextStrm_full_n;
output   endCiphertextStrm_write;
output  [255:0] cipherkeyStrm_din;
input   cipherkeyStrm_full_n;
output   cipherkeyStrm_write;
output  [127:0] IVStrm_din;
input   IVStrm_full_n;
output   IVStrm_write;
input  [31:0] ComputeWordCnt_loc_dout;
input   ComputeWordCnt_loc_empty_n;
output   ComputeWordCnt_loc_read;
output  [31:0] ComputeWordCnt_loc_out_din;
input   ComputeWordCnt_loc_out_full_n;
output   ComputeWordCnt_loc_out_write;
input  [511:0] sha_out_dout;
input   sha_out_empty_n;
output   sha_out_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg ciphertextStrm_write;
reg[0:0] endCiphertextStrm_din;
reg endCiphertextStrm_write;
reg cipherkeyStrm_write;
reg IVStrm_write;
reg ComputeWordCnt_loc_read;
reg ComputeWordCnt_loc_out_write;
reg sha_out_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    ciphertextStrm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln878_reg_151;
reg    endCiphertextStrm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    cipherkeyStrm_blk_n;
reg    IVStrm_blk_n;
reg    ComputeWordCnt_loc_blk_n;
reg    ComputeWordCnt_loc_out_blk_n;
reg    sha_out_blk_n;
reg   [31:0] i_V_reg_114;
reg   [31:0] ComputeWordCnt_loc_read_reg_141;
wire   [31:0] i_V_1_fu_125_p2;
reg   [31:0] i_V_1_reg_146;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln878_fu_131_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_subdone;
reg   [31:0] ap_phi_mux_i_V_phi_fu_118_p4;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_179;
reg    ap_condition_186;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln878_reg_151 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_V_reg_114 <= i_V_1_reg_146;
    end else if ((~((1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_reg_114 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ComputeWordCnt_loc_read_reg_141 <= ComputeWordCnt_loc_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_V_1_reg_146 <= i_V_1_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln878_reg_151 <= icmp_ln878_fu_131_p2;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ComputeWordCnt_loc_blk_n = ComputeWordCnt_loc_empty_n;
    end else begin
        ComputeWordCnt_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ComputeWordCnt_loc_out_blk_n = ComputeWordCnt_loc_out_full_n;
    end else begin
        ComputeWordCnt_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ComputeWordCnt_loc_out_write = 1'b1;
    end else begin
        ComputeWordCnt_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ComputeWordCnt_loc_read = 1'b1;
    end else begin
        ComputeWordCnt_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_151 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        IVStrm_blk_n = IVStrm_full_n;
    end else begin
        IVStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_151 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        IVStrm_write = 1'b1;
    end else begin
        IVStrm_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln878_fu_131_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln878_reg_151 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_V_phi_fu_118_p4 = i_V_1_reg_146;
    end else begin
        ap_phi_mux_i_V_phi_fu_118_p4 = i_V_reg_114;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_151 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cipherkeyStrm_blk_n = cipherkeyStrm_full_n;
    end else begin
        cipherkeyStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_151 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cipherkeyStrm_write = 1'b1;
    end else begin
        cipherkeyStrm_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_151 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ciphertextStrm_blk_n = ciphertextStrm_full_n;
    end else begin
        ciphertextStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_151 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ciphertextStrm_write = 1'b1;
    end else begin
        ciphertextStrm_write = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln878_reg_151 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln878_reg_151 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        endCiphertextStrm_blk_n = endCiphertextStrm_full_n;
    end else begin
        endCiphertextStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln878_reg_151 == 1'd0)) begin
        if ((1'b1 == ap_condition_186)) begin
            endCiphertextStrm_din = 1'd1;
        end else if ((1'b1 == ap_condition_179)) begin
            endCiphertextStrm_din = 1'd0;
        end else begin
            endCiphertextStrm_din = 'bx;
        end
    end else begin
        endCiphertextStrm_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln878_reg_151 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln878_reg_151 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        endCiphertextStrm_write = 1'b1;
    end else begin
        endCiphertextStrm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_151 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha_out_blk_n = sha_out_empty_n;
    end else begin
        sha_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_151 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha_out_read = 1'b1;
    end else begin
        sha_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_fu_131_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_fu_131_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ComputeWordCnt_loc_out_din = ComputeWordCnt_loc_dout;

assign IVStrm_din = 128'd305419896;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln878_reg_151 == 1'd0) & (endCiphertextStrm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln878_reg_151 == 1'd0) & (endCiphertextStrm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln878_reg_151 == 1'd0) & (endCiphertextStrm_full_n == 1'b0));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln878_reg_151 == 1'd0) & (ciphertextStrm_full_n == 1'b0)) | ((icmp_ln878_reg_151 == 1'd0) & (1'b0 == IVStrm_full_n)) | ((icmp_ln878_reg_151 == 1'd0) & (cipherkeyStrm_full_n == 1'b0)) | ((icmp_ln878_reg_151 == 1'd0) & (sha_out_empty_n == 1'b0)) | ((icmp_ln878_reg_151 == 1'd0) & (endCiphertextStrm_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln878_reg_151 == 1'd0) & (ciphertextStrm_full_n == 1'b0)) | ((icmp_ln878_reg_151 == 1'd0) & (1'b0 == IVStrm_full_n)) | ((icmp_ln878_reg_151 == 1'd0) & (cipherkeyStrm_full_n == 1'b0)) | ((icmp_ln878_reg_151 == 1'd0) & (sha_out_empty_n == 1'b0)) | ((icmp_ln878_reg_151 == 1'd0) & (endCiphertextStrm_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln878_reg_151 == 1'd0) & (ciphertextStrm_full_n == 1'b0)) | ((icmp_ln878_reg_151 == 1'd0) & (1'b0 == IVStrm_full_n)) | ((icmp_ln878_reg_151 == 1'd0) & (cipherkeyStrm_full_n == 1'b0)) | ((icmp_ln878_reg_151 == 1'd0) & (sha_out_empty_n == 1'b0)) | ((icmp_ln878_reg_151 == 1'd0) & (endCiphertextStrm_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ComputeWordCnt_loc_out_full_n) | (1'b0 == ComputeWordCnt_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = (((icmp_ln878_reg_151 == 1'd0) & (ciphertextStrm_full_n == 1'b0)) | ((icmp_ln878_reg_151 == 1'd0) & (1'b0 == IVStrm_full_n)) | ((icmp_ln878_reg_151 == 1'd0) & (cipherkeyStrm_full_n == 1'b0)) | ((icmp_ln878_reg_151 == 1'd0) & (sha_out_empty_n == 1'b0)) | ((icmp_ln878_reg_151 == 1'd0) & (endCiphertextStrm_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln878_reg_151 == 1'd0) & (endCiphertextStrm_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_179 = ((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_186 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cipherkeyStrm_din = 256'd81985529216486895;

assign ciphertextStrm_din = sha_out_dout[127:0];

assign i_V_1_fu_125_p2 = (ap_phi_mux_i_V_phi_fu_118_p4 + 32'd1);

assign icmp_ln878_fu_131_p2 = ((ap_phi_mux_i_V_phi_fu_118_p4 == ComputeWordCnt_loc_read_reg_141) ? 1'b1 : 1'b0);

assign start_out = real_start;

endmodule //hls_recv_krnl_prepare_aes
