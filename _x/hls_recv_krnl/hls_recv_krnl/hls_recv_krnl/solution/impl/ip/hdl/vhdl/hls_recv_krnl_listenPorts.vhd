-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_recv_krnl_listenPorts is
port (
    basePort_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    basePort_empty_n : IN STD_LOGIC;
    basePort_read : OUT STD_LOGIC;
    useConn_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    useConn_empty_n : IN STD_LOGIC;
    useConn_read : OUT STD_LOGIC;
    m_axis_tcp_listen_port_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axis_tcp_listen_port_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axis_tcp_listen_port_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axis_tcp_listen_port_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tcp_port_status_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_tcp_port_status_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tcp_port_status_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tcp_port_status_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    m_axis_tcp_listen_port_TVALID : OUT STD_LOGIC;
    m_axis_tcp_listen_port_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    s_axis_tcp_port_status_TVALID : IN STD_LOGIC;
    s_axis_tcp_port_status_TREADY : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of hls_recv_krnl_listenPorts is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal listenPorts_entry37_U0_ap_start : STD_LOGIC;
    signal listenPorts_entry37_U0_ap_done : STD_LOGIC;
    signal listenPorts_entry37_U0_ap_continue : STD_LOGIC;
    signal listenPorts_entry37_U0_ap_idle : STD_LOGIC;
    signal listenPorts_entry37_U0_ap_ready : STD_LOGIC;
    signal listenPorts_entry37_U0_basePort_read : STD_LOGIC;
    signal listenPorts_entry37_U0_useConn_read : STD_LOGIC;
    signal listenPorts_entry37_U0_basePort_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal listenPorts_entry37_U0_basePort_out_write : STD_LOGIC;
    signal listenPorts_entry37_U0_useConn_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal listenPorts_entry37_U0_useConn_out_write : STD_LOGIC;
    signal listenPorts_entry37_U0_useConn_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal listenPorts_entry37_U0_useConn_out1_write : STD_LOGIC;
    signal listenPorts_Block_split2_proc_U0_ap_start : STD_LOGIC;
    signal listenPorts_Block_split2_proc_U0_ap_done : STD_LOGIC;
    signal listenPorts_Block_split2_proc_U0_ap_continue : STD_LOGIC;
    signal listenPorts_Block_split2_proc_U0_ap_idle : STD_LOGIC;
    signal listenPorts_Block_split2_proc_U0_ap_ready : STD_LOGIC;
    signal listenPorts_Block_split2_proc_U0_basePort_read : STD_LOGIC;
    signal listenPorts_Block_split2_proc_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sync_reg_listenPorts_Block_split2_proc_U0_ap_start : STD_LOGIC := '0';
    signal ap_channel_done_basePort_cast_loc_i_channel : STD_LOGIC;
    signal basePort_cast_loc_i_channel_full_n : STD_LOGIC;
    signal listen_port_handler_U0_ap_start : STD_LOGIC;
    signal listen_port_handler_U0_ap_done : STD_LOGIC;
    signal listen_port_handler_U0_ap_continue : STD_LOGIC;
    signal listen_port_handler_U0_ap_idle : STD_LOGIC;
    signal listen_port_handler_U0_ap_ready : STD_LOGIC;
    signal listen_port_handler_U0_useConn_read : STD_LOGIC;
    signal listen_port_handler_U0_m_axis_tcp_listen_port_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal listen_port_handler_U0_m_axis_tcp_listen_port_TVALID : STD_LOGIC;
    signal listen_port_handler_U0_m_axis_tcp_listen_port_TKEEP : STD_LOGIC_VECTOR (1 downto 0);
    signal listen_port_handler_U0_m_axis_tcp_listen_port_TSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal listen_port_handler_U0_m_axis_tcp_listen_port_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal port_status_handler_U0_ap_start : STD_LOGIC;
    signal port_status_handler_U0_ap_done : STD_LOGIC;
    signal port_status_handler_U0_ap_continue : STD_LOGIC;
    signal port_status_handler_U0_ap_idle : STD_LOGIC;
    signal port_status_handler_U0_ap_ready : STD_LOGIC;
    signal port_status_handler_U0_useConn_read : STD_LOGIC;
    signal port_status_handler_U0_s_axis_tcp_port_status_TREADY : STD_LOGIC;
    signal ap_sync_reg_port_status_handler_U0_ap_start : STD_LOGIC := '0';
    signal basePort_c_i_full_n : STD_LOGIC;
    signal basePort_c_i_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal basePort_c_i_empty_n : STD_LOGIC;
    signal useConn_c_i_full_n : STD_LOGIC;
    signal useConn_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal useConn_c_i_empty_n : STD_LOGIC;
    signal useConn_c8_i_full_n : STD_LOGIC;
    signal useConn_c8_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal useConn_c8_i_empty_n : STD_LOGIC;
    signal basePort_cast_loc_i_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal basePort_cast_loc_i_channel_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hls_recv_krnl_listenPorts_entry37 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        basePort_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        basePort_empty_n : IN STD_LOGIC;
        basePort_read : OUT STD_LOGIC;
        useConn_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        useConn_empty_n : IN STD_LOGIC;
        useConn_read : OUT STD_LOGIC;
        basePort_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        basePort_out_full_n : IN STD_LOGIC;
        basePort_out_write : OUT STD_LOGIC;
        useConn_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        useConn_out_full_n : IN STD_LOGIC;
        useConn_out_write : OUT STD_LOGIC;
        useConn_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        useConn_out1_full_n : IN STD_LOGIC;
        useConn_out1_write : OUT STD_LOGIC );
    end component;


    component hls_recv_krnl_listenPorts_Block_split2_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        basePort_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        basePort_empty_n : IN STD_LOGIC;
        basePort_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component hls_recv_krnl_listen_port_handler IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        basePort : IN STD_LOGIC_VECTOR (15 downto 0);
        useConn_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        useConn_empty_n : IN STD_LOGIC;
        useConn_read : OUT STD_LOGIC;
        m_axis_tcp_listen_port_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axis_tcp_listen_port_TVALID : OUT STD_LOGIC;
        m_axis_tcp_listen_port_TREADY : IN STD_LOGIC;
        m_axis_tcp_listen_port_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axis_tcp_listen_port_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axis_tcp_listen_port_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hls_recv_krnl_port_status_handler IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        useConn_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        useConn_empty_n : IN STD_LOGIC;
        useConn_read : OUT STD_LOGIC;
        s_axis_tcp_port_status_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        s_axis_tcp_port_status_TVALID : IN STD_LOGIC;
        s_axis_tcp_port_status_TREADY : OUT STD_LOGIC;
        s_axis_tcp_port_status_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_tcp_port_status_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_tcp_port_status_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hls_recv_krnl_fifo_w16_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    listenPorts_entry37_U0 : component hls_recv_krnl_listenPorts_entry37
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => listenPorts_entry37_U0_ap_start,
        ap_done => listenPorts_entry37_U0_ap_done,
        ap_continue => listenPorts_entry37_U0_ap_continue,
        ap_idle => listenPorts_entry37_U0_ap_idle,
        ap_ready => listenPorts_entry37_U0_ap_ready,
        basePort_dout => basePort_dout,
        basePort_empty_n => basePort_empty_n,
        basePort_read => listenPorts_entry37_U0_basePort_read,
        useConn_dout => useConn_dout,
        useConn_empty_n => useConn_empty_n,
        useConn_read => listenPorts_entry37_U0_useConn_read,
        basePort_out_din => listenPorts_entry37_U0_basePort_out_din,
        basePort_out_full_n => basePort_c_i_full_n,
        basePort_out_write => listenPorts_entry37_U0_basePort_out_write,
        useConn_out_din => listenPorts_entry37_U0_useConn_out_din,
        useConn_out_full_n => useConn_c_i_full_n,
        useConn_out_write => listenPorts_entry37_U0_useConn_out_write,
        useConn_out1_din => listenPorts_entry37_U0_useConn_out1_din,
        useConn_out1_full_n => useConn_c8_i_full_n,
        useConn_out1_write => listenPorts_entry37_U0_useConn_out1_write);

    listenPorts_Block_split2_proc_U0 : component hls_recv_krnl_listenPorts_Block_split2_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => listenPorts_Block_split2_proc_U0_ap_start,
        ap_done => listenPorts_Block_split2_proc_U0_ap_done,
        ap_continue => listenPorts_Block_split2_proc_U0_ap_continue,
        ap_idle => listenPorts_Block_split2_proc_U0_ap_idle,
        ap_ready => listenPorts_Block_split2_proc_U0_ap_ready,
        basePort_dout => basePort_c_i_dout,
        basePort_empty_n => basePort_c_i_empty_n,
        basePort_read => listenPorts_Block_split2_proc_U0_basePort_read,
        ap_return => listenPorts_Block_split2_proc_U0_ap_return);

    listen_port_handler_U0 : component hls_recv_krnl_listen_port_handler
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => listen_port_handler_U0_ap_start,
        ap_done => listen_port_handler_U0_ap_done,
        ap_continue => listen_port_handler_U0_ap_continue,
        ap_idle => listen_port_handler_U0_ap_idle,
        ap_ready => listen_port_handler_U0_ap_ready,
        basePort => basePort_cast_loc_i_channel_dout,
        useConn_dout => useConn_c_i_dout,
        useConn_empty_n => useConn_c_i_empty_n,
        useConn_read => listen_port_handler_U0_useConn_read,
        m_axis_tcp_listen_port_TDATA => listen_port_handler_U0_m_axis_tcp_listen_port_TDATA,
        m_axis_tcp_listen_port_TVALID => listen_port_handler_U0_m_axis_tcp_listen_port_TVALID,
        m_axis_tcp_listen_port_TREADY => m_axis_tcp_listen_port_TREADY,
        m_axis_tcp_listen_port_TKEEP => listen_port_handler_U0_m_axis_tcp_listen_port_TKEEP,
        m_axis_tcp_listen_port_TSTRB => listen_port_handler_U0_m_axis_tcp_listen_port_TSTRB,
        m_axis_tcp_listen_port_TLAST => listen_port_handler_U0_m_axis_tcp_listen_port_TLAST);

    port_status_handler_U0 : component hls_recv_krnl_port_status_handler
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => port_status_handler_U0_ap_start,
        ap_done => port_status_handler_U0_ap_done,
        ap_continue => port_status_handler_U0_ap_continue,
        ap_idle => port_status_handler_U0_ap_idle,
        ap_ready => port_status_handler_U0_ap_ready,
        useConn_dout => useConn_c8_i_dout,
        useConn_empty_n => useConn_c8_i_empty_n,
        useConn_read => port_status_handler_U0_useConn_read,
        s_axis_tcp_port_status_TDATA => s_axis_tcp_port_status_TDATA,
        s_axis_tcp_port_status_TVALID => s_axis_tcp_port_status_TVALID,
        s_axis_tcp_port_status_TREADY => port_status_handler_U0_s_axis_tcp_port_status_TREADY,
        s_axis_tcp_port_status_TKEEP => s_axis_tcp_port_status_TKEEP,
        s_axis_tcp_port_status_TSTRB => s_axis_tcp_port_status_TSTRB,
        s_axis_tcp_port_status_TLAST => s_axis_tcp_port_status_TLAST);

    basePort_c_i_U : component hls_recv_krnl_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => listenPorts_entry37_U0_basePort_out_din,
        if_full_n => basePort_c_i_full_n,
        if_write => listenPorts_entry37_U0_basePort_out_write,
        if_dout => basePort_c_i_dout,
        if_empty_n => basePort_c_i_empty_n,
        if_read => listenPorts_Block_split2_proc_U0_basePort_read);

    useConn_c_i_U : component hls_recv_krnl_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => listenPorts_entry37_U0_useConn_out_din,
        if_full_n => useConn_c_i_full_n,
        if_write => listenPorts_entry37_U0_useConn_out_write,
        if_dout => useConn_c_i_dout,
        if_empty_n => useConn_c_i_empty_n,
        if_read => listen_port_handler_U0_useConn_read);

    useConn_c8_i_U : component hls_recv_krnl_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => listenPorts_entry37_U0_useConn_out1_din,
        if_full_n => useConn_c8_i_full_n,
        if_write => listenPorts_entry37_U0_useConn_out1_write,
        if_dout => useConn_c8_i_dout,
        if_empty_n => useConn_c8_i_empty_n,
        if_read => port_status_handler_U0_useConn_read);

    basePort_cast_loc_i_channel_U : component hls_recv_krnl_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => listenPorts_Block_split2_proc_U0_ap_return,
        if_full_n => basePort_cast_loc_i_channel_full_n,
        if_write => listenPorts_Block_split2_proc_U0_ap_done,
        if_dout => basePort_cast_loc_i_channel_dout,
        if_empty_n => basePort_cast_loc_i_channel_empty_n,
        if_read => listen_port_handler_U0_ap_ready);





    ap_sync_reg_listenPorts_Block_split2_proc_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_listenPorts_Block_split2_proc_U0_ap_start <= ap_const_logic_0;
            else
                if ((ap_start = ap_const_logic_1)) then 
                    ap_sync_reg_listenPorts_Block_split2_proc_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_port_status_handler_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_port_status_handler_U0_ap_start <= ap_const_logic_0;
            else
                if ((ap_start = ap_const_logic_1)) then 
                    ap_sync_reg_port_status_handler_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_basePort_cast_loc_i_channel <= listenPorts_Block_split2_proc_U0_ap_done;
    ap_done <= ap_sync_done;
    ap_idle <= (port_status_handler_U0_ap_idle and listen_port_handler_U0_ap_idle and listenPorts_entry37_U0_ap_idle and listenPorts_Block_split2_proc_U0_ap_idle and (basePort_cast_loc_i_channel_empty_n xor ap_const_logic_1));
    ap_ready <= listenPorts_entry37_U0_ap_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (port_status_handler_U0_ap_done and listen_port_handler_U0_ap_done);
    ap_sync_ready <= listenPorts_entry37_U0_ap_ready;
    basePort_read <= listenPorts_entry37_U0_basePort_read;
    listenPorts_Block_split2_proc_U0_ap_continue <= basePort_cast_loc_i_channel_full_n;
    listenPorts_Block_split2_proc_U0_ap_start <= (ap_sync_reg_listenPorts_Block_split2_proc_U0_ap_start or ap_start);
    listenPorts_entry37_U0_ap_continue <= ap_const_logic_1;
    listenPorts_entry37_U0_ap_start <= ap_start;
    listen_port_handler_U0_ap_continue <= ap_sync_continue;
    listen_port_handler_U0_ap_start <= basePort_cast_loc_i_channel_empty_n;
    m_axis_tcp_listen_port_TDATA <= listen_port_handler_U0_m_axis_tcp_listen_port_TDATA;
    m_axis_tcp_listen_port_TKEEP <= listen_port_handler_U0_m_axis_tcp_listen_port_TKEEP;
    m_axis_tcp_listen_port_TLAST <= listen_port_handler_U0_m_axis_tcp_listen_port_TLAST;
    m_axis_tcp_listen_port_TSTRB <= listen_port_handler_U0_m_axis_tcp_listen_port_TSTRB;
    m_axis_tcp_listen_port_TVALID <= listen_port_handler_U0_m_axis_tcp_listen_port_TVALID;
    port_status_handler_U0_ap_continue <= ap_sync_continue;
    port_status_handler_U0_ap_start <= (ap_sync_reg_port_status_handler_U0_ap_start or ap_start);
    s_axis_tcp_port_status_TREADY <= port_status_handler_U0_s_axis_tcp_port_status_TREADY;
    useConn_read <= listenPorts_entry37_U0_useConn_read;
end behav;
