// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_recv_krnl_backgroundclock (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        timesha_dout,
        timesha_empty_n,
        timesha_read,
        timeaes_dout,
        timeaes_empty_n,
        timeaes_read,
        out_time_dout,
        out_time_empty_n,
        out_time_read
);

parameter    ap_ST_fsm_state1 = 73'd1;
parameter    ap_ST_fsm_pp0_stage0 = 73'd2;
parameter    ap_ST_fsm_state74 = 73'd4;
parameter    ap_ST_fsm_state75 = 73'd8;
parameter    ap_ST_fsm_state76 = 73'd16;
parameter    ap_ST_fsm_state77 = 73'd32;
parameter    ap_ST_fsm_state78 = 73'd64;
parameter    ap_ST_fsm_state79 = 73'd128;
parameter    ap_ST_fsm_state80 = 73'd256;
parameter    ap_ST_fsm_state81 = 73'd512;
parameter    ap_ST_fsm_state82 = 73'd1024;
parameter    ap_ST_fsm_state83 = 73'd2048;
parameter    ap_ST_fsm_state84 = 73'd4096;
parameter    ap_ST_fsm_state85 = 73'd8192;
parameter    ap_ST_fsm_state86 = 73'd16384;
parameter    ap_ST_fsm_state87 = 73'd32768;
parameter    ap_ST_fsm_state88 = 73'd65536;
parameter    ap_ST_fsm_state89 = 73'd131072;
parameter    ap_ST_fsm_state90 = 73'd262144;
parameter    ap_ST_fsm_state91 = 73'd524288;
parameter    ap_ST_fsm_state92 = 73'd1048576;
parameter    ap_ST_fsm_state93 = 73'd2097152;
parameter    ap_ST_fsm_state94 = 73'd4194304;
parameter    ap_ST_fsm_state95 = 73'd8388608;
parameter    ap_ST_fsm_state96 = 73'd16777216;
parameter    ap_ST_fsm_state97 = 73'd33554432;
parameter    ap_ST_fsm_state98 = 73'd67108864;
parameter    ap_ST_fsm_state99 = 73'd134217728;
parameter    ap_ST_fsm_state100 = 73'd268435456;
parameter    ap_ST_fsm_state101 = 73'd536870912;
parameter    ap_ST_fsm_state102 = 73'd1073741824;
parameter    ap_ST_fsm_state103 = 73'd2147483648;
parameter    ap_ST_fsm_state104 = 73'd4294967296;
parameter    ap_ST_fsm_state105 = 73'd8589934592;
parameter    ap_ST_fsm_state106 = 73'd17179869184;
parameter    ap_ST_fsm_state107 = 73'd34359738368;
parameter    ap_ST_fsm_state108 = 73'd68719476736;
parameter    ap_ST_fsm_state109 = 73'd137438953472;
parameter    ap_ST_fsm_state110 = 73'd274877906944;
parameter    ap_ST_fsm_state111 = 73'd549755813888;
parameter    ap_ST_fsm_state112 = 73'd1099511627776;
parameter    ap_ST_fsm_state113 = 73'd2199023255552;
parameter    ap_ST_fsm_state114 = 73'd4398046511104;
parameter    ap_ST_fsm_state115 = 73'd8796093022208;
parameter    ap_ST_fsm_state116 = 73'd17592186044416;
parameter    ap_ST_fsm_state117 = 73'd35184372088832;
parameter    ap_ST_fsm_state118 = 73'd70368744177664;
parameter    ap_ST_fsm_state119 = 73'd140737488355328;
parameter    ap_ST_fsm_state120 = 73'd281474976710656;
parameter    ap_ST_fsm_state121 = 73'd562949953421312;
parameter    ap_ST_fsm_state122 = 73'd1125899906842624;
parameter    ap_ST_fsm_state123 = 73'd2251799813685248;
parameter    ap_ST_fsm_state124 = 73'd4503599627370496;
parameter    ap_ST_fsm_state125 = 73'd9007199254740992;
parameter    ap_ST_fsm_state126 = 73'd18014398509481984;
parameter    ap_ST_fsm_state127 = 73'd36028797018963968;
parameter    ap_ST_fsm_state128 = 73'd72057594037927936;
parameter    ap_ST_fsm_state129 = 73'd144115188075855872;
parameter    ap_ST_fsm_state130 = 73'd288230376151711744;
parameter    ap_ST_fsm_state131 = 73'd576460752303423488;
parameter    ap_ST_fsm_state132 = 73'd1152921504606846976;
parameter    ap_ST_fsm_state133 = 73'd2305843009213693952;
parameter    ap_ST_fsm_state134 = 73'd4611686018427387904;
parameter    ap_ST_fsm_state135 = 73'd9223372036854775808;
parameter    ap_ST_fsm_state136 = 73'd18446744073709551616;
parameter    ap_ST_fsm_state137 = 73'd36893488147419103232;
parameter    ap_ST_fsm_state138 = 73'd73786976294838206464;
parameter    ap_ST_fsm_state139 = 73'd147573952589676412928;
parameter    ap_ST_fsm_state140 = 73'd295147905179352825856;
parameter    ap_ST_fsm_state141 = 73'd590295810358705651712;
parameter    ap_ST_fsm_state142 = 73'd1180591620717411303424;
parameter    ap_ST_fsm_state143 = 73'd2361183241434822606848;
parameter    ap_ST_fsm_state144 = 73'd4722366482869645213696;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [63:0] m_axi_gmem_WDATA;
output  [7:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [63:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [31:0] timesha_dout;
input   timesha_empty_n;
output   timesha_read;
input  [31:0] timeaes_dout;
input   timeaes_empty_n;
output   timeaes_read;
input  [63:0] out_time_dout;
input   out_time_empty_n;
output   out_time_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg[63:0] m_axi_gmem_AWADDR;
reg m_axi_gmem_WVALID;
reg[63:0] m_axi_gmem_WDATA;
reg m_axi_gmem_BREADY;
reg timesha_read;
reg timeaes_read;
reg out_time_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [72:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AW;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_i_reg_354;
reg   [0:0] tmp_i_reg_354_pp0_iter1_reg;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_i_reg_354_pp0_iter2_reg;
reg    gmem_blk_n_B;
reg    ap_enable_reg_pp0_iter71;
reg   [0:0] tmp_i_reg_354_pp0_iter70_reg;
reg   [0:0] tmp_i_106_reg_358;
reg   [0:0] tmp_i_106_reg_358_pp0_iter1_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter2_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter70_reg;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state144;
reg    timesha_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln878_fu_216_p2;
wire   [0:0] tmp_i_nbreadreq_fu_92_p3;
reg    timeaes_blk_n;
wire   [0:0] tmp_i_106_nbreadreq_fu_100_p3;
reg    out_time_blk_n;
reg   [63:0] time_V_reg_168;
reg   [63:0] out_time_read_reg_336;
wire   [63:0] time_V_1_fu_196_p2;
reg   [63:0] time_V_1_reg_343;
reg    ap_predicate_op168_read_state2;
reg    ap_predicate_op171_read_state2;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_predicate_op187_writereq_state4;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_predicate_op191_write_state5;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
wire    ap_block_state29_pp0_stage0_iter27;
wire    ap_block_state30_pp0_stage0_iter28;
wire    ap_block_state31_pp0_stage0_iter29;
wire    ap_block_state32_pp0_stage0_iter30;
wire    ap_block_state33_pp0_stage0_iter31;
wire    ap_block_state34_pp0_stage0_iter32;
wire    ap_block_state35_pp0_stage0_iter33;
wire    ap_block_state36_pp0_stage0_iter34;
wire    ap_block_state37_pp0_stage0_iter35;
wire    ap_block_state38_pp0_stage0_iter36;
wire    ap_block_state39_pp0_stage0_iter37;
wire    ap_block_state40_pp0_stage0_iter38;
wire    ap_block_state41_pp0_stage0_iter39;
wire    ap_block_state42_pp0_stage0_iter40;
wire    ap_block_state43_pp0_stage0_iter41;
wire    ap_block_state44_pp0_stage0_iter42;
wire    ap_block_state45_pp0_stage0_iter43;
wire    ap_block_state46_pp0_stage0_iter44;
wire    ap_block_state47_pp0_stage0_iter45;
wire    ap_block_state48_pp0_stage0_iter46;
wire    ap_block_state49_pp0_stage0_iter47;
wire    ap_block_state50_pp0_stage0_iter48;
wire    ap_block_state51_pp0_stage0_iter49;
wire    ap_block_state52_pp0_stage0_iter50;
wire    ap_block_state53_pp0_stage0_iter51;
wire    ap_block_state54_pp0_stage0_iter52;
wire    ap_block_state55_pp0_stage0_iter53;
wire    ap_block_state56_pp0_stage0_iter54;
wire    ap_block_state57_pp0_stage0_iter55;
wire    ap_block_state58_pp0_stage0_iter56;
wire    ap_block_state59_pp0_stage0_iter57;
wire    ap_block_state60_pp0_stage0_iter58;
wire    ap_block_state61_pp0_stage0_iter59;
wire    ap_block_state62_pp0_stage0_iter60;
wire    ap_block_state63_pp0_stage0_iter61;
wire    ap_block_state64_pp0_stage0_iter62;
wire    ap_block_state65_pp0_stage0_iter63;
wire    ap_block_state66_pp0_stage0_iter64;
wire    ap_block_state67_pp0_stage0_iter65;
wire    ap_block_state68_pp0_stage0_iter66;
wire    ap_block_state69_pp0_stage0_iter67;
wire    ap_block_state70_pp0_stage0_iter68;
wire    ap_block_state71_pp0_stage0_iter69;
wire    ap_block_state72_pp0_stage0_iter70;
reg    ap_predicate_op327_writeresp_state73;
reg    ap_block_state73_pp0_stage0_iter71;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] time_V_1_reg_343_pp0_iter1_reg;
reg   [63:0] time_V_1_reg_343_pp0_iter2_reg;
reg   [0:0] icmp_ln878_reg_350;
reg   [0:0] tmp_i_reg_354_pp0_iter3_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter4_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter5_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter6_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter7_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter8_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter9_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter10_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter11_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter12_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter13_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter14_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter15_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter16_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter17_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter18_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter19_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter20_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter21_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter22_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter23_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter24_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter25_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter26_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter27_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter28_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter29_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter30_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter31_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter32_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter33_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter34_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter35_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter36_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter37_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter38_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter39_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter40_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter41_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter42_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter43_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter44_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter45_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter46_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter47_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter48_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter49_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter50_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter51_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter52_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter53_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter54_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter55_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter56_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter57_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter58_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter59_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter60_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter61_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter62_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter63_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter64_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter65_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter66_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter67_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter68_reg;
reg   [0:0] tmp_i_reg_354_pp0_iter69_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter3_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter4_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter5_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter6_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter7_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter8_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter9_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter10_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter11_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter12_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter13_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter14_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter15_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter16_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter17_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter18_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter19_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter20_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter21_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter22_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter23_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter24_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter25_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter26_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter27_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter28_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter29_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter30_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter31_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter32_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter33_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter34_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter35_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter36_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter37_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter38_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter39_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter40_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter41_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter42_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter43_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter44_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter45_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter46_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter47_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter48_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter49_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter50_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter51_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter52_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter53_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter54_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter55_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter56_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter57_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter58_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter59_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter60_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter61_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter62_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter63_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter64_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter65_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter66_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter67_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter68_reg;
reg   [0:0] tmp_i_106_reg_358_pp0_iter69_reg;
reg   [31:0] reg_V_1_reg_362;
reg   [31:0] reg_V_reg_367;
reg   [60:0] trunc_ln5_reg_372;
reg   [60:0] trunc_ln4_reg_377;
reg   [60:0] trunc_ln_reg_394;
wire    ap_CS_fsm_state74;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter65;
reg    ap_enable_reg_pp0_iter66;
reg    ap_enable_reg_pp0_iter67;
reg    ap_enable_reg_pp0_iter68;
reg    ap_enable_reg_pp0_iter69;
reg    ap_enable_reg_pp0_iter70;
reg   [63:0] ap_phi_mux_time_V_phi_fu_173_p4;
wire  signed [63:0] sext_ln54_fu_284_p1;
wire  signed [63:0] sext_ln48_fu_294_p1;
wire  signed [63:0] sext_ln61_fu_319_p1;
reg    ap_block_pp0_stage0_01001;
reg   [63:0] timecnt_V_fu_82;
wire   [63:0] grp_fu_181_p2;
wire   [61:0] tmp_fu_206_p4;
wire   [32:0] zext_ln1346_fu_222_p1;
wire   [32:0] ret_fu_225_p2;
wire   [35:0] shl_ln1_fu_231_p3;
wire   [63:0] zext_ln54_fu_239_p1;
wire   [63:0] add_ln54_fu_243_p2;
wire   [34:0] shl_ln_fu_258_p3;
wire   [63:0] zext_ln48_fu_265_p1;
wire   [63:0] add_ln48_fu_269_p2;
wire   [63:0] add_ln61_fu_304_p2;
reg   [72:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 73'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter71 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter69 = 1'b0;
#0 ap_enable_reg_pp0_iter70 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state144) & (m_axi_gmem_BVALID == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_time_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter69 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter70 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter71 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_time_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter71 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln878_reg_350 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        time_V_reg_168 <= time_V_1_reg_343;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_time_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        time_V_reg_168 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_time_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        timecnt_V_fu_82 <= 64'd0;
    end else if ((((tmp_i_106_nbreadreq_fu_100_p3 == 1'd1) & (tmp_i_nbreadreq_fu_92_p3 == 1'd0) & (icmp_ln878_fu_216_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_nbreadreq_fu_92_p3 == 1'd1) & (icmp_ln878_fu_216_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        timecnt_V_fu_82 <= grp_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln878_reg_350 <= icmp_ln878_fu_216_p2;
        time_V_1_reg_343_pp0_iter1_reg <= time_V_1_reg_343;
        tmp_i_106_reg_358_pp0_iter1_reg <= tmp_i_106_reg_358;
        tmp_i_reg_354_pp0_iter1_reg <= tmp_i_reg_354;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        out_time_read_reg_336 <= out_time_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op168_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        reg_V_1_reg_362 <= timeaes_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op171_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        reg_V_reg_367 <= timesha_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        time_V_1_reg_343 <= time_V_1_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        time_V_1_reg_343_pp0_iter2_reg <= time_V_1_reg_343_pp0_iter1_reg;
        tmp_i_106_reg_358_pp0_iter10_reg <= tmp_i_106_reg_358_pp0_iter9_reg;
        tmp_i_106_reg_358_pp0_iter11_reg <= tmp_i_106_reg_358_pp0_iter10_reg;
        tmp_i_106_reg_358_pp0_iter12_reg <= tmp_i_106_reg_358_pp0_iter11_reg;
        tmp_i_106_reg_358_pp0_iter13_reg <= tmp_i_106_reg_358_pp0_iter12_reg;
        tmp_i_106_reg_358_pp0_iter14_reg <= tmp_i_106_reg_358_pp0_iter13_reg;
        tmp_i_106_reg_358_pp0_iter15_reg <= tmp_i_106_reg_358_pp0_iter14_reg;
        tmp_i_106_reg_358_pp0_iter16_reg <= tmp_i_106_reg_358_pp0_iter15_reg;
        tmp_i_106_reg_358_pp0_iter17_reg <= tmp_i_106_reg_358_pp0_iter16_reg;
        tmp_i_106_reg_358_pp0_iter18_reg <= tmp_i_106_reg_358_pp0_iter17_reg;
        tmp_i_106_reg_358_pp0_iter19_reg <= tmp_i_106_reg_358_pp0_iter18_reg;
        tmp_i_106_reg_358_pp0_iter20_reg <= tmp_i_106_reg_358_pp0_iter19_reg;
        tmp_i_106_reg_358_pp0_iter21_reg <= tmp_i_106_reg_358_pp0_iter20_reg;
        tmp_i_106_reg_358_pp0_iter22_reg <= tmp_i_106_reg_358_pp0_iter21_reg;
        tmp_i_106_reg_358_pp0_iter23_reg <= tmp_i_106_reg_358_pp0_iter22_reg;
        tmp_i_106_reg_358_pp0_iter24_reg <= tmp_i_106_reg_358_pp0_iter23_reg;
        tmp_i_106_reg_358_pp0_iter25_reg <= tmp_i_106_reg_358_pp0_iter24_reg;
        tmp_i_106_reg_358_pp0_iter26_reg <= tmp_i_106_reg_358_pp0_iter25_reg;
        tmp_i_106_reg_358_pp0_iter27_reg <= tmp_i_106_reg_358_pp0_iter26_reg;
        tmp_i_106_reg_358_pp0_iter28_reg <= tmp_i_106_reg_358_pp0_iter27_reg;
        tmp_i_106_reg_358_pp0_iter29_reg <= tmp_i_106_reg_358_pp0_iter28_reg;
        tmp_i_106_reg_358_pp0_iter2_reg <= tmp_i_106_reg_358_pp0_iter1_reg;
        tmp_i_106_reg_358_pp0_iter30_reg <= tmp_i_106_reg_358_pp0_iter29_reg;
        tmp_i_106_reg_358_pp0_iter31_reg <= tmp_i_106_reg_358_pp0_iter30_reg;
        tmp_i_106_reg_358_pp0_iter32_reg <= tmp_i_106_reg_358_pp0_iter31_reg;
        tmp_i_106_reg_358_pp0_iter33_reg <= tmp_i_106_reg_358_pp0_iter32_reg;
        tmp_i_106_reg_358_pp0_iter34_reg <= tmp_i_106_reg_358_pp0_iter33_reg;
        tmp_i_106_reg_358_pp0_iter35_reg <= tmp_i_106_reg_358_pp0_iter34_reg;
        tmp_i_106_reg_358_pp0_iter36_reg <= tmp_i_106_reg_358_pp0_iter35_reg;
        tmp_i_106_reg_358_pp0_iter37_reg <= tmp_i_106_reg_358_pp0_iter36_reg;
        tmp_i_106_reg_358_pp0_iter38_reg <= tmp_i_106_reg_358_pp0_iter37_reg;
        tmp_i_106_reg_358_pp0_iter39_reg <= tmp_i_106_reg_358_pp0_iter38_reg;
        tmp_i_106_reg_358_pp0_iter3_reg <= tmp_i_106_reg_358_pp0_iter2_reg;
        tmp_i_106_reg_358_pp0_iter40_reg <= tmp_i_106_reg_358_pp0_iter39_reg;
        tmp_i_106_reg_358_pp0_iter41_reg <= tmp_i_106_reg_358_pp0_iter40_reg;
        tmp_i_106_reg_358_pp0_iter42_reg <= tmp_i_106_reg_358_pp0_iter41_reg;
        tmp_i_106_reg_358_pp0_iter43_reg <= tmp_i_106_reg_358_pp0_iter42_reg;
        tmp_i_106_reg_358_pp0_iter44_reg <= tmp_i_106_reg_358_pp0_iter43_reg;
        tmp_i_106_reg_358_pp0_iter45_reg <= tmp_i_106_reg_358_pp0_iter44_reg;
        tmp_i_106_reg_358_pp0_iter46_reg <= tmp_i_106_reg_358_pp0_iter45_reg;
        tmp_i_106_reg_358_pp0_iter47_reg <= tmp_i_106_reg_358_pp0_iter46_reg;
        tmp_i_106_reg_358_pp0_iter48_reg <= tmp_i_106_reg_358_pp0_iter47_reg;
        tmp_i_106_reg_358_pp0_iter49_reg <= tmp_i_106_reg_358_pp0_iter48_reg;
        tmp_i_106_reg_358_pp0_iter4_reg <= tmp_i_106_reg_358_pp0_iter3_reg;
        tmp_i_106_reg_358_pp0_iter50_reg <= tmp_i_106_reg_358_pp0_iter49_reg;
        tmp_i_106_reg_358_pp0_iter51_reg <= tmp_i_106_reg_358_pp0_iter50_reg;
        tmp_i_106_reg_358_pp0_iter52_reg <= tmp_i_106_reg_358_pp0_iter51_reg;
        tmp_i_106_reg_358_pp0_iter53_reg <= tmp_i_106_reg_358_pp0_iter52_reg;
        tmp_i_106_reg_358_pp0_iter54_reg <= tmp_i_106_reg_358_pp0_iter53_reg;
        tmp_i_106_reg_358_pp0_iter55_reg <= tmp_i_106_reg_358_pp0_iter54_reg;
        tmp_i_106_reg_358_pp0_iter56_reg <= tmp_i_106_reg_358_pp0_iter55_reg;
        tmp_i_106_reg_358_pp0_iter57_reg <= tmp_i_106_reg_358_pp0_iter56_reg;
        tmp_i_106_reg_358_pp0_iter58_reg <= tmp_i_106_reg_358_pp0_iter57_reg;
        tmp_i_106_reg_358_pp0_iter59_reg <= tmp_i_106_reg_358_pp0_iter58_reg;
        tmp_i_106_reg_358_pp0_iter5_reg <= tmp_i_106_reg_358_pp0_iter4_reg;
        tmp_i_106_reg_358_pp0_iter60_reg <= tmp_i_106_reg_358_pp0_iter59_reg;
        tmp_i_106_reg_358_pp0_iter61_reg <= tmp_i_106_reg_358_pp0_iter60_reg;
        tmp_i_106_reg_358_pp0_iter62_reg <= tmp_i_106_reg_358_pp0_iter61_reg;
        tmp_i_106_reg_358_pp0_iter63_reg <= tmp_i_106_reg_358_pp0_iter62_reg;
        tmp_i_106_reg_358_pp0_iter64_reg <= tmp_i_106_reg_358_pp0_iter63_reg;
        tmp_i_106_reg_358_pp0_iter65_reg <= tmp_i_106_reg_358_pp0_iter64_reg;
        tmp_i_106_reg_358_pp0_iter66_reg <= tmp_i_106_reg_358_pp0_iter65_reg;
        tmp_i_106_reg_358_pp0_iter67_reg <= tmp_i_106_reg_358_pp0_iter66_reg;
        tmp_i_106_reg_358_pp0_iter68_reg <= tmp_i_106_reg_358_pp0_iter67_reg;
        tmp_i_106_reg_358_pp0_iter69_reg <= tmp_i_106_reg_358_pp0_iter68_reg;
        tmp_i_106_reg_358_pp0_iter6_reg <= tmp_i_106_reg_358_pp0_iter5_reg;
        tmp_i_106_reg_358_pp0_iter70_reg <= tmp_i_106_reg_358_pp0_iter69_reg;
        tmp_i_106_reg_358_pp0_iter7_reg <= tmp_i_106_reg_358_pp0_iter6_reg;
        tmp_i_106_reg_358_pp0_iter8_reg <= tmp_i_106_reg_358_pp0_iter7_reg;
        tmp_i_106_reg_358_pp0_iter9_reg <= tmp_i_106_reg_358_pp0_iter8_reg;
        tmp_i_reg_354_pp0_iter10_reg <= tmp_i_reg_354_pp0_iter9_reg;
        tmp_i_reg_354_pp0_iter11_reg <= tmp_i_reg_354_pp0_iter10_reg;
        tmp_i_reg_354_pp0_iter12_reg <= tmp_i_reg_354_pp0_iter11_reg;
        tmp_i_reg_354_pp0_iter13_reg <= tmp_i_reg_354_pp0_iter12_reg;
        tmp_i_reg_354_pp0_iter14_reg <= tmp_i_reg_354_pp0_iter13_reg;
        tmp_i_reg_354_pp0_iter15_reg <= tmp_i_reg_354_pp0_iter14_reg;
        tmp_i_reg_354_pp0_iter16_reg <= tmp_i_reg_354_pp0_iter15_reg;
        tmp_i_reg_354_pp0_iter17_reg <= tmp_i_reg_354_pp0_iter16_reg;
        tmp_i_reg_354_pp0_iter18_reg <= tmp_i_reg_354_pp0_iter17_reg;
        tmp_i_reg_354_pp0_iter19_reg <= tmp_i_reg_354_pp0_iter18_reg;
        tmp_i_reg_354_pp0_iter20_reg <= tmp_i_reg_354_pp0_iter19_reg;
        tmp_i_reg_354_pp0_iter21_reg <= tmp_i_reg_354_pp0_iter20_reg;
        tmp_i_reg_354_pp0_iter22_reg <= tmp_i_reg_354_pp0_iter21_reg;
        tmp_i_reg_354_pp0_iter23_reg <= tmp_i_reg_354_pp0_iter22_reg;
        tmp_i_reg_354_pp0_iter24_reg <= tmp_i_reg_354_pp0_iter23_reg;
        tmp_i_reg_354_pp0_iter25_reg <= tmp_i_reg_354_pp0_iter24_reg;
        tmp_i_reg_354_pp0_iter26_reg <= tmp_i_reg_354_pp0_iter25_reg;
        tmp_i_reg_354_pp0_iter27_reg <= tmp_i_reg_354_pp0_iter26_reg;
        tmp_i_reg_354_pp0_iter28_reg <= tmp_i_reg_354_pp0_iter27_reg;
        tmp_i_reg_354_pp0_iter29_reg <= tmp_i_reg_354_pp0_iter28_reg;
        tmp_i_reg_354_pp0_iter2_reg <= tmp_i_reg_354_pp0_iter1_reg;
        tmp_i_reg_354_pp0_iter30_reg <= tmp_i_reg_354_pp0_iter29_reg;
        tmp_i_reg_354_pp0_iter31_reg <= tmp_i_reg_354_pp0_iter30_reg;
        tmp_i_reg_354_pp0_iter32_reg <= tmp_i_reg_354_pp0_iter31_reg;
        tmp_i_reg_354_pp0_iter33_reg <= tmp_i_reg_354_pp0_iter32_reg;
        tmp_i_reg_354_pp0_iter34_reg <= tmp_i_reg_354_pp0_iter33_reg;
        tmp_i_reg_354_pp0_iter35_reg <= tmp_i_reg_354_pp0_iter34_reg;
        tmp_i_reg_354_pp0_iter36_reg <= tmp_i_reg_354_pp0_iter35_reg;
        tmp_i_reg_354_pp0_iter37_reg <= tmp_i_reg_354_pp0_iter36_reg;
        tmp_i_reg_354_pp0_iter38_reg <= tmp_i_reg_354_pp0_iter37_reg;
        tmp_i_reg_354_pp0_iter39_reg <= tmp_i_reg_354_pp0_iter38_reg;
        tmp_i_reg_354_pp0_iter3_reg <= tmp_i_reg_354_pp0_iter2_reg;
        tmp_i_reg_354_pp0_iter40_reg <= tmp_i_reg_354_pp0_iter39_reg;
        tmp_i_reg_354_pp0_iter41_reg <= tmp_i_reg_354_pp0_iter40_reg;
        tmp_i_reg_354_pp0_iter42_reg <= tmp_i_reg_354_pp0_iter41_reg;
        tmp_i_reg_354_pp0_iter43_reg <= tmp_i_reg_354_pp0_iter42_reg;
        tmp_i_reg_354_pp0_iter44_reg <= tmp_i_reg_354_pp0_iter43_reg;
        tmp_i_reg_354_pp0_iter45_reg <= tmp_i_reg_354_pp0_iter44_reg;
        tmp_i_reg_354_pp0_iter46_reg <= tmp_i_reg_354_pp0_iter45_reg;
        tmp_i_reg_354_pp0_iter47_reg <= tmp_i_reg_354_pp0_iter46_reg;
        tmp_i_reg_354_pp0_iter48_reg <= tmp_i_reg_354_pp0_iter47_reg;
        tmp_i_reg_354_pp0_iter49_reg <= tmp_i_reg_354_pp0_iter48_reg;
        tmp_i_reg_354_pp0_iter4_reg <= tmp_i_reg_354_pp0_iter3_reg;
        tmp_i_reg_354_pp0_iter50_reg <= tmp_i_reg_354_pp0_iter49_reg;
        tmp_i_reg_354_pp0_iter51_reg <= tmp_i_reg_354_pp0_iter50_reg;
        tmp_i_reg_354_pp0_iter52_reg <= tmp_i_reg_354_pp0_iter51_reg;
        tmp_i_reg_354_pp0_iter53_reg <= tmp_i_reg_354_pp0_iter52_reg;
        tmp_i_reg_354_pp0_iter54_reg <= tmp_i_reg_354_pp0_iter53_reg;
        tmp_i_reg_354_pp0_iter55_reg <= tmp_i_reg_354_pp0_iter54_reg;
        tmp_i_reg_354_pp0_iter56_reg <= tmp_i_reg_354_pp0_iter55_reg;
        tmp_i_reg_354_pp0_iter57_reg <= tmp_i_reg_354_pp0_iter56_reg;
        tmp_i_reg_354_pp0_iter58_reg <= tmp_i_reg_354_pp0_iter57_reg;
        tmp_i_reg_354_pp0_iter59_reg <= tmp_i_reg_354_pp0_iter58_reg;
        tmp_i_reg_354_pp0_iter5_reg <= tmp_i_reg_354_pp0_iter4_reg;
        tmp_i_reg_354_pp0_iter60_reg <= tmp_i_reg_354_pp0_iter59_reg;
        tmp_i_reg_354_pp0_iter61_reg <= tmp_i_reg_354_pp0_iter60_reg;
        tmp_i_reg_354_pp0_iter62_reg <= tmp_i_reg_354_pp0_iter61_reg;
        tmp_i_reg_354_pp0_iter63_reg <= tmp_i_reg_354_pp0_iter62_reg;
        tmp_i_reg_354_pp0_iter64_reg <= tmp_i_reg_354_pp0_iter63_reg;
        tmp_i_reg_354_pp0_iter65_reg <= tmp_i_reg_354_pp0_iter64_reg;
        tmp_i_reg_354_pp0_iter66_reg <= tmp_i_reg_354_pp0_iter65_reg;
        tmp_i_reg_354_pp0_iter67_reg <= tmp_i_reg_354_pp0_iter66_reg;
        tmp_i_reg_354_pp0_iter68_reg <= tmp_i_reg_354_pp0_iter67_reg;
        tmp_i_reg_354_pp0_iter69_reg <= tmp_i_reg_354_pp0_iter68_reg;
        tmp_i_reg_354_pp0_iter6_reg <= tmp_i_reg_354_pp0_iter5_reg;
        tmp_i_reg_354_pp0_iter70_reg <= tmp_i_reg_354_pp0_iter69_reg;
        tmp_i_reg_354_pp0_iter7_reg <= tmp_i_reg_354_pp0_iter6_reg;
        tmp_i_reg_354_pp0_iter8_reg <= tmp_i_reg_354_pp0_iter7_reg;
        tmp_i_reg_354_pp0_iter9_reg <= tmp_i_reg_354_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_nbreadreq_fu_92_p3 == 1'd0) & (icmp_ln878_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i_106_reg_358 <= tmp_i_106_nbreadreq_fu_100_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i_reg_354 <= tmp_i_nbreadreq_fu_92_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_i_reg_354 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln4_reg_377 <= {{add_ln48_fu_269_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_i_106_reg_358 == 1'd1) & (tmp_i_reg_354 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln5_reg_372 <= {{add_ln54_fu_243_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        trunc_ln_reg_394 <= {{add_ln61_fu_304_p2[63:3]}};
    end
end

always @ (*) begin
    if ((icmp_ln878_fu_216_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state144) & (m_axi_gmem_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln878_reg_350 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_time_V_phi_fu_173_p4 = time_V_1_reg_343;
    end else begin
        ap_phi_mux_time_V_phi_fu_173_p4 = time_V_reg_168;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state144) & (m_axi_gmem_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | ((tmp_i_106_reg_358_pp0_iter1_reg == 1'd1) & (tmp_i_reg_354_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_i_reg_354_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state144) | ((tmp_i_106_reg_358_pp0_iter70_reg == 1'd1) & (tmp_i_reg_354_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((tmp_i_reg_354_pp0_iter70_reg == 1'd1) & (ap_enable_reg_pp0_iter71 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | ((tmp_i_106_reg_358_pp0_iter2_reg == 1'd1) & (tmp_i_reg_354_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((tmp_i_reg_354_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
        m_axi_gmem_AWADDR = sext_ln61_fu_319_p1;
    end else if (((tmp_i_reg_354_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_gmem_AWADDR = sext_ln48_fu_294_p1;
    end else if (((ap_predicate_op187_writereq_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_gmem_AWADDR = sext_ln54_fu_284_p1;
    end else begin
        m_axi_gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op187_writereq_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_i_reg_354_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state75)))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op327_writeresp_state73 == 1'b1) & (ap_enable_reg_pp0_iter71 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_state144) & (m_axi_gmem_BVALID == 1'b1)) | ((tmp_i_reg_354_pp0_iter70_reg == 1'd1) & (ap_enable_reg_pp0_iter71 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        m_axi_gmem_WDATA = time_V_reg_168;
    end else if ((((ap_predicate_op191_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001)) | ((tmp_i_reg_354_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001)))) begin
        m_axi_gmem_WDATA = time_V_1_reg_343_pp0_iter2_reg;
    end else begin
        m_axi_gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op191_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_state76) & (m_axi_gmem_WREADY == 1'b1)) | ((tmp_i_reg_354_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_time_blk_n = out_time_empty_n;
    end else begin
        out_time_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_time_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_time_read = 1'b1;
    end else begin
        out_time_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_106_nbreadreq_fu_100_p3 == 1'd1) & (tmp_i_nbreadreq_fu_92_p3 == 1'd0) & (icmp_ln878_fu_216_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        timeaes_blk_n = timeaes_empty_n;
    end else begin
        timeaes_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op168_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        timeaes_read = 1'b1;
    end else begin
        timeaes_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_nbreadreq_fu_92_p3 == 1'd1) & (icmp_ln878_fu_216_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        timesha_blk_n = timesha_empty_n;
    end else begin
        timesha_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op171_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        timesha_read = 1'b1;
    end else begin
        timesha_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_time_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln878_fu_216_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln878_fu_216_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((1'b1 == ap_CS_fsm_state76) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            if (((1'b1 == ap_CS_fsm_state144) & (m_axi_gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln48_fu_269_p2 = (out_time_read_reg_336 + zext_ln48_fu_265_p1);

assign add_ln54_fu_243_p2 = (out_time_read_reg_336 + zext_ln54_fu_239_p1);

assign add_ln61_fu_304_p2 = (out_time_read_reg_336 + 64'd40);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op171_read_state2 == 1'b1) & (timesha_empty_n == 1'b0)) | ((ap_predicate_op168_read_state2 == 1'b1) & (timeaes_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter71 == 1'b1) & (((ap_predicate_op327_writeresp_state73 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((tmp_i_reg_354_pp0_iter70_reg == 1'd1) & (m_axi_gmem_BVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op171_read_state2 == 1'b1) & (timesha_empty_n == 1'b0)) | ((ap_predicate_op168_read_state2 == 1'b1) & (timeaes_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter71 == 1'b1) & (((ap_predicate_op327_writeresp_state73 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((tmp_i_reg_354_pp0_iter70_reg == 1'd1) & (m_axi_gmem_BVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op171_read_state2 == 1'b1) & (timesha_empty_n == 1'b0)) | ((ap_predicate_op168_read_state2 == 1'b1) & (timeaes_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter71 == 1'b1) & (((ap_predicate_op327_writeresp_state73 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((tmp_i_reg_354_pp0_iter70_reg == 1'd1) & (m_axi_gmem_BVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_time_empty_n == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (((ap_predicate_op171_read_state2 == 1'b1) & (timesha_empty_n == 1'b0)) | ((ap_predicate_op168_read_state2 == 1'b1) & (timeaes_empty_n == 1'b0)));
end

assign ap_block_state30_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = (((m_axi_gmem_AWREADY == 1'b0) & (ap_predicate_op187_writereq_state4 == 1'b1)) | ((m_axi_gmem_AWREADY == 1'b0) & (tmp_i_reg_354_pp0_iter1_reg == 1'd1)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = (((ap_predicate_op191_write_state5 == 1'b1) & (m_axi_gmem_WREADY == 1'b0)) | ((tmp_i_reg_354_pp0_iter2_reg == 1'd1) & (m_axi_gmem_WREADY == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter63 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter64 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage0_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter67 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage0_iter68 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter69 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter70 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state73_pp0_stage0_iter71 = (((ap_predicate_op327_writeresp_state73 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((tmp_i_reg_354_pp0_iter70_reg == 1'd1) & (m_axi_gmem_BVALID == 1'b0)));
end

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op168_read_state2 = ((tmp_i_106_nbreadreq_fu_100_p3 == 1'd1) & (tmp_i_nbreadreq_fu_92_p3 == 1'd0) & (icmp_ln878_fu_216_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op171_read_state2 = ((tmp_i_nbreadreq_fu_92_p3 == 1'd1) & (icmp_ln878_fu_216_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op187_writereq_state4 = ((tmp_i_106_reg_358_pp0_iter1_reg == 1'd1) & (tmp_i_reg_354_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op191_write_state5 = ((tmp_i_106_reg_358_pp0_iter2_reg == 1'd1) & (tmp_i_reg_354_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op327_writeresp_state73 = ((tmp_i_106_reg_358_pp0_iter70_reg == 1'd1) & (tmp_i_reg_354_pp0_iter70_reg == 1'd0));
end

assign grp_fu_181_p2 = (timecnt_V_fu_82 + 64'd1);

assign icmp_ln878_fu_216_p2 = ((tmp_fu_206_p4 == 62'd0) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 8'd255;

assign m_axi_gmem_WUSER = 1'd0;

assign ret_fu_225_p2 = (zext_ln1346_fu_222_p1 + 33'd2);

assign sext_ln48_fu_294_p1 = $signed(trunc_ln4_reg_377);

assign sext_ln54_fu_284_p1 = $signed(trunc_ln5_reg_372);

assign sext_ln61_fu_319_p1 = $signed(trunc_ln_reg_394);

assign shl_ln1_fu_231_p3 = {{ret_fu_225_p2}, {3'd0}};

assign shl_ln_fu_258_p3 = {{reg_V_reg_367}, {3'd0}};

assign time_V_1_fu_196_p2 = (ap_phi_mux_time_V_phi_fu_173_p4 + 64'd1);

assign tmp_fu_206_p4 = {{timecnt_V_fu_82[63:2]}};

assign tmp_i_106_nbreadreq_fu_100_p3 = timeaes_empty_n;

assign tmp_i_nbreadreq_fu_92_p3 = timesha_empty_n;

assign zext_ln1346_fu_222_p1 = reg_V_1_reg_362;

assign zext_ln48_fu_265_p1 = shl_ln_fu_258_p3;

assign zext_ln54_fu_239_p1 = shl_ln1_fu_231_p3;

endmodule //hls_recv_krnl_backgroundclock
