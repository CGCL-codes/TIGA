-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_recv_krnl_partition_Loop_VITIS_LOOP_71_1_proc2761 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    scalar_ComputeWordCnt_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    scalar_ComputeWordCnt_loc_empty_n : IN STD_LOGIC;
    scalar_ComputeWordCnt_loc_read : OUT STD_LOGIC;
    ComputeWordCnt_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ComputeWordCnt_loc_out_full_n : IN STD_LOGIC;
    ComputeWordCnt_loc_out_write : OUT STD_LOGIC;
    ComputeWordCnt_loc_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ComputeWordCnt_loc_out1_full_n : IN STD_LOGIC;
    ComputeWordCnt_loc_out1_write : OUT STD_LOGIC;
    s_data_net_out_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    s_data_net_out_empty_n : IN STD_LOGIC;
    s_data_net_out_read : OUT STD_LOGIC;
    s_data_cal_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    s_data_cal_full_n : IN STD_LOGIC;
    s_data_cal_write : OUT STD_LOGIC;
    s_data_out_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    s_data_out_full_n : IN STD_LOGIC;
    s_data_out_write : OUT STD_LOGIC );
end;


architecture behav of hls_recv_krnl_partition_Loop_VITIS_LOOP_71_1_proc2761 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal scalar_ComputeWordCnt_loc_blk_n : STD_LOGIC;
    signal ComputeWordCnt_loc_out_blk_n : STD_LOGIC;
    signal ComputeWordCnt_loc_out1_blk_n : STD_LOGIC;
    signal s_data_net_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal s_data_cal_blk_n : STD_LOGIC;
    signal s_data_out_blk_n : STD_LOGIC;
    signal scalar_ComputeWordCnt_loc_read_reg_113 : STD_LOGIC_VECTOR (31 downto 0);
    signal Cnt_V_1_fu_102_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Cnt_V_1_reg_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_123 : STD_LOGIC_VECTOR (511 downto 0);
    signal icmp_ln878_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_128 : STD_LOGIC_VECTOR (0 downto 0);
    signal Cnt_V_reg_91 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state3 : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    Cnt_V_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((s_data_out_full_n = ap_const_logic_0) or (s_data_cal_full_n = ap_const_logic_0) or (s_data_net_out_empty_n = ap_const_logic_0))) and (icmp_ln878_reg_128 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                Cnt_V_reg_91 <= Cnt_V_1_reg_118;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ComputeWordCnt_loc_out1_full_n) or (ap_const_logic_0 = ComputeWordCnt_loc_out_full_n) or (scalar_ComputeWordCnt_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                Cnt_V_reg_91 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((s_data_net_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                Cnt_V_1_reg_118 <= Cnt_V_1_fu_102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln878_reg_128 <= icmp_ln878_fu_108_p2;
                tmp_reg_123 <= s_data_net_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                scalar_ComputeWordCnt_loc_read_reg_113 <= scalar_ComputeWordCnt_loc_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, scalar_ComputeWordCnt_loc_empty_n, ComputeWordCnt_loc_out_full_n, ComputeWordCnt_loc_out1_full_n, s_data_net_out_empty_n, s_data_cal_full_n, s_data_out_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln878_reg_128)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ComputeWordCnt_loc_out1_full_n) or (ap_const_logic_0 = ComputeWordCnt_loc_out_full_n) or (scalar_ComputeWordCnt_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((s_data_net_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((s_data_out_full_n = ap_const_logic_0) or (s_data_cal_full_n = ap_const_logic_0) or (s_data_net_out_empty_n = ap_const_logic_0))) and (icmp_ln878_reg_128 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((s_data_out_full_n = ap_const_logic_0) or (s_data_cal_full_n = ap_const_logic_0) or (s_data_net_out_empty_n = ap_const_logic_0))) and (icmp_ln878_reg_128 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    Cnt_V_1_fu_102_p2 <= std_logic_vector(unsigned(Cnt_V_reg_91) + unsigned(ap_const_lv32_1));

    ComputeWordCnt_loc_out1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ComputeWordCnt_loc_out1_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ComputeWordCnt_loc_out1_blk_n <= ComputeWordCnt_loc_out1_full_n;
        else 
            ComputeWordCnt_loc_out1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ComputeWordCnt_loc_out1_din <= scalar_ComputeWordCnt_loc_dout;

    ComputeWordCnt_loc_out1_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_ComputeWordCnt_loc_empty_n, ComputeWordCnt_loc_out_full_n, ComputeWordCnt_loc_out1_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ComputeWordCnt_loc_out1_full_n) or (ap_const_logic_0 = ComputeWordCnt_loc_out_full_n) or (scalar_ComputeWordCnt_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ComputeWordCnt_loc_out1_write <= ap_const_logic_1;
        else 
            ComputeWordCnt_loc_out1_write <= ap_const_logic_0;
        end if; 
    end process;


    ComputeWordCnt_loc_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ComputeWordCnt_loc_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ComputeWordCnt_loc_out_blk_n <= ComputeWordCnt_loc_out_full_n;
        else 
            ComputeWordCnt_loc_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ComputeWordCnt_loc_out_din <= scalar_ComputeWordCnt_loc_dout;

    ComputeWordCnt_loc_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_ComputeWordCnt_loc_empty_n, ComputeWordCnt_loc_out_full_n, ComputeWordCnt_loc_out1_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ComputeWordCnt_loc_out1_full_n) or (ap_const_logic_0 = ComputeWordCnt_loc_out_full_n) or (scalar_ComputeWordCnt_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ComputeWordCnt_loc_out_write <= ap_const_logic_1;
        else 
            ComputeWordCnt_loc_out_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, scalar_ComputeWordCnt_loc_empty_n, ComputeWordCnt_loc_out_full_n, ComputeWordCnt_loc_out1_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ComputeWordCnt_loc_out1_full_n) or (ap_const_logic_0 = ComputeWordCnt_loc_out_full_n) or (scalar_ComputeWordCnt_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(s_data_net_out_empty_n, s_data_cal_full_n, s_data_out_full_n)
    begin
                ap_block_state3 <= ((s_data_out_full_n = ap_const_logic_0) or (s_data_cal_full_n = ap_const_logic_0) or (s_data_net_out_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln878_fu_108_p2 <= "1" when (unsigned(Cnt_V_1_fu_102_p2) < unsigned(scalar_ComputeWordCnt_loc_read_reg_113)) else "0";

    s_data_cal_blk_n_assign_proc : process(s_data_cal_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_data_cal_blk_n <= s_data_cal_full_n;
        else 
            s_data_cal_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_data_cal_din <= tmp_reg_123;

    s_data_cal_write_assign_proc : process(s_data_net_out_empty_n, s_data_cal_full_n, s_data_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((s_data_out_full_n = ap_const_logic_0) or (s_data_cal_full_n = ap_const_logic_0) or (s_data_net_out_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            s_data_cal_write <= ap_const_logic_1;
        else 
            s_data_cal_write <= ap_const_logic_0;
        end if; 
    end process;


    s_data_net_out_blk_n_assign_proc : process(s_data_net_out_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            s_data_net_out_blk_n <= s_data_net_out_empty_n;
        else 
            s_data_net_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_data_net_out_read_assign_proc : process(s_data_net_out_empty_n, s_data_cal_full_n, s_data_out_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((not(((s_data_out_full_n = ap_const_logic_0) or (s_data_cal_full_n = ap_const_logic_0) or (s_data_net_out_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((s_data_net_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            s_data_net_out_read <= ap_const_logic_1;
        else 
            s_data_net_out_read <= ap_const_logic_0;
        end if; 
    end process;


    s_data_out_blk_n_assign_proc : process(s_data_out_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_data_out_blk_n <= s_data_out_full_n;
        else 
            s_data_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_data_out_din <= s_data_net_out_dout;

    s_data_out_write_assign_proc : process(s_data_net_out_empty_n, s_data_cal_full_n, s_data_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((s_data_out_full_n = ap_const_logic_0) or (s_data_cal_full_n = ap_const_logic_0) or (s_data_net_out_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            s_data_out_write <= ap_const_logic_1;
        else 
            s_data_out_write <= ap_const_logic_0;
        end if; 
    end process;


    scalar_ComputeWordCnt_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_ComputeWordCnt_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            scalar_ComputeWordCnt_loc_blk_n <= scalar_ComputeWordCnt_loc_empty_n;
        else 
            scalar_ComputeWordCnt_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    scalar_ComputeWordCnt_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_ComputeWordCnt_loc_empty_n, ComputeWordCnt_loc_out_full_n, ComputeWordCnt_loc_out1_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ComputeWordCnt_loc_out1_full_n) or (ap_const_logic_0 = ComputeWordCnt_loc_out_full_n) or (scalar_ComputeWordCnt_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            scalar_ComputeWordCnt_loc_read <= ap_const_logic_1;
        else 
            scalar_ComputeWordCnt_loc_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
