#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("s_axi_control_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_AWADDR", 6, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_ARADDR", 6, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
	Port_Property("m_axi_gmem_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_gmem_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_gmem_AWADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_gmem_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_gmem_AWLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_gmem_AWSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_gmem_AWBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_gmem_AWLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_gmem_AWCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_gmem_AWPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_gmem_AWQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_gmem_AWREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_gmem_AWUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_gmem_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_gmem_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_gmem_WDATA", 64, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_gmem_WSTRB", 8, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_gmem_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_gmem_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_gmem_WUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_gmem_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_gmem_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_gmem_ARADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_gmem_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_gmem_ARLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_gmem_ARSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_gmem_ARBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_gmem_ARLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_gmem_ARCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_gmem_ARPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_gmem_ARQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_gmem_ARREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_gmem_ARUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_gmem_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_gmem_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_gmem_RDATA", 64, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_gmem_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_gmem_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_gmem_RUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_gmem_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_gmem_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_gmem_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_gmem_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_gmem_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_gmem_BUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("s_axis_udp_rx_TDATA", 512, hls_in, 1, "axis", "in_data", 1),
	Port_Property("s_axis_udp_rx_TKEEP", 64, hls_in, 2, "axis", "in_data", 1),
	Port_Property("s_axis_udp_rx_TSTRB", 64, hls_in, 3, "axis", "in_data", 1),
	Port_Property("s_axis_udp_rx_TLAST", 1, hls_in, 4, "axis", "in_data", 1),
	Port_Property("m_axis_udp_tx_TDATA", 512, hls_out, 5, "axis", "out_data", 1),
	Port_Property("m_axis_udp_tx_TKEEP", 64, hls_out, 6, "axis", "out_data", 1),
	Port_Property("m_axis_udp_tx_TSTRB", 64, hls_out, 7, "axis", "out_data", 1),
	Port_Property("m_axis_udp_tx_TLAST", 1, hls_out, 8, "axis", "out_data", 1),
	Port_Property("s_axis_udp_rx_meta_TDATA", 256, hls_in, 9, "axis", "in_data", 1),
	Port_Property("s_axis_udp_rx_meta_TKEEP", 32, hls_in, 10, "axis", "in_data", 1),
	Port_Property("s_axis_udp_rx_meta_TSTRB", 32, hls_in, 11, "axis", "in_data", 1),
	Port_Property("s_axis_udp_rx_meta_TLAST", 1, hls_in, 12, "axis", "in_data", 1),
	Port_Property("m_axis_udp_tx_meta_TDATA", 256, hls_out, 13, "axis", "out_data", 1),
	Port_Property("m_axis_udp_tx_meta_TKEEP", 32, hls_out, 14, "axis", "out_data", 1),
	Port_Property("m_axis_udp_tx_meta_TSTRB", 32, hls_out, 15, "axis", "out_data", 1),
	Port_Property("m_axis_udp_tx_meta_TLAST", 1, hls_out, 16, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_listen_port_TDATA", 16, hls_out, 17, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_listen_port_TKEEP", 2, hls_out, 18, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_listen_port_TSTRB", 2, hls_out, 19, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_listen_port_TLAST", 1, hls_out, 20, "axis", "out_data", 1),
	Port_Property("s_axis_tcp_port_status_TDATA", 8, hls_in, 21, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_port_status_TKEEP", 1, hls_in, 22, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_port_status_TSTRB", 1, hls_in, 23, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_port_status_TLAST", 1, hls_in, 24, "axis", "in_data", 1),
	Port_Property("m_axis_tcp_open_connection_TDATA", 64, hls_out, 25, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_open_connection_TKEEP", 8, hls_out, 26, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_open_connection_TSTRB", 8, hls_out, 27, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_open_connection_TLAST", 1, hls_out, 28, "axis", "out_data", 1),
	Port_Property("s_axis_tcp_open_status_TDATA", 128, hls_in, 29, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_open_status_TKEEP", 16, hls_in, 30, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_open_status_TSTRB", 16, hls_in, 31, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_open_status_TLAST", 1, hls_in, 32, "axis", "in_data", 1),
	Port_Property("m_axis_tcp_close_connection_TDATA", 16, hls_out, 33, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_close_connection_TKEEP", 2, hls_out, 34, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_close_connection_TSTRB", 2, hls_out, 35, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_close_connection_TLAST", 1, hls_out, 36, "axis", "out_data", 1),
	Port_Property("s_axis_tcp_notification_TDATA", 128, hls_in, 37, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_notification_TKEEP", 16, hls_in, 38, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_notification_TSTRB", 16, hls_in, 39, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_notification_TLAST", 1, hls_in, 40, "axis", "in_data", 1),
	Port_Property("m_axis_tcp_read_pkg_TDATA", 32, hls_out, 41, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_read_pkg_TKEEP", 4, hls_out, 42, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_read_pkg_TSTRB", 4, hls_out, 43, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_read_pkg_TLAST", 1, hls_out, 44, "axis", "out_data", 1),
	Port_Property("s_axis_tcp_rx_meta_TDATA", 16, hls_in, 45, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_rx_meta_TKEEP", 2, hls_in, 46, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_rx_meta_TSTRB", 2, hls_in, 47, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_rx_meta_TLAST", 1, hls_in, 48, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_rx_data_TDATA", 512, hls_in, 49, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_rx_data_TKEEP", 64, hls_in, 50, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_rx_data_TSTRB", 64, hls_in, 51, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_rx_data_TLAST", 1, hls_in, 52, "axis", "in_data", 1),
	Port_Property("m_axis_tcp_tx_meta_TDATA", 32, hls_out, 53, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_tx_meta_TKEEP", 4, hls_out, 54, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_tx_meta_TSTRB", 4, hls_out, 55, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_tx_meta_TLAST", 1, hls_out, 56, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_tx_data_TDATA", 512, hls_out, 57, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_tx_data_TKEEP", 64, hls_out, 58, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_tx_data_TSTRB", 64, hls_out, 59, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_tx_data_TLAST", 1, hls_out, 60, "axis", "out_data", 1),
	Port_Property("s_axis_tcp_tx_status_TDATA", 64, hls_in, 61, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_tx_status_TKEEP", 8, hls_in, 62, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_tx_status_TSTRB", 8, hls_in, 63, "axis", "in_data", 1),
	Port_Property("s_axis_tcp_tx_status_TLAST", 1, hls_in, 64, "axis", "in_data", 1),
	Port_Property("m_axis_tcp_listen_port_TVALID", 1, hls_out, 20, "axis", "out_vld", 1),
	Port_Property("m_axis_tcp_listen_port_TREADY", 1, hls_in, 20, "axis", "out_acc", 1),
	Port_Property("s_axis_tcp_port_status_TVALID", 1, hls_in, 24, "axis", "in_vld", 1),
	Port_Property("s_axis_tcp_port_status_TREADY", 1, hls_out, 24, "axis", "in_acc", 1),
	Port_Property("s_axis_tcp_notification_TVALID", 1, hls_in, 40, "axis", "in_vld", 1),
	Port_Property("s_axis_tcp_notification_TREADY", 1, hls_out, 40, "axis", "in_acc", 1),
	Port_Property("m_axis_tcp_read_pkg_TVALID", 1, hls_out, 44, "axis", "out_vld", 1),
	Port_Property("m_axis_tcp_read_pkg_TREADY", 1, hls_in, 44, "axis", "out_acc", 1),
	Port_Property("s_axis_tcp_rx_meta_TVALID", 1, hls_in, 48, "axis", "in_vld", 1),
	Port_Property("s_axis_tcp_rx_meta_TREADY", 1, hls_out, 48, "axis", "in_acc", 1),
	Port_Property("s_axis_tcp_rx_data_TVALID", 1, hls_in, 52, "axis", "in_vld", 1),
	Port_Property("s_axis_tcp_rx_data_TREADY", 1, hls_out, 52, "axis", "in_acc", 1),
	Port_Property("m_axis_tcp_open_connection_TVALID", 1, hls_out, 28, "axis", "out_vld", 1),
	Port_Property("m_axis_tcp_open_connection_TREADY", 1, hls_in, 28, "axis", "out_acc", 1),
	Port_Property("s_axis_tcp_open_status_TVALID", 1, hls_in, 32, "axis", "in_vld", 1),
	Port_Property("s_axis_tcp_open_status_TREADY", 1, hls_out, 32, "axis", "in_acc", 1),
	Port_Property("m_axis_tcp_tx_meta_TVALID", 1, hls_out, 56, "axis", "out_vld", 1),
	Port_Property("m_axis_tcp_tx_meta_TREADY", 1, hls_in, 56, "axis", "out_acc", 1),
	Port_Property("m_axis_tcp_tx_data_TVALID", 1, hls_out, 60, "axis", "out_vld", 1),
	Port_Property("m_axis_tcp_tx_data_TREADY", 1, hls_in, 60, "axis", "out_acc", 1),
	Port_Property("s_axis_tcp_tx_status_TVALID", 1, hls_in, 64, "axis", "in_vld", 1),
	Port_Property("s_axis_tcp_tx_status_TREADY", 1, hls_out, 64, "axis", "in_acc", 1),
	Port_Property("s_axis_udp_rx_TVALID", 1, hls_in, 4, "axis", "in_vld", 1),
	Port_Property("s_axis_udp_rx_TREADY", 1, hls_out, 4, "axis", "in_acc", 1),
	Port_Property("m_axis_udp_tx_TVALID", 1, hls_out, 8, "axis", "out_vld", 1),
	Port_Property("m_axis_udp_tx_TREADY", 1, hls_in, 8, "axis", "out_acc", 1),
	Port_Property("s_axis_udp_rx_meta_TVALID", 1, hls_in, 12, "axis", "in_vld", 1),
	Port_Property("s_axis_udp_rx_meta_TREADY", 1, hls_out, 12, "axis", "in_acc", 1),
	Port_Property("m_axis_udp_tx_meta_TVALID", 1, hls_out, 16, "axis", "out_vld", 1),
	Port_Property("m_axis_udp_tx_meta_TREADY", 1, hls_in, 16, "axis", "out_acc", 1),
	Port_Property("m_axis_tcp_close_connection_TVALID", 1, hls_out, 36, "axis", "out_vld", 1),
	Port_Property("m_axis_tcp_close_connection_TREADY", 1, hls_in, 36, "axis", "out_acc", 1),
};
const char* HLS_Design_Meta::dut_name = "hls_recv_krnl";
