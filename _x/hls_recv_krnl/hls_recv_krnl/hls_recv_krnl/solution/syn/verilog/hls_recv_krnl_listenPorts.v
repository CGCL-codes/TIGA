// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_recv_krnl_listenPorts (
        basePort_dout,
        basePort_empty_n,
        basePort_read,
        useConn_dout,
        useConn_empty_n,
        useConn_read,
        m_axis_tcp_listen_port_TDATA,
        m_axis_tcp_listen_port_TKEEP,
        m_axis_tcp_listen_port_TSTRB,
        m_axis_tcp_listen_port_TLAST,
        s_axis_tcp_port_status_TDATA,
        s_axis_tcp_port_status_TKEEP,
        s_axis_tcp_port_status_TSTRB,
        s_axis_tcp_port_status_TLAST,
        ap_clk,
        ap_rst,
        ap_start,
        m_axis_tcp_listen_port_TVALID,
        m_axis_tcp_listen_port_TREADY,
        ap_done,
        s_axis_tcp_port_status_TVALID,
        s_axis_tcp_port_status_TREADY,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] basePort_dout;
input   basePort_empty_n;
output   basePort_read;
input  [31:0] useConn_dout;
input   useConn_empty_n;
output   useConn_read;
output  [15:0] m_axis_tcp_listen_port_TDATA;
output  [1:0] m_axis_tcp_listen_port_TKEEP;
output  [1:0] m_axis_tcp_listen_port_TSTRB;
output  [0:0] m_axis_tcp_listen_port_TLAST;
input  [7:0] s_axis_tcp_port_status_TDATA;
input  [0:0] s_axis_tcp_port_status_TKEEP;
input  [0:0] s_axis_tcp_port_status_TSTRB;
input  [0:0] s_axis_tcp_port_status_TLAST;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   m_axis_tcp_listen_port_TVALID;
input   m_axis_tcp_listen_port_TREADY;
output   ap_done;
input   s_axis_tcp_port_status_TVALID;
output   s_axis_tcp_port_status_TREADY;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    listenPorts_entry37_U0_ap_start;
wire    listenPorts_entry37_U0_ap_done;
wire    listenPorts_entry37_U0_ap_continue;
wire    listenPorts_entry37_U0_ap_idle;
wire    listenPorts_entry37_U0_ap_ready;
wire    listenPorts_entry37_U0_basePort_read;
wire    listenPorts_entry37_U0_useConn_read;
wire   [15:0] listenPorts_entry37_U0_basePort_out_din;
wire    listenPorts_entry37_U0_basePort_out_write;
wire   [31:0] listenPorts_entry37_U0_useConn_out_din;
wire    listenPorts_entry37_U0_useConn_out_write;
wire   [31:0] listenPorts_entry37_U0_useConn_out1_din;
wire    listenPorts_entry37_U0_useConn_out1_write;
wire    listenPorts_Block_split2_proc_U0_ap_start;
wire    listenPorts_Block_split2_proc_U0_ap_done;
wire    listenPorts_Block_split2_proc_U0_ap_continue;
wire    listenPorts_Block_split2_proc_U0_ap_idle;
wire    listenPorts_Block_split2_proc_U0_ap_ready;
wire    listenPorts_Block_split2_proc_U0_basePort_read;
wire   [15:0] listenPorts_Block_split2_proc_U0_ap_return;
reg    ap_sync_reg_listenPorts_Block_split2_proc_U0_ap_start;
wire    ap_channel_done_basePort_cast_loc_i_channel;
wire    basePort_cast_loc_i_channel_full_n;
wire    listen_port_handler_U0_ap_start;
wire    listen_port_handler_U0_ap_done;
wire    listen_port_handler_U0_ap_continue;
wire    listen_port_handler_U0_ap_idle;
wire    listen_port_handler_U0_ap_ready;
wire    listen_port_handler_U0_useConn_read;
wire   [15:0] listen_port_handler_U0_m_axis_tcp_listen_port_TDATA;
wire    listen_port_handler_U0_m_axis_tcp_listen_port_TVALID;
wire   [1:0] listen_port_handler_U0_m_axis_tcp_listen_port_TKEEP;
wire   [1:0] listen_port_handler_U0_m_axis_tcp_listen_port_TSTRB;
wire   [0:0] listen_port_handler_U0_m_axis_tcp_listen_port_TLAST;
wire    ap_sync_continue;
wire    port_status_handler_U0_ap_start;
wire    port_status_handler_U0_ap_done;
wire    port_status_handler_U0_ap_continue;
wire    port_status_handler_U0_ap_idle;
wire    port_status_handler_U0_ap_ready;
wire    port_status_handler_U0_useConn_read;
wire    port_status_handler_U0_s_axis_tcp_port_status_TREADY;
reg    ap_sync_reg_port_status_handler_U0_ap_start;
wire    basePort_c_i_full_n;
wire   [15:0] basePort_c_i_dout;
wire    basePort_c_i_empty_n;
wire    useConn_c_i_full_n;
wire   [31:0] useConn_c_i_dout;
wire    useConn_c_i_empty_n;
wire    useConn_c8_i_full_n;
wire   [31:0] useConn_c8_i_dout;
wire    useConn_c8_i_empty_n;
wire   [15:0] basePort_cast_loc_i_channel_dout;
wire    basePort_cast_loc_i_channel_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_listenPorts_Block_split2_proc_U0_ap_start = 1'b0;
#0 ap_sync_reg_port_status_handler_U0_ap_start = 1'b0;
end

hls_recv_krnl_listenPorts_entry37 listenPorts_entry37_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(listenPorts_entry37_U0_ap_start),
    .ap_done(listenPorts_entry37_U0_ap_done),
    .ap_continue(listenPorts_entry37_U0_ap_continue),
    .ap_idle(listenPorts_entry37_U0_ap_idle),
    .ap_ready(listenPorts_entry37_U0_ap_ready),
    .basePort_dout(basePort_dout),
    .basePort_empty_n(basePort_empty_n),
    .basePort_read(listenPorts_entry37_U0_basePort_read),
    .useConn_dout(useConn_dout),
    .useConn_empty_n(useConn_empty_n),
    .useConn_read(listenPorts_entry37_U0_useConn_read),
    .basePort_out_din(listenPorts_entry37_U0_basePort_out_din),
    .basePort_out_full_n(basePort_c_i_full_n),
    .basePort_out_write(listenPorts_entry37_U0_basePort_out_write),
    .useConn_out_din(listenPorts_entry37_U0_useConn_out_din),
    .useConn_out_full_n(useConn_c_i_full_n),
    .useConn_out_write(listenPorts_entry37_U0_useConn_out_write),
    .useConn_out1_din(listenPorts_entry37_U0_useConn_out1_din),
    .useConn_out1_full_n(useConn_c8_i_full_n),
    .useConn_out1_write(listenPorts_entry37_U0_useConn_out1_write)
);

hls_recv_krnl_listenPorts_Block_split2_proc listenPorts_Block_split2_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(listenPorts_Block_split2_proc_U0_ap_start),
    .ap_done(listenPorts_Block_split2_proc_U0_ap_done),
    .ap_continue(listenPorts_Block_split2_proc_U0_ap_continue),
    .ap_idle(listenPorts_Block_split2_proc_U0_ap_idle),
    .ap_ready(listenPorts_Block_split2_proc_U0_ap_ready),
    .basePort_dout(basePort_c_i_dout),
    .basePort_empty_n(basePort_c_i_empty_n),
    .basePort_read(listenPorts_Block_split2_proc_U0_basePort_read),
    .ap_return(listenPorts_Block_split2_proc_U0_ap_return)
);

hls_recv_krnl_listen_port_handler listen_port_handler_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(listen_port_handler_U0_ap_start),
    .ap_done(listen_port_handler_U0_ap_done),
    .ap_continue(listen_port_handler_U0_ap_continue),
    .ap_idle(listen_port_handler_U0_ap_idle),
    .ap_ready(listen_port_handler_U0_ap_ready),
    .basePort(basePort_cast_loc_i_channel_dout),
    .useConn_dout(useConn_c_i_dout),
    .useConn_empty_n(useConn_c_i_empty_n),
    .useConn_read(listen_port_handler_U0_useConn_read),
    .m_axis_tcp_listen_port_TDATA(listen_port_handler_U0_m_axis_tcp_listen_port_TDATA),
    .m_axis_tcp_listen_port_TVALID(listen_port_handler_U0_m_axis_tcp_listen_port_TVALID),
    .m_axis_tcp_listen_port_TREADY(m_axis_tcp_listen_port_TREADY),
    .m_axis_tcp_listen_port_TKEEP(listen_port_handler_U0_m_axis_tcp_listen_port_TKEEP),
    .m_axis_tcp_listen_port_TSTRB(listen_port_handler_U0_m_axis_tcp_listen_port_TSTRB),
    .m_axis_tcp_listen_port_TLAST(listen_port_handler_U0_m_axis_tcp_listen_port_TLAST)
);

hls_recv_krnl_port_status_handler port_status_handler_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(port_status_handler_U0_ap_start),
    .ap_done(port_status_handler_U0_ap_done),
    .ap_continue(port_status_handler_U0_ap_continue),
    .ap_idle(port_status_handler_U0_ap_idle),
    .ap_ready(port_status_handler_U0_ap_ready),
    .useConn_dout(useConn_c8_i_dout),
    .useConn_empty_n(useConn_c8_i_empty_n),
    .useConn_read(port_status_handler_U0_useConn_read),
    .s_axis_tcp_port_status_TDATA(s_axis_tcp_port_status_TDATA),
    .s_axis_tcp_port_status_TVALID(s_axis_tcp_port_status_TVALID),
    .s_axis_tcp_port_status_TREADY(port_status_handler_U0_s_axis_tcp_port_status_TREADY),
    .s_axis_tcp_port_status_TKEEP(s_axis_tcp_port_status_TKEEP),
    .s_axis_tcp_port_status_TSTRB(s_axis_tcp_port_status_TSTRB),
    .s_axis_tcp_port_status_TLAST(s_axis_tcp_port_status_TLAST)
);

hls_recv_krnl_fifo_w16_d2_S basePort_c_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(listenPorts_entry37_U0_basePort_out_din),
    .if_full_n(basePort_c_i_full_n),
    .if_write(listenPorts_entry37_U0_basePort_out_write),
    .if_dout(basePort_c_i_dout),
    .if_empty_n(basePort_c_i_empty_n),
    .if_read(listenPorts_Block_split2_proc_U0_basePort_read)
);

hls_recv_krnl_fifo_w32_d3_S useConn_c_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(listenPorts_entry37_U0_useConn_out_din),
    .if_full_n(useConn_c_i_full_n),
    .if_write(listenPorts_entry37_U0_useConn_out_write),
    .if_dout(useConn_c_i_dout),
    .if_empty_n(useConn_c_i_empty_n),
    .if_read(listen_port_handler_U0_useConn_read)
);

hls_recv_krnl_fifo_w32_d2_S useConn_c8_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(listenPorts_entry37_U0_useConn_out1_din),
    .if_full_n(useConn_c8_i_full_n),
    .if_write(listenPorts_entry37_U0_useConn_out1_write),
    .if_dout(useConn_c8_i_dout),
    .if_empty_n(useConn_c8_i_empty_n),
    .if_read(port_status_handler_U0_useConn_read)
);

hls_recv_krnl_fifo_w16_d2_S basePort_cast_loc_i_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(listenPorts_Block_split2_proc_U0_ap_return),
    .if_full_n(basePort_cast_loc_i_channel_full_n),
    .if_write(listenPorts_Block_split2_proc_U0_ap_done),
    .if_dout(basePort_cast_loc_i_channel_dout),
    .if_empty_n(basePort_cast_loc_i_channel_empty_n),
    .if_read(listen_port_handler_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_listenPorts_Block_split2_proc_U0_ap_start <= 1'b0;
    end else begin
        if ((ap_start == 1'b1)) begin
            ap_sync_reg_listenPorts_Block_split2_proc_U0_ap_start <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_port_status_handler_U0_ap_start <= 1'b0;
    end else begin
        if ((ap_start == 1'b1)) begin
            ap_sync_reg_port_status_handler_U0_ap_start <= 1'b1;
        end
    end
end

assign ap_channel_done_basePort_cast_loc_i_channel = listenPorts_Block_split2_proc_U0_ap_done;

assign ap_done = ap_sync_done;

assign ap_idle = (port_status_handler_U0_ap_idle & listen_port_handler_U0_ap_idle & listenPorts_entry37_U0_ap_idle & listenPorts_Block_split2_proc_U0_ap_idle & (basePort_cast_loc_i_channel_empty_n ^ 1'b1));

assign ap_ready = listenPorts_entry37_U0_ap_ready;

assign ap_sync_continue = (ap_sync_done & ap_continue);

assign ap_sync_done = (port_status_handler_U0_ap_done & listen_port_handler_U0_ap_done);

assign ap_sync_ready = listenPorts_entry37_U0_ap_ready;

assign basePort_read = listenPorts_entry37_U0_basePort_read;

assign listenPorts_Block_split2_proc_U0_ap_continue = basePort_cast_loc_i_channel_full_n;

assign listenPorts_Block_split2_proc_U0_ap_start = (ap_sync_reg_listenPorts_Block_split2_proc_U0_ap_start | ap_start);

assign listenPorts_entry37_U0_ap_continue = 1'b1;

assign listenPorts_entry37_U0_ap_start = ap_start;

assign listen_port_handler_U0_ap_continue = ap_sync_continue;

assign listen_port_handler_U0_ap_start = basePort_cast_loc_i_channel_empty_n;

assign m_axis_tcp_listen_port_TDATA = listen_port_handler_U0_m_axis_tcp_listen_port_TDATA;

assign m_axis_tcp_listen_port_TKEEP = listen_port_handler_U0_m_axis_tcp_listen_port_TKEEP;

assign m_axis_tcp_listen_port_TLAST = listen_port_handler_U0_m_axis_tcp_listen_port_TLAST;

assign m_axis_tcp_listen_port_TSTRB = listen_port_handler_U0_m_axis_tcp_listen_port_TSTRB;

assign m_axis_tcp_listen_port_TVALID = listen_port_handler_U0_m_axis_tcp_listen_port_TVALID;

assign port_status_handler_U0_ap_continue = ap_sync_continue;

assign port_status_handler_U0_ap_start = (ap_sync_reg_port_status_handler_U0_ap_start | ap_start);

assign s_axis_tcp_port_status_TREADY = port_status_handler_U0_s_axis_tcp_port_status_TREADY;

assign useConn_read = listenPorts_entry37_U0_useConn_read;

endmodule //hls_recv_krnl_listenPorts
