-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_recv_krnl_tie_off_tcp_tx is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axis_tcp_tx_meta_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axis_tcp_tx_meta_TVALID : OUT STD_LOGIC;
    m_axis_tcp_tx_meta_TREADY : IN STD_LOGIC;
    m_axis_tcp_tx_meta_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axis_tcp_tx_meta_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axis_tcp_tx_meta_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_tcp_tx_data_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_tcp_tx_data_TVALID : OUT STD_LOGIC;
    m_axis_tcp_tx_data_TREADY : IN STD_LOGIC;
    m_axis_tcp_tx_data_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tcp_tx_data_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tcp_tx_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tcp_tx_status_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_tcp_tx_status_TVALID : IN STD_LOGIC;
    s_axis_tcp_tx_status_TREADY : OUT STD_LOGIC;
    s_axis_tcp_tx_status_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_tcp_tx_status_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_tcp_tx_status_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of hls_recv_krnl_tie_off_tcp_tx is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv1024_lc_1 : STD_LOGIC_VECTOR (1023 downto

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_axis_tcp_tx_meta_TDATA_blk_n : STD_LOGIC;
    signal tmp_nbreadreq_fu_80_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_reg_204 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_tcp_tx_data_TDATA_blk_n : STD_LOGIC;
    signal tmp_s_nbreadreq_fu_112_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_reg_213 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_axis_tcp_tx_status_TDATA_blk_n : STD_LOGIC;
    signal tmp_1_nbreadreq_fu_141_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal txMetaData_empty_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal txData_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal txData_empty_n : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal regslice_both_m_axis_tcp_tx_meta_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_data_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal m_axis_tcp_tx_meta_TVALID_int_regslice : STD_LOGIC;
    signal m_axis_tcp_tx_meta_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_meta_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_meta_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_meta_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_meta_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_meta_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_meta_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_meta_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_meta_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_meta_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_meta_V_last_V_U_vld_out : STD_LOGIC;
    signal m_axis_tcp_tx_data_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal m_axis_tcp_tx_data_TVALID_int_regslice : STD_LOGIC;
    signal m_axis_tcp_tx_data_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_data_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_data_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal m_axis_tcp_tx_data_TKEEP_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_m_axis_tcp_tx_data_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_data_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_data_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_data_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_data_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_data_V_last_V_U_apdone_blk : STD_LOGIC;
    signal m_axis_tcp_tx_data_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_m_axis_tcp_tx_data_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_tcp_tx_data_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_tcp_tx_status_V_data_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_tcp_tx_status_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal s_axis_tcp_tx_status_TVALID_int_regslice : STD_LOGIC;
    signal s_axis_tcp_tx_status_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_axis_tcp_tx_status_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_tcp_tx_status_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_tcp_tx_status_TKEEP_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_s_axis_tcp_tx_status_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_tcp_tx_status_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_tcp_tx_status_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_tcp_tx_status_TSTRB_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_s_axis_tcp_tx_status_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_tcp_tx_status_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_tcp_tx_status_V_last_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_tcp_tx_status_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_tcp_tx_status_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_tcp_tx_status_V_last_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hls_recv_krnl_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_m_axis_tcp_tx_meta_V_data_V_U : component hls_recv_krnl_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv32_0,
        vld_in => m_axis_tcp_tx_meta_TVALID_int_regslice,
        ack_in => m_axis_tcp_tx_meta_TREADY_int_regslice,
        data_out => m_axis_tcp_tx_meta_TDATA,
        vld_out => regslice_both_m_axis_tcp_tx_meta_V_data_V_U_vld_out,
        ack_out => m_axis_tcp_tx_meta_TREADY,
        apdone_blk => regslice_both_m_axis_tcp_tx_meta_V_data_V_U_apdone_blk);

    regslice_both_m_axis_tcp_tx_meta_V_keep_V_U : component hls_recv_krnl_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv4_0,
        vld_in => m_axis_tcp_tx_meta_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_tcp_tx_meta_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_tcp_tx_meta_TKEEP,
        vld_out => regslice_both_m_axis_tcp_tx_meta_V_keep_V_U_vld_out,
        ack_out => m_axis_tcp_tx_meta_TREADY,
        apdone_blk => regslice_both_m_axis_tcp_tx_meta_V_keep_V_U_apdone_blk);

    regslice_both_m_axis_tcp_tx_meta_V_strb_V_U : component hls_recv_krnl_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv4_0,
        vld_in => m_axis_tcp_tx_meta_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_tcp_tx_meta_V_strb_V_U_ack_in_dummy,
        data_out => m_axis_tcp_tx_meta_TSTRB,
        vld_out => regslice_both_m_axis_tcp_tx_meta_V_strb_V_U_vld_out,
        ack_out => m_axis_tcp_tx_meta_TREADY,
        apdone_blk => regslice_both_m_axis_tcp_tx_meta_V_strb_V_U_apdone_blk);

    regslice_both_m_axis_tcp_tx_meta_V_last_V_U : component hls_recv_krnl_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_0,
        vld_in => m_axis_tcp_tx_meta_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_tcp_tx_meta_V_last_V_U_ack_in_dummy,
        data_out => m_axis_tcp_tx_meta_TLAST,
        vld_out => regslice_both_m_axis_tcp_tx_meta_V_last_V_U_vld_out,
        ack_out => m_axis_tcp_tx_meta_TREADY,
        apdone_blk => regslice_both_m_axis_tcp_tx_meta_V_last_V_U_apdone_blk);

    regslice_both_m_axis_tcp_tx_data_V_data_V_U : component hls_recv_krnl_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => m_axis_tcp_tx_data_TDATA_int_regslice,
        vld_in => m_axis_tcp_tx_data_TVALID_int_regslice,
        ack_in => m_axis_tcp_tx_data_TREADY_int_regslice,
        data_out => m_axis_tcp_tx_data_TDATA,
        vld_out => regslice_both_m_axis_tcp_tx_data_V_data_V_U_vld_out,
        ack_out => m_axis_tcp_tx_data_TREADY,
        apdone_blk => regslice_both_m_axis_tcp_tx_data_V_data_V_U_apdone_blk);

    regslice_both_m_axis_tcp_tx_data_V_keep_V_U : component hls_recv_krnl_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => m_axis_tcp_tx_data_TKEEP_int_regslice,
        vld_in => m_axis_tcp_tx_data_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_tcp_tx_data_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_tcp_tx_data_TKEEP,
        vld_out => regslice_both_m_axis_tcp_tx_data_V_keep_V_U_vld_out,
        ack_out => m_axis_tcp_tx_data_TREADY,
        apdone_blk => regslice_both_m_axis_tcp_tx_data_V_keep_V_U_apdone_blk);

    regslice_both_m_axis_tcp_tx_data_V_strb_V_U : component hls_recv_krnl_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv64_0,
        vld_in => m_axis_tcp_tx_data_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_tcp_tx_data_V_strb_V_U_ack_in_dummy,
        data_out => m_axis_tcp_tx_data_TSTRB,
        vld_out => regslice_both_m_axis_tcp_tx_data_V_strb_V_U_vld_out,
        ack_out => m_axis_tcp_tx_data_TREADY,
        apdone_blk => regslice_both_m_axis_tcp_tx_data_V_strb_V_U_apdone_blk);

    regslice_both_m_axis_tcp_tx_data_V_last_V_U : component hls_recv_krnl_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => m_axis_tcp_tx_data_TLAST_int_regslice,
        vld_in => m_axis_tcp_tx_data_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_tcp_tx_data_V_last_V_U_ack_in_dummy,
        data_out => m_axis_tcp_tx_data_TLAST,
        vld_out => regslice_both_m_axis_tcp_tx_data_V_last_V_U_vld_out,
        ack_out => m_axis_tcp_tx_data_TREADY,
        apdone_blk => regslice_both_m_axis_tcp_tx_data_V_last_V_U_apdone_blk);

    regslice_both_s_axis_tcp_tx_status_V_data_V_U : component hls_recv_krnl_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => s_axis_tcp_tx_status_TDATA,
        vld_in => s_axis_tcp_tx_status_TVALID,
        ack_in => regslice_both_s_axis_tcp_tx_status_V_data_V_U_ack_in,
        data_out => s_axis_tcp_tx_status_TDATA_int_regslice,
        vld_out => s_axis_tcp_tx_status_TVALID_int_regslice,
        ack_out => s_axis_tcp_tx_status_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_tcp_tx_status_V_data_V_U_apdone_blk);

    regslice_both_s_axis_tcp_tx_status_V_keep_V_U : component hls_recv_krnl_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => s_axis_tcp_tx_status_TKEEP,
        vld_in => s_axis_tcp_tx_status_TVALID,
        ack_in => regslice_both_s_axis_tcp_tx_status_V_keep_V_U_ack_in,
        data_out => s_axis_tcp_tx_status_TKEEP_int_regslice,
        vld_out => regslice_both_s_axis_tcp_tx_status_V_keep_V_U_vld_out,
        ack_out => s_axis_tcp_tx_status_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_tcp_tx_status_V_keep_V_U_apdone_blk);

    regslice_both_s_axis_tcp_tx_status_V_strb_V_U : component hls_recv_krnl_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => s_axis_tcp_tx_status_TSTRB,
        vld_in => s_axis_tcp_tx_status_TVALID,
        ack_in => regslice_both_s_axis_tcp_tx_status_V_strb_V_U_ack_in,
        data_out => s_axis_tcp_tx_status_TSTRB_int_regslice,
        vld_out => regslice_both_s_axis_tcp_tx_status_V_strb_V_U_vld_out,
        ack_out => s_axis_tcp_tx_status_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_tcp_tx_status_V_strb_V_U_apdone_blk);

    regslice_both_s_axis_tcp_tx_status_V_last_V_U : component hls_recv_krnl_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => s_axis_tcp_tx_status_TLAST,
        vld_in => s_axis_tcp_tx_status_TVALID,
        ack_in => regslice_both_s_axis_tcp_tx_status_V_last_V_U_ack_in,
        data_out => s_axis_tcp_tx_status_TLAST_int_regslice,
        vld_out => regslice_both_s_axis_tcp_tx_status_V_last_V_U_vld_out,
        ack_out => s_axis_tcp_tx_status_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_tcp_tx_status_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_m_axis_tcp_tx_data_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_m_axis_tcp_tx_meta_V_data_V_U_apdone_blk = ap_const_logic_1) or ((tmp_1_nbreadreq_fu_141_p6 = ap_const_lv1_1) and (s_axis_tcp_tx_status_TVALID_int_regslice = ap_const_logic_0)) or ((tmp_s_reg_213 = ap_const_lv1_1) and (m_axis_tcp_tx_data_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    tmp_reg_204(0) <= '1';
    tmp_s_reg_213(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, tmp_nbreadreq_fu_80_p3, ap_CS_fsm_state2, tmp_reg_204, tmp_s_nbreadreq_fu_112_p3, ap_CS_fsm_state3, tmp_s_reg_213, tmp_1_nbreadreq_fu_141_p6, txMetaData_empty_n, ap_block_state1_io, txData_empty_n, ap_block_state2_io, regslice_both_m_axis_tcp_tx_meta_V_data_V_U_apdone_blk, regslice_both_m_axis_tcp_tx_data_V_data_V_U_apdone_blk, ap_block_state3_io, m_axis_tcp_tx_meta_TREADY_int_regslice, m_axis_tcp_tx_data_TREADY_int_regslice, s_axis_tcp_tx_status_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or ((txMetaData_empty_n = ap_const_logic_0) and (tmp_nbreadreq_fu_80_p3 = ap_const_lv1_1)) or ((tmp_nbreadreq_fu_80_p3 = ap_const_lv1_1) and (m_axis_tcp_tx_meta_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((tmp_s_nbreadreq_fu_112_p3 = ap_const_lv1_1) and (m_axis_tcp_tx_data_TREADY_int_regslice = ap_const_logic_0)) or ((tmp_s_nbreadreq_fu_112_p3 = ap_const_lv1_1) and (txData_empty_n = ap_const_logic_0)) or ((tmp_reg_204 = ap_const_lv1_1) and (m_axis_tcp_tx_meta_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_m_axis_tcp_tx_data_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_m_axis_tcp_tx_meta_V_data_V_U_apdone_blk = ap_const_logic_1) or ((tmp_1_nbreadreq_fu_141_p6 = ap_const_lv1_1) and (s_axis_tcp_tx_status_TVALID_int_regslice = ap_const_logic_0)) or ((tmp_s_reg_213 = ap_const_lv1_1) and (m_axis_tcp_tx_data_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, tmp_nbreadreq_fu_80_p3, txMetaData_empty_n, m_axis_tcp_tx_meta_TREADY_int_regslice)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((txMetaData_empty_n = ap_const_logic_0) and (tmp_nbreadreq_fu_80_p3 = ap_const_lv1_1)) or ((tmp_nbreadreq_fu_80_p3 = ap_const_lv1_1) and (m_axis_tcp_tx_meta_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state1_io_assign_proc : process(tmp_nbreadreq_fu_80_p3, m_axis_tcp_tx_meta_TREADY_int_regslice)
    begin
                ap_block_state1_io <= ((tmp_nbreadreq_fu_80_p3 = ap_const_lv1_1) and (m_axis_tcp_tx_meta_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(tmp_reg_204, tmp_s_nbreadreq_fu_112_p3, txData_empty_n, m_axis_tcp_tx_meta_TREADY_int_regslice, m_axis_tcp_tx_data_TREADY_int_regslice)
    begin
                ap_block_state2 <= (((tmp_s_nbreadreq_fu_112_p3 = ap_const_lv1_1) and (m_axis_tcp_tx_data_TREADY_int_regslice = ap_const_logic_0)) or ((tmp_s_nbreadreq_fu_112_p3 = ap_const_lv1_1) and (txData_empty_n = ap_const_logic_0)) or ((tmp_reg_204 = ap_const_lv1_1) and (m_axis_tcp_tx_meta_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state2_io_assign_proc : process(tmp_reg_204, tmp_s_nbreadreq_fu_112_p3, m_axis_tcp_tx_meta_TREADY_int_regslice, m_axis_tcp_tx_data_TREADY_int_regslice)
    begin
                ap_block_state2_io <= (((tmp_s_nbreadreq_fu_112_p3 = ap_const_lv1_1) and (m_axis_tcp_tx_data_TREADY_int_regslice = ap_const_logic_0)) or ((tmp_reg_204 = ap_const_lv1_1) and (m_axis_tcp_tx_meta_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state3_assign_proc : process(tmp_s_reg_213, tmp_1_nbreadreq_fu_141_p6, regslice_both_m_axis_tcp_tx_meta_V_data_V_U_apdone_blk, regslice_both_m_axis_tcp_tx_data_V_data_V_U_apdone_blk, m_axis_tcp_tx_data_TREADY_int_regslice, s_axis_tcp_tx_status_TVALID_int_regslice)
    begin
                ap_block_state3 <= ((regslice_both_m_axis_tcp_tx_data_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_m_axis_tcp_tx_meta_V_data_V_U_apdone_blk = ap_const_logic_1) or ((tmp_1_nbreadreq_fu_141_p6 = ap_const_lv1_1) and (s_axis_tcp_tx_status_TVALID_int_regslice = ap_const_logic_0)) or ((tmp_s_reg_213 = ap_const_lv1_1) and (m_axis_tcp_tx_data_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state3_io_assign_proc : process(tmp_s_reg_213, m_axis_tcp_tx_data_TREADY_int_regslice)
    begin
                ap_block_state3_io <= ((tmp_s_reg_213 = ap_const_lv1_1) and (m_axis_tcp_tx_data_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, tmp_s_reg_213, tmp_1_nbreadreq_fu_141_p6, regslice_both_m_axis_tcp_tx_meta_V_data_V_U_apdone_blk, regslice_both_m_axis_tcp_tx_data_V_data_V_U_apdone_blk, ap_block_state3_io, m_axis_tcp_tx_data_TREADY_int_regslice, s_axis_tcp_tx_status_TVALID_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_m_axis_tcp_tx_data_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_m_axis_tcp_tx_meta_V_data_V_U_apdone_blk = ap_const_logic_1) or ((tmp_1_nbreadreq_fu_141_p6 = ap_const_lv1_1) and (s_axis_tcp_tx_status_TVALID_int_regslice = ap_const_logic_0)) or ((tmp_s_reg_213 = ap_const_lv1_1) and (m_axis_tcp_tx_data_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, tmp_s_reg_213, tmp_1_nbreadreq_fu_141_p6, regslice_both_m_axis_tcp_tx_meta_V_data_V_U_apdone_blk, regslice_both_m_axis_tcp_tx_data_V_data_V_U_apdone_blk, ap_block_state3_io, m_axis_tcp_tx_data_TREADY_int_regslice, s_axis_tcp_tx_status_TVALID_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_m_axis_tcp_tx_data_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_m_axis_tcp_tx_meta_V_data_V_U_apdone_blk = ap_const_logic_1) or ((tmp_1_nbreadreq_fu_141_p6 = ap_const_lv1_1) and (s_axis_tcp_tx_status_TVALID_int_regslice = ap_const_logic_0)) or ((tmp_s_reg_213 = ap_const_lv1_1) and (m_axis_tcp_tx_data_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    m_axis_tcp_tx_data_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, tmp_s_nbreadreq_fu_112_p3, ap_CS_fsm_state3, tmp_s_reg_213, m_axis_tcp_tx_data_TREADY_int_regslice)
    begin
        if ((((tmp_s_reg_213 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_s_nbreadreq_fu_112_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            m_axis_tcp_tx_data_TDATA_blk_n <= m_axis_tcp_tx_data_TREADY_int_regslice;
        else 
            m_axis_tcp_tx_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_tcp_tx_data_TDATA_int_regslice <= txData_dout(512 - 1 downto 0);
    m_axis_tcp_tx_data_TKEEP_int_regslice <= txData_dout(575 downto 512);
    m_axis_tcp_tx_data_TLAST_int_regslice <= txData_dout(576 downto 576);
    m_axis_tcp_tx_data_TVALID <= regslice_both_m_axis_tcp_tx_data_V_data_V_U_vld_out;

    m_axis_tcp_tx_data_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state2, tmp_reg_204, tmp_s_nbreadreq_fu_112_p3, txData_empty_n, ap_block_state2_io, m_axis_tcp_tx_meta_TREADY_int_regslice, m_axis_tcp_tx_data_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((tmp_s_nbreadreq_fu_112_p3 = ap_const_lv1_1) and (m_axis_tcp_tx_data_TREADY_int_regslice = ap_const_logic_0)) or ((tmp_s_nbreadreq_fu_112_p3 = ap_const_lv1_1) and (txData_empty_n = ap_const_logic_0)) or ((tmp_reg_204 = ap_const_lv1_1) and (m_axis_tcp_tx_meta_TREADY_int_regslice = ap_const_logic_0)))) and (tmp_s_nbreadreq_fu_112_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axis_tcp_tx_data_TVALID_int_regslice <= ap_const_logic_1;
        else 
            m_axis_tcp_tx_data_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    m_axis_tcp_tx_meta_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, tmp_nbreadreq_fu_80_p3, ap_CS_fsm_state2, tmp_reg_204, m_axis_tcp_tx_meta_TREADY_int_regslice)
    begin
        if ((((tmp_reg_204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_nbreadreq_fu_80_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            m_axis_tcp_tx_meta_TDATA_blk_n <= m_axis_tcp_tx_meta_TREADY_int_regslice;
        else 
            m_axis_tcp_tx_meta_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_tcp_tx_meta_TVALID <= regslice_both_m_axis_tcp_tx_meta_V_data_V_U_vld_out;

    m_axis_tcp_tx_meta_TVALID_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, tmp_nbreadreq_fu_80_p3, txMetaData_empty_n, ap_block_state1_io, m_axis_tcp_tx_meta_TREADY_int_regslice)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or ((txMetaData_empty_n = ap_const_logic_0) and (tmp_nbreadreq_fu_80_p3 = ap_const_lv1_1)) or ((tmp_nbreadreq_fu_80_p3 = ap_const_lv1_1) and (m_axis_tcp_tx_meta_TREADY_int_regslice = ap_const_logic_0)))) and (tmp_nbreadreq_fu_80_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axis_tcp_tx_meta_TVALID_int_regslice <= ap_const_logic_1;
        else 
            m_axis_tcp_tx_meta_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_tcp_tx_status_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, tmp_1_nbreadreq_fu_141_p6, s_axis_tcp_tx_status_TVALID_int_regslice)
    begin
        if (((tmp_1_nbreadreq_fu_141_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            s_axis_tcp_tx_status_TDATA_blk_n <= s_axis_tcp_tx_status_TVALID_int_regslice;
        else 
            s_axis_tcp_tx_status_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_axis_tcp_tx_status_TREADY <= regslice_both_s_axis_tcp_tx_status_V_data_V_U_ack_in;

    s_axis_tcp_tx_status_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state3, tmp_s_reg_213, tmp_1_nbreadreq_fu_141_p6, regslice_both_m_axis_tcp_tx_meta_V_data_V_U_apdone_blk, regslice_both_m_axis_tcp_tx_data_V_data_V_U_apdone_blk, ap_block_state3_io, m_axis_tcp_tx_data_TREADY_int_regslice, s_axis_tcp_tx_status_TVALID_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_m_axis_tcp_tx_data_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_m_axis_tcp_tx_meta_V_data_V_U_apdone_blk = ap_const_logic_1) or ((tmp_1_nbreadreq_fu_141_p6 = ap_const_lv1_1) and (s_axis_tcp_tx_status_TVALID_int_regslice = ap_const_logic_0)) or ((tmp_s_reg_213 = ap_const_lv1_1) and (m_axis_tcp_tx_data_TREADY_int_regslice = ap_const_logic_0)))) and (tmp_1_nbreadreq_fu_141_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            s_axis_tcp_tx_status_TREADY_int_regslice <= ap_const_logic_1;
        else 
            s_axis_tcp_tx_status_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_nbreadreq_fu_141_p6 <= (0=>(s_axis_tcp_tx_status_TVALID_int_regslice), others=>'-');
    tmp_nbreadreq_fu_80_p3 <= (0=>(txMetaData_empty_n), others=>'-');
    tmp_s_nbreadreq_fu_112_p3 <= (0=>(txData_empty_n), others=>'-');
    txData_dout <= ap_const_lv1024_lc_1;
    txData_empty_n <= ap_const_logic_1;
    txMetaData_empty_n <= ap_const_logic_1;
end behav;
