-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_recv_krnl_recvData_consumeData is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    nextRxPacketLength3_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    nextRxPacketLength3_empty_n : IN STD_LOGIC;
    nextRxPacketLength3_read : OUT STD_LOGIC;
    expRxBytePerSession_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    expRxBytePerSession_empty_n : IN STD_LOGIC;
    expRxBytePerSession_read : OUT STD_LOGIC;
    s_axis_tcp_rx_meta_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    s_axis_tcp_rx_meta_TVALID : IN STD_LOGIC;
    s_axis_tcp_rx_meta_TREADY : OUT STD_LOGIC;
    s_axis_tcp_rx_meta_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    s_axis_tcp_rx_meta_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    s_axis_tcp_rx_meta_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tcp_rx_data_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    s_axis_tcp_rx_data_TVALID : IN STD_LOGIC;
    s_axis_tcp_rx_data_TREADY : OUT STD_LOGIC;
    s_axis_tcp_rx_data_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_tcp_rx_data_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_tcp_rx_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_data_net_out_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    s_data_net_out_full_n : IN STD_LOGIC;
    s_data_net_out_write : OUT STD_LOGIC );
end;


architecture behav of hls_recv_krnl_recvData_consumeData is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal nextRxPacketLength3_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal and_ln1276_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal expRxBytePerSession_blk_n : STD_LOGIC;
    signal s_axis_tcp_rx_meta_TDATA_blk_n : STD_LOGIC;
    signal s_axis_tcp_rx_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal s_data_net_out_blk_n : STD_LOGIC;
    signal expRxBytePerSession_read_reg_194 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1276_reg_199 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_203 : STD_LOGIC_VECTOR (15 downto 0);
    signal rxByteCnt_V_fu_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal rxByteCnt_V_3_fu_167_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_sig_allocacmp_rxByteCnt_V_4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_nbreadreq_fu_82_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_nbreadreq_fu_96_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state3 : BOOLEAN;
    signal zext_ln208_fu_164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lastWord_fu_157_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_181_p2 = ap_const_lv1_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    rxByteCnt_V_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (expRxBytePerSession_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                rxByteCnt_V_fu_72 <= ap_const_lv64_0;
            elsif (((ap_const_lv1_1 = and_ln1276_reg_199) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rxByteCnt_V_fu_72 <= rxByteCnt_V_3_fu_167_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                and_ln1276_reg_199 <= and_ln1276_fu_146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                expRxBytePerSession_read_reg_194 <= expRxBytePerSession_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln1276_fu_146_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_10_reg_203 <= nextRxPacketLength3_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, nextRxPacketLength3_empty_n, expRxBytePerSession_empty_n, s_axis_tcp_rx_meta_TVALID, s_axis_tcp_rx_data_TVALID, s_data_net_out_full_n, ap_CS_fsm_state2, and_ln1276_fu_146_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, lastWord_fu_157_p1, icmp_ln878_fu_181_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (expRxBytePerSession_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((ap_const_lv1_1 = and_ln1276_fu_146_p2) and (nextRxPacketLength3_empty_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln1276_fu_146_p2) and (s_axis_tcp_rx_meta_TVALID = ap_const_logic_0)))) and (ap_const_lv1_1 = and_ln1276_fu_146_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not((((ap_const_lv1_1 = and_ln1276_fu_146_p2) and (nextRxPacketLength3_empty_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln1276_fu_146_p2) and (s_axis_tcp_rx_meta_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = and_ln1276_fu_146_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((s_data_net_out_full_n = ap_const_logic_0) or (s_axis_tcp_rx_data_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (lastWord_fu_157_p1 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((s_data_net_out_full_n = ap_const_logic_0) or (s_axis_tcp_rx_data_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (lastWord_fu_157_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_181_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    and_ln1276_fu_146_p2 <= (tmp_nbreadreq_fu_82_p6 and tmp_i_i_nbreadreq_fu_96_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, expRxBytePerSession_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (expRxBytePerSession_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(nextRxPacketLength3_empty_n, s_axis_tcp_rx_meta_TVALID, and_ln1276_fu_146_p2)
    begin
                ap_block_state2 <= (((ap_const_lv1_1 = and_ln1276_fu_146_p2) and (nextRxPacketLength3_empty_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln1276_fu_146_p2) and (s_axis_tcp_rx_meta_TVALID = ap_const_logic_0)));
    end process;


    ap_block_state3_assign_proc : process(s_axis_tcp_rx_data_TVALID, s_data_net_out_full_n)
    begin
                ap_block_state3 <= ((s_data_net_out_full_n = ap_const_logic_0) or (s_axis_tcp_rx_data_TVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4, icmp_ln878_fu_181_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_181_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln878_fu_181_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_181_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_rxByteCnt_V_4_assign_proc : process(and_ln1276_reg_199, rxByteCnt_V_fu_72, rxByteCnt_V_3_fu_167_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = and_ln1276_reg_199) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_sig_allocacmp_rxByteCnt_V_4 <= rxByteCnt_V_3_fu_167_p2;
        else 
            ap_sig_allocacmp_rxByteCnt_V_4 <= rxByteCnt_V_fu_72;
        end if; 
    end process;


    expRxBytePerSession_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, expRxBytePerSession_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            expRxBytePerSession_blk_n <= expRxBytePerSession_empty_n;
        else 
            expRxBytePerSession_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    expRxBytePerSession_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, expRxBytePerSession_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (expRxBytePerSession_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            expRxBytePerSession_read <= ap_const_logic_1;
        else 
            expRxBytePerSession_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln878_fu_181_p2 <= "1" when (unsigned(ap_sig_allocacmp_rxByteCnt_V_4) < unsigned(expRxBytePerSession_read_reg_194)) else "0";
    lastWord_fu_157_p1 <= s_axis_tcp_rx_data_TLAST;

    nextRxPacketLength3_blk_n_assign_proc : process(nextRxPacketLength3_empty_n, ap_CS_fsm_state2, and_ln1276_fu_146_p2)
    begin
        if (((ap_const_lv1_1 = and_ln1276_fu_146_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            nextRxPacketLength3_blk_n <= nextRxPacketLength3_empty_n;
        else 
            nextRxPacketLength3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    nextRxPacketLength3_read_assign_proc : process(nextRxPacketLength3_empty_n, s_axis_tcp_rx_meta_TVALID, ap_CS_fsm_state2, and_ln1276_fu_146_p2)
    begin
        if ((not((((ap_const_lv1_1 = and_ln1276_fu_146_p2) and (nextRxPacketLength3_empty_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln1276_fu_146_p2) and (s_axis_tcp_rx_meta_TVALID = ap_const_logic_0)))) and (ap_const_lv1_1 = and_ln1276_fu_146_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            nextRxPacketLength3_read <= ap_const_logic_1;
        else 
            nextRxPacketLength3_read <= ap_const_logic_0;
        end if; 
    end process;

    rxByteCnt_V_3_fu_167_p2 <= std_logic_vector(unsigned(rxByteCnt_V_fu_72) + unsigned(zext_ln208_fu_164_p1));

    s_axis_tcp_rx_data_TDATA_blk_n_assign_proc : process(s_axis_tcp_rx_data_TVALID, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_axis_tcp_rx_data_TDATA_blk_n <= s_axis_tcp_rx_data_TVALID;
        else 
            s_axis_tcp_rx_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_axis_tcp_rx_data_TREADY_assign_proc : process(s_axis_tcp_rx_data_TVALID, s_data_net_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((s_data_net_out_full_n = ap_const_logic_0) or (s_axis_tcp_rx_data_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            s_axis_tcp_rx_data_TREADY <= ap_const_logic_1;
        else 
            s_axis_tcp_rx_data_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_tcp_rx_meta_TDATA_blk_n_assign_proc : process(s_axis_tcp_rx_meta_TVALID, ap_CS_fsm_state2, and_ln1276_fu_146_p2)
    begin
        if (((ap_const_lv1_1 = and_ln1276_fu_146_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            s_axis_tcp_rx_meta_TDATA_blk_n <= s_axis_tcp_rx_meta_TVALID;
        else 
            s_axis_tcp_rx_meta_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_axis_tcp_rx_meta_TREADY_assign_proc : process(nextRxPacketLength3_empty_n, s_axis_tcp_rx_meta_TVALID, ap_CS_fsm_state2, and_ln1276_fu_146_p2)
    begin
        if ((not((((ap_const_lv1_1 = and_ln1276_fu_146_p2) and (nextRxPacketLength3_empty_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln1276_fu_146_p2) and (s_axis_tcp_rx_meta_TVALID = ap_const_logic_0)))) and (ap_const_lv1_1 = and_ln1276_fu_146_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            s_axis_tcp_rx_meta_TREADY <= ap_const_logic_1;
        else 
            s_axis_tcp_rx_meta_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    s_data_net_out_blk_n_assign_proc : process(s_data_net_out_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_data_net_out_blk_n <= s_data_net_out_full_n;
        else 
            s_data_net_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_data_net_out_din <= s_axis_tcp_rx_data_TDATA;

    s_data_net_out_write_assign_proc : process(s_axis_tcp_rx_data_TVALID, s_data_net_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((s_data_net_out_full_n = ap_const_logic_0) or (s_axis_tcp_rx_data_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            s_data_net_out_write <= ap_const_logic_1;
        else 
            s_data_net_out_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_i_i_nbreadreq_fu_96_p3 <= (0=>(nextRxPacketLength3_empty_n), others=>'-');
    tmp_nbreadreq_fu_82_p6 <= (0=>(s_axis_tcp_rx_meta_TVALID), others=>'-');
    zext_ln208_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_203),64));
end behav;
