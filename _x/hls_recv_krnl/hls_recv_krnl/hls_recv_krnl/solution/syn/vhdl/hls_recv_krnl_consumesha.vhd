-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_recv_krnl_consumesha is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ComputeWordCnt_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ComputeWordCnt_loc_empty_n : IN STD_LOGIC;
    ComputeWordCnt_loc_read : OUT STD_LOGIC;
    endDigestStrm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    endDigestStrm_empty_n : IN STD_LOGIC;
    endDigestStrm_read : OUT STD_LOGIC;
    digestStrm_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    digestStrm_empty_n : IN STD_LOGIC;
    digestStrm_read : OUT STD_LOGIC );
end;


architecture behav of hls_recv_krnl_consumesha is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ComputeWordCnt_loc_blk_n : STD_LOGIC;
    signal endDigestStrm_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln878_fu_87_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_end_1_phi_fu_74_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal digestStrm_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal end_1_reg_71 : STD_LOGIC_VECTOR (0 downto 0);
    signal ComputeWordCnt_loc_read_reg_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_3_fu_81_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_3_reg_97 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_22_reg_111 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal i_V_reg_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (endDigestStrm_empty_n = ap_const_logic_0))) and (icmp_ln878_fu_87_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (endDigestStrm_empty_n = ap_const_logic_0))) and (icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (endDigestStrm_empty_n = ap_const_logic_0))) and (icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    end_1_reg_71_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((end_1_reg_71 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                end_1_reg_71 <= tmp_22_reg_111;
            elsif ((not(((icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (endDigestStrm_empty_n = ap_const_logic_0))) and (icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                end_1_reg_71 <= endDigestStrm_dout;
            end if; 
        end if;
    end process;

    i_V_reg_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_V_reg_60 <= i_V_3_reg_97;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ComputeWordCnt_loc_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_V_reg_60 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                ComputeWordCnt_loc_read_reg_92 <= ComputeWordCnt_loc_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (endDigestStrm_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_V_3_reg_97 <= i_V_3_fu_81_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_end_1_phi_fu_74_p4 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_22_reg_111 <= endDigestStrm_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ComputeWordCnt_loc_empty_n, endDigestStrm_empty_n, ap_CS_fsm_state2, icmp_ln878_fu_87_p2, ap_enable_reg_pp0_iter0, ap_phi_mux_end_1_phi_fu_74_p4, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ComputeWordCnt_loc_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (endDigestStrm_empty_n = ap_const_logic_0))) and (icmp_ln878_fu_87_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (endDigestStrm_empty_n = ap_const_logic_0))) and (icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_phi_mux_end_1_phi_fu_74_p4 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_phi_mux_end_1_phi_fu_74_p4 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    ComputeWordCnt_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ComputeWordCnt_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ComputeWordCnt_loc_blk_n <= ComputeWordCnt_loc_empty_n;
        else 
            ComputeWordCnt_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ComputeWordCnt_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ComputeWordCnt_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ComputeWordCnt_loc_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ComputeWordCnt_loc_read <= ap_const_logic_1;
        else 
            ComputeWordCnt_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(endDigestStrm_empty_n, digestStrm_empty_n, ap_enable_reg_pp0_iter0, ap_phi_mux_end_1_phi_fu_74_p4, ap_enable_reg_pp0_iter1, end_1_reg_71)
    begin
                ap_block_pp0_stage0_11001 <= (((end_1_reg_71 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (digestStrm_empty_n = ap_const_logic_0)) or ((ap_phi_mux_end_1_phi_fu_74_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (endDigestStrm_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(endDigestStrm_empty_n, digestStrm_empty_n, ap_enable_reg_pp0_iter0, ap_phi_mux_end_1_phi_fu_74_p4, ap_enable_reg_pp0_iter1, end_1_reg_71)
    begin
                ap_block_pp0_stage0_subdone <= (((end_1_reg_71 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (digestStrm_empty_n = ap_const_logic_0)) or ((ap_phi_mux_end_1_phi_fu_74_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (endDigestStrm_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, ComputeWordCnt_loc_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ComputeWordCnt_loc_empty_n) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(endDigestStrm_empty_n, icmp_ln878_fu_87_p2)
    begin
                ap_block_state2 <= ((icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (endDigestStrm_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter0_assign_proc : process(endDigestStrm_empty_n, ap_phi_mux_end_1_phi_fu_74_p4)
    begin
                ap_block_state3_pp0_stage0_iter0 <= ((ap_phi_mux_end_1_phi_fu_74_p4 = ap_const_lv1_0) and (endDigestStrm_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(digestStrm_empty_n, end_1_reg_71)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((end_1_reg_71 = ap_const_lv1_0) and (digestStrm_empty_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(ap_phi_mux_end_1_phi_fu_74_p4)
    begin
        if ((ap_phi_mux_end_1_phi_fu_74_p4 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, endDigestStrm_empty_n, ap_CS_fsm_state2, icmp_ln878_fu_87_p2)
    begin
        if ((not(((icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (endDigestStrm_empty_n = ap_const_logic_0))) and (icmp_ln878_fu_87_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_end_1_phi_fu_74_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, end_1_reg_71, tmp_22_reg_111)
    begin
        if (((end_1_reg_71 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_end_1_phi_fu_74_p4 <= tmp_22_reg_111;
        else 
            ap_phi_mux_end_1_phi_fu_74_p4 <= end_1_reg_71;
        end if; 
    end process;


    ap_ready_assign_proc : process(endDigestStrm_empty_n, ap_CS_fsm_state2, icmp_ln878_fu_87_p2)
    begin
        if ((not(((icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (endDigestStrm_empty_n = ap_const_logic_0))) and (icmp_ln878_fu_87_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    digestStrm_blk_n_assign_proc : process(digestStrm_empty_n, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, end_1_reg_71)
    begin
        if (((end_1_reg_71 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            digestStrm_blk_n <= digestStrm_empty_n;
        else 
            digestStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    digestStrm_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, end_1_reg_71, ap_block_pp0_stage0_11001)
    begin
        if (((end_1_reg_71 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            digestStrm_read <= ap_const_logic_1;
        else 
            digestStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    endDigestStrm_blk_n_assign_proc : process(endDigestStrm_empty_n, ap_CS_fsm_state2, icmp_ln878_fu_87_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_phi_mux_end_1_phi_fu_74_p4)
    begin
        if ((((ap_phi_mux_end_1_phi_fu_74_p4 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            endDigestStrm_blk_n <= endDigestStrm_empty_n;
        else 
            endDigestStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    endDigestStrm_read_assign_proc : process(endDigestStrm_empty_n, ap_CS_fsm_state2, icmp_ln878_fu_87_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_phi_mux_end_1_phi_fu_74_p4, ap_block_pp0_stage0_11001)
    begin
        if (((not(((icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (endDigestStrm_empty_n = ap_const_logic_0))) and (icmp_ln878_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_phi_mux_end_1_phi_fu_74_p4 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            endDigestStrm_read <= ap_const_logic_1;
        else 
            endDigestStrm_read <= ap_const_logic_0;
        end if; 
    end process;

    i_V_3_fu_81_p2 <= std_logic_vector(unsigned(i_V_reg_60) + unsigned(ap_const_lv32_1));
    icmp_ln878_fu_87_p2 <= "1" when (i_V_reg_60 = ComputeWordCnt_loc_read_reg_92) else "0";
end behav;
