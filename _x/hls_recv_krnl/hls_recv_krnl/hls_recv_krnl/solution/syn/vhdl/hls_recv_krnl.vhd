-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_recv_krnl is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axis_udp_rx_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    s_axis_udp_rx_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_udp_rx_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_udp_rx_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_udp_tx_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_udp_tx_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_udp_tx_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_udp_tx_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_udp_rx_meta_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    s_axis_udp_rx_meta_TKEEP : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axis_udp_rx_meta_TSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axis_udp_rx_meta_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_udp_tx_meta_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axis_udp_tx_meta_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axis_udp_tx_meta_TSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axis_udp_tx_meta_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_tcp_listen_port_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axis_tcp_listen_port_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axis_tcp_listen_port_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axis_tcp_listen_port_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tcp_port_status_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_tcp_port_status_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tcp_port_status_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tcp_port_status_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_tcp_open_connection_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tcp_open_connection_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_tcp_open_connection_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_tcp_open_connection_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tcp_open_status_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    s_axis_tcp_open_status_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    s_axis_tcp_open_status_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    s_axis_tcp_open_status_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_tcp_close_connection_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axis_tcp_close_connection_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axis_tcp_close_connection_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axis_tcp_close_connection_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tcp_notification_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    s_axis_tcp_notification_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    s_axis_tcp_notification_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    s_axis_tcp_notification_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_tcp_read_pkg_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axis_tcp_read_pkg_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axis_tcp_read_pkg_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axis_tcp_read_pkg_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tcp_rx_meta_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    s_axis_tcp_rx_meta_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    s_axis_tcp_rx_meta_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    s_axis_tcp_rx_meta_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tcp_rx_data_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    s_axis_tcp_rx_data_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_tcp_rx_data_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_tcp_rx_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_tcp_tx_meta_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axis_tcp_tx_meta_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axis_tcp_tx_meta_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axis_tcp_tx_meta_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_tcp_tx_data_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_tcp_tx_data_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tcp_tx_data_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tcp_tx_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tcp_tx_status_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_tcp_tx_status_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_tcp_tx_status_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_tcp_tx_status_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_tcp_listen_port_TVALID : OUT STD_LOGIC;
    m_axis_tcp_listen_port_TREADY : IN STD_LOGIC;
    s_axis_tcp_port_status_TVALID : IN STD_LOGIC;
    s_axis_tcp_port_status_TREADY : OUT STD_LOGIC;
    s_axis_tcp_notification_TVALID : IN STD_LOGIC;
    s_axis_tcp_notification_TREADY : OUT STD_LOGIC;
    m_axis_tcp_read_pkg_TVALID : OUT STD_LOGIC;
    m_axis_tcp_read_pkg_TREADY : IN STD_LOGIC;
    s_axis_tcp_rx_meta_TVALID : IN STD_LOGIC;
    s_axis_tcp_rx_meta_TREADY : OUT STD_LOGIC;
    s_axis_tcp_rx_data_TVALID : IN STD_LOGIC;
    s_axis_tcp_rx_data_TREADY : OUT STD_LOGIC;
    m_axis_tcp_open_connection_TVALID : OUT STD_LOGIC;
    m_axis_tcp_open_connection_TREADY : IN STD_LOGIC;
    s_axis_tcp_open_status_TVALID : IN STD_LOGIC;
    s_axis_tcp_open_status_TREADY : OUT STD_LOGIC;
    m_axis_tcp_tx_meta_TVALID : OUT STD_LOGIC;
    m_axis_tcp_tx_meta_TREADY : IN STD_LOGIC;
    m_axis_tcp_tx_data_TVALID : OUT STD_LOGIC;
    m_axis_tcp_tx_data_TREADY : IN STD_LOGIC;
    s_axis_tcp_tx_status_TVALID : IN STD_LOGIC;
    s_axis_tcp_tx_status_TREADY : OUT STD_LOGIC;
    s_axis_udp_rx_TVALID : IN STD_LOGIC;
    s_axis_udp_rx_TREADY : OUT STD_LOGIC;
    m_axis_udp_tx_TVALID : OUT STD_LOGIC;
    m_axis_udp_tx_TREADY : IN STD_LOGIC;
    s_axis_udp_rx_meta_TVALID : IN STD_LOGIC;
    s_axis_udp_rx_meta_TREADY : OUT STD_LOGIC;
    m_axis_udp_tx_meta_TVALID : OUT STD_LOGIC;
    m_axis_udp_tx_meta_TREADY : IN STD_LOGIC;
    m_axis_tcp_close_connection_TVALID : OUT STD_LOGIC;
    m_axis_tcp_close_connection_TREADY : IN STD_LOGIC );
end;


architecture behav of hls_recv_krnl is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_recv_krnl_hls_recv_krnl,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=51075,HLS_SYN_LUT=237929,HLS_VERSION=2020_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal useConn : STD_LOGIC_VECTOR (31 downto 0);
    signal basePort : STD_LOGIC_VECTOR (31 downto 0);
    signal delay : STD_LOGIC_VECTOR (31 downto 0);
    signal expectedRxByteCnt : STD_LOGIC_VECTOR (63 downto 0);
    signal out_time : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal hls_recv_krnl_entry3_U0_ap_start : STD_LOGIC;
    signal hls_recv_krnl_entry3_U0_ap_done : STD_LOGIC;
    signal hls_recv_krnl_entry3_U0_ap_continue : STD_LOGIC;
    signal hls_recv_krnl_entry3_U0_ap_idle : STD_LOGIC;
    signal hls_recv_krnl_entry3_U0_ap_ready : STD_LOGIC;
    signal hls_recv_krnl_entry3_U0_start_out : STD_LOGIC;
    signal hls_recv_krnl_entry3_U0_start_write : STD_LOGIC;
    signal hls_recv_krnl_entry3_U0_useConn_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal hls_recv_krnl_entry3_U0_useConn_out_write : STD_LOGIC;
    signal hls_recv_krnl_entry3_U0_basePort_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal hls_recv_krnl_entry3_U0_basePort_out_write : STD_LOGIC;
    signal hls_recv_krnl_entry3_U0_expectedRxByteCnt_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal hls_recv_krnl_entry3_U0_expectedRxByteCnt_out_write : STD_LOGIC;
    signal hls_recv_krnl_entry3_U0_out_time_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal hls_recv_krnl_entry3_U0_out_time_out_write : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_ap_start : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_start_full_n : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_ap_done : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_ap_continue : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_ap_idle : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_ap_ready : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_start_out : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_start_write : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_useConn_read : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_basePort_read : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_expectedRxByteCnt_read : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_out_time_read : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_useConn_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal hls_recv_krnl_entry45_U0_useConn_out_write : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_basePort_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal hls_recv_krnl_entry45_U0_basePort_out_write : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_expectedRxByteCnt_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal hls_recv_krnl_entry45_U0_expectedRxByteCnt_out_write : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_expectedRxByteCnt_out1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal hls_recv_krnl_entry45_U0_expectedRxByteCnt_out1_write : STD_LOGIC;
    signal hls_recv_krnl_entry45_U0_out_time_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal hls_recv_krnl_entry45_U0_out_time_out_write : STD_LOGIC;
    signal Block_split11_proc_U0_ap_start : STD_LOGIC;
    signal Block_split11_proc_U0_ap_done : STD_LOGIC;
    signal Block_split11_proc_U0_ap_continue : STD_LOGIC;
    signal Block_split11_proc_U0_ap_idle : STD_LOGIC;
    signal Block_split11_proc_U0_ap_ready : STD_LOGIC;
    signal Block_split11_proc_U0_start_out : STD_LOGIC;
    signal Block_split11_proc_U0_start_write : STD_LOGIC;
    signal Block_split11_proc_U0_expectedRxByteCnt_read : STD_LOGIC;
    signal Block_split11_proc_U0_ComputeWordCnt_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_split11_proc_U0_ComputeWordCnt_out_out_write : STD_LOGIC;
    signal listenPorts_U0_basePort_read : STD_LOGIC;
    signal listenPorts_U0_useConn_read : STD_LOGIC;
    signal listenPorts_U0_m_axis_tcp_listen_port_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal listenPorts_U0_m_axis_tcp_listen_port_TKEEP : STD_LOGIC_VECTOR (1 downto 0);
    signal listenPorts_U0_m_axis_tcp_listen_port_TSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal listenPorts_U0_m_axis_tcp_listen_port_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal listenPorts_U0_ap_start : STD_LOGIC;
    signal listenPorts_U0_m_axis_tcp_listen_port_TVALID : STD_LOGIC;
    signal listenPorts_U0_ap_done : STD_LOGIC;
    signal listenPorts_U0_s_axis_tcp_port_status_TREADY : STD_LOGIC;
    signal listenPorts_U0_ap_ready : STD_LOGIC;
    signal listenPorts_U0_ap_idle : STD_LOGIC;
    signal listenPorts_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal recvData_U0_expRxBytePerSession_read : STD_LOGIC;
    signal recvData_U0_m_axis_tcp_read_pkg_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal recvData_U0_m_axis_tcp_read_pkg_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal recvData_U0_m_axis_tcp_read_pkg_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal recvData_U0_m_axis_tcp_read_pkg_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal recvData_U0_s_data_net_out_din : STD_LOGIC_VECTOR (511 downto 0);
    signal recvData_U0_s_data_net_out_write : STD_LOGIC;
    signal recvData_U0_s_axis_tcp_notification_TREADY : STD_LOGIC;
    signal recvData_U0_m_axis_tcp_read_pkg_TVALID : STD_LOGIC;
    signal recvData_U0_ap_start : STD_LOGIC;
    signal recvData_U0_ap_done : STD_LOGIC;
    signal recvData_U0_s_axis_tcp_rx_meta_TREADY : STD_LOGIC;
    signal recvData_U0_s_axis_tcp_rx_data_TREADY : STD_LOGIC;
    signal recvData_U0_ap_ready : STD_LOGIC;
    signal recvData_U0_ap_idle : STD_LOGIC;
    signal recvData_U0_ap_continue : STD_LOGIC;
    signal backgroundclock_U0_ap_start : STD_LOGIC;
    signal backgroundclock_U0_ap_done : STD_LOGIC;
    signal backgroundclock_U0_ap_continue : STD_LOGIC;
    signal backgroundclock_U0_ap_idle : STD_LOGIC;
    signal backgroundclock_U0_ap_ready : STD_LOGIC;
    signal backgroundclock_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal backgroundclock_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal backgroundclock_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal backgroundclock_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal backgroundclock_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal backgroundclock_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal backgroundclock_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal backgroundclock_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal backgroundclock_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal backgroundclock_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal backgroundclock_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal backgroundclock_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal backgroundclock_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal backgroundclock_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal backgroundclock_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal backgroundclock_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal backgroundclock_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal backgroundclock_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal backgroundclock_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal backgroundclock_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal backgroundclock_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal backgroundclock_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal backgroundclock_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal backgroundclock_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal backgroundclock_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal backgroundclock_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal backgroundclock_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal backgroundclock_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal backgroundclock_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal backgroundclock_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal backgroundclock_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal backgroundclock_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal backgroundclock_U0_timesha_read : STD_LOGIC;
    signal backgroundclock_U0_timeaes_read : STD_LOGIC;
    signal backgroundclock_U0_out_time_read : STD_LOGIC;
    signal partition_U0_ap_start : STD_LOGIC;
    signal partition_U0_start_full_n : STD_LOGIC;
    signal partition_U0_start_out : STD_LOGIC;
    signal partition_U0_start_write : STD_LOGIC;
    signal partition_U0_ComputeWordCnt_loc_read : STD_LOGIC;
    signal partition_U0_ComputeWordCnt_loc_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal partition_U0_ComputeWordCnt_loc_out_write : STD_LOGIC;
    signal partition_U0_ComputeWordCnt_loc_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal partition_U0_ComputeWordCnt_loc_out1_write : STD_LOGIC;
    signal partition_U0_s_data_net_out_read : STD_LOGIC;
    signal partition_U0_s_data_cal_din : STD_LOGIC_VECTOR (511 downto 0);
    signal partition_U0_s_data_cal_write : STD_LOGIC;
    signal partition_U0_s_data_out_din : STD_LOGIC_VECTOR (511 downto 0);
    signal partition_U0_s_data_out_write : STD_LOGIC;
    signal partition_U0_ap_done : STD_LOGIC;
    signal partition_U0_ap_ready : STD_LOGIC;
    signal partition_U0_ap_idle : STD_LOGIC;
    signal partition_U0_ap_continue : STD_LOGIC;
    signal consumetrans_U0_ap_start : STD_LOGIC;
    signal consumetrans_U0_ap_done : STD_LOGIC;
    signal consumetrans_U0_ap_continue : STD_LOGIC;
    signal consumetrans_U0_ap_idle : STD_LOGIC;
    signal consumetrans_U0_ap_ready : STD_LOGIC;
    signal consumetrans_U0_ComputeWordCnt_loc_read : STD_LOGIC;
    signal consumetrans_U0_s_data_out_read : STD_LOGIC;
    signal prepare_sha_U0_ap_start : STD_LOGIC;
    signal prepare_sha_U0_ap_done : STD_LOGIC;
    signal prepare_sha_U0_ap_continue : STD_LOGIC;
    signal prepare_sha_U0_ap_idle : STD_LOGIC;
    signal prepare_sha_U0_ap_ready : STD_LOGIC;
    signal prepare_sha_U0_start_out : STD_LOGIC;
    signal prepare_sha_U0_start_write : STD_LOGIC;
    signal prepare_sha_U0_ComputeWordCnt_loc_read : STD_LOGIC;
    signal prepare_sha_U0_ComputeWordCnt_loc_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal prepare_sha_U0_ComputeWordCnt_loc_out_write : STD_LOGIC;
    signal prepare_sha_U0_s_data_cal_read : STD_LOGIC;
    signal prepare_sha_U0_endMsgLenStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal prepare_sha_U0_endMsgLenStrm_write : STD_LOGIC;
    signal prepare_sha_U0_msgLenStrm_din : STD_LOGIC_VECTOR (127 downto 0);
    signal prepare_sha_U0_msgLenStrm_write : STD_LOGIC;
    signal prepare_sha_U0_msgStrm_din : STD_LOGIC_VECTOR (63 downto 0);
    signal prepare_sha_U0_msgStrm_write : STD_LOGIC;
    signal prepare_sha_U0_sha_in_din : STD_LOGIC_VECTOR (511 downto 0);
    signal prepare_sha_U0_sha_in_write : STD_LOGIC;
    signal mysha_U0_ap_start : STD_LOGIC;
    signal mysha_U0_start_full_n : STD_LOGIC;
    signal mysha_U0_ap_done : STD_LOGIC;
    signal mysha_U0_ap_continue : STD_LOGIC;
    signal mysha_U0_ap_idle : STD_LOGIC;
    signal mysha_U0_ap_ready : STD_LOGIC;
    signal mysha_U0_start_out : STD_LOGIC;
    signal mysha_U0_start_write : STD_LOGIC;
    signal mysha_U0_timesha_din : STD_LOGIC_VECTOR (31 downto 0);
    signal mysha_U0_timesha_write : STD_LOGIC;
    signal mysha_U0_ComputeWordCnt_loc_read : STD_LOGIC;
    signal mysha_U0_ComputeWordCnt_loc_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal mysha_U0_ComputeWordCnt_loc_out_write : STD_LOGIC;
    signal mysha_U0_ComputeWordCnt_loc_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal mysha_U0_ComputeWordCnt_loc_out1_write : STD_LOGIC;
    signal mysha_U0_sha_in_read : STD_LOGIC;
    signal mysha_U0_sha_out_din : STD_LOGIC_VECTOR (511 downto 0);
    signal mysha_U0_sha_out_write : STD_LOGIC;
    signal mysha_U0_endMsgLenStrm_read : STD_LOGIC;
    signal mysha_U0_msgLenStrm_read : STD_LOGIC;
    signal mysha_U0_msgStrm_read : STD_LOGIC;
    signal mysha_U0_digestStrm_din : STD_LOGIC_VECTOR (255 downto 0);
    signal mysha_U0_digestStrm_write : STD_LOGIC;
    signal mysha_U0_endDigestStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal mysha_U0_endDigestStrm_write : STD_LOGIC;
    signal consumesha_U0_ap_start : STD_LOGIC;
    signal consumesha_U0_ap_done : STD_LOGIC;
    signal consumesha_U0_ap_continue : STD_LOGIC;
    signal consumesha_U0_ap_idle : STD_LOGIC;
    signal consumesha_U0_ap_ready : STD_LOGIC;
    signal consumesha_U0_ComputeWordCnt_loc_read : STD_LOGIC;
    signal consumesha_U0_endDigestStrm_read : STD_LOGIC;
    signal consumesha_U0_digestStrm_read : STD_LOGIC;
    signal prepare_aes_U0_ap_start : STD_LOGIC;
    signal prepare_aes_U0_ap_done : STD_LOGIC;
    signal prepare_aes_U0_ap_continue : STD_LOGIC;
    signal prepare_aes_U0_ap_idle : STD_LOGIC;
    signal prepare_aes_U0_ap_ready : STD_LOGIC;
    signal prepare_aes_U0_start_out : STD_LOGIC;
    signal prepare_aes_U0_start_write : STD_LOGIC;
    signal prepare_aes_U0_ciphertextStrm_din : STD_LOGIC_VECTOR (127 downto 0);
    signal prepare_aes_U0_ciphertextStrm_write : STD_LOGIC;
    signal prepare_aes_U0_endCiphertextStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal prepare_aes_U0_endCiphertextStrm_write : STD_LOGIC;
    signal prepare_aes_U0_cipherkeyStrm_din : STD_LOGIC_VECTOR (255 downto 0);
    signal prepare_aes_U0_cipherkeyStrm_write : STD_LOGIC;
    signal prepare_aes_U0_IVStrm_din : STD_LOGIC_VECTOR (127 downto 0);
    signal prepare_aes_U0_IVStrm_write : STD_LOGIC;
    signal prepare_aes_U0_ComputeWordCnt_loc_read : STD_LOGIC;
    signal prepare_aes_U0_ComputeWordCnt_loc_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal prepare_aes_U0_ComputeWordCnt_loc_out_write : STD_LOGIC;
    signal prepare_aes_U0_sha_out_read : STD_LOGIC;
    signal myaes_U0_ap_start : STD_LOGIC;
    signal myaes_U0_ap_done : STD_LOGIC;
    signal myaes_U0_ap_continue : STD_LOGIC;
    signal myaes_U0_ap_idle : STD_LOGIC;
    signal myaes_U0_ap_ready : STD_LOGIC;
    signal myaes_U0_start_out : STD_LOGIC;
    signal myaes_U0_start_write : STD_LOGIC;
    signal myaes_U0_ciphertextStrm_read : STD_LOGIC;
    signal myaes_U0_endCiphertextStrm_read : STD_LOGIC;
    signal myaes_U0_cipherkeyStrm_read : STD_LOGIC;
    signal myaes_U0_IVStrm_read : STD_LOGIC;
    signal myaes_U0_plaintextStrm_din : STD_LOGIC_VECTOR (127 downto 0);
    signal myaes_U0_plaintextStrm_write : STD_LOGIC;
    signal myaes_U0_endPlaintextStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal myaes_U0_endPlaintextStrm_write : STD_LOGIC;
    signal myaes_U0_timeaes_din : STD_LOGIC_VECTOR (31 downto 0);
    signal myaes_U0_timeaes_write : STD_LOGIC;
    signal myaes_U0_ComputeWordCnt_loc_read : STD_LOGIC;
    signal myaes_U0_ComputeWordCnt_loc_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal myaes_U0_ComputeWordCnt_loc_out_write : STD_LOGIC;
    signal consumeaes_U0_ap_start : STD_LOGIC;
    signal consumeaes_U0_ap_done : STD_LOGIC;
    signal consumeaes_U0_ap_continue : STD_LOGIC;
    signal consumeaes_U0_ap_idle : STD_LOGIC;
    signal consumeaes_U0_ap_ready : STD_LOGIC;
    signal consumeaes_U0_plaintextStrm_read : STD_LOGIC;
    signal consumeaes_U0_endPlaintextStrm_read : STD_LOGIC;
    signal consumeaes_U0_ComputeWordCnt_loc_read : STD_LOGIC;
    signal tie_off_tcp_open_connection_U0_ap_start : STD_LOGIC;
    signal tie_off_tcp_open_connection_U0_ap_done : STD_LOGIC;
    signal tie_off_tcp_open_connection_U0_ap_continue : STD_LOGIC;
    signal tie_off_tcp_open_connection_U0_ap_idle : STD_LOGIC;
    signal tie_off_tcp_open_connection_U0_ap_ready : STD_LOGIC;
    signal tie_off_tcp_open_connection_U0_m_axis_tcp_open_connection_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal tie_off_tcp_open_connection_U0_m_axis_tcp_open_connection_TVALID : STD_LOGIC;
    signal tie_off_tcp_open_connection_U0_m_axis_tcp_open_connection_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal tie_off_tcp_open_connection_U0_m_axis_tcp_open_connection_TSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal tie_off_tcp_open_connection_U0_m_axis_tcp_open_connection_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal tie_off_tcp_open_connection_U0_s_axis_tcp_open_status_TREADY : STD_LOGIC;
    signal tie_off_tcp_tx_U0_ap_start : STD_LOGIC;
    signal tie_off_tcp_tx_U0_ap_done : STD_LOGIC;
    signal tie_off_tcp_tx_U0_ap_continue : STD_LOGIC;
    signal tie_off_tcp_tx_U0_ap_idle : STD_LOGIC;
    signal tie_off_tcp_tx_U0_ap_ready : STD_LOGIC;
    signal tie_off_tcp_tx_U0_m_axis_tcp_tx_meta_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal tie_off_tcp_tx_U0_m_axis_tcp_tx_meta_TVALID : STD_LOGIC;
    signal tie_off_tcp_tx_U0_m_axis_tcp_tx_meta_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal tie_off_tcp_tx_U0_m_axis_tcp_tx_meta_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal tie_off_tcp_tx_U0_m_axis_tcp_tx_meta_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal tie_off_tcp_tx_U0_m_axis_tcp_tx_data_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal tie_off_tcp_tx_U0_m_axis_tcp_tx_data_TVALID : STD_LOGIC;
    signal tie_off_tcp_tx_U0_m_axis_tcp_tx_data_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal tie_off_tcp_tx_U0_m_axis_tcp_tx_data_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal tie_off_tcp_tx_U0_m_axis_tcp_tx_data_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal tie_off_tcp_tx_U0_s_axis_tcp_tx_status_TREADY : STD_LOGIC;
    signal tie_off_udp_U0_ap_start : STD_LOGIC;
    signal tie_off_udp_U0_ap_done : STD_LOGIC;
    signal tie_off_udp_U0_ap_continue : STD_LOGIC;
    signal tie_off_udp_U0_ap_idle : STD_LOGIC;
    signal tie_off_udp_U0_ap_ready : STD_LOGIC;
    signal tie_off_udp_U0_s_axis_udp_rx_TREADY : STD_LOGIC;
    signal tie_off_udp_U0_m_axis_udp_tx_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal tie_off_udp_U0_m_axis_udp_tx_TVALID : STD_LOGIC;
    signal tie_off_udp_U0_m_axis_udp_tx_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal tie_off_udp_U0_m_axis_udp_tx_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal tie_off_udp_U0_m_axis_udp_tx_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal tie_off_udp_U0_s_axis_udp_rx_meta_TREADY : STD_LOGIC;
    signal tie_off_udp_U0_m_axis_udp_tx_meta_TDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal tie_off_udp_U0_m_axis_udp_tx_meta_TVALID : STD_LOGIC;
    signal tie_off_udp_U0_m_axis_udp_tx_meta_TKEEP : STD_LOGIC_VECTOR (31 downto 0);
    signal tie_off_udp_U0_m_axis_udp_tx_meta_TSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal tie_off_udp_U0_m_axis_udp_tx_meta_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal tie_off_tcp_close_con_U0_ap_start : STD_LOGIC;
    signal tie_off_tcp_close_con_U0_ap_done : STD_LOGIC;
    signal tie_off_tcp_close_con_U0_ap_continue : STD_LOGIC;
    signal tie_off_tcp_close_con_U0_ap_idle : STD_LOGIC;
    signal tie_off_tcp_close_con_U0_ap_ready : STD_LOGIC;
    signal tie_off_tcp_close_con_U0_m_axis_tcp_close_connection_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal tie_off_tcp_close_con_U0_m_axis_tcp_close_connection_TVALID : STD_LOGIC;
    signal tie_off_tcp_close_con_U0_m_axis_tcp_close_connection_TKEEP : STD_LOGIC_VECTOR (1 downto 0);
    signal tie_off_tcp_close_con_U0_m_axis_tcp_close_connection_TSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal tie_off_tcp_close_con_U0_m_axis_tcp_close_connection_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal useConn_c1_full_n : STD_LOGIC;
    signal useConn_c1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal useConn_c1_empty_n : STD_LOGIC;
    signal basePort_c2_full_n : STD_LOGIC;
    signal basePort_c2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal basePort_c2_empty_n : STD_LOGIC;
    signal expectedRxByteCnt_c3_full_n : STD_LOGIC;
    signal expectedRxByteCnt_c3_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal expectedRxByteCnt_c3_empty_n : STD_LOGIC;
    signal out_time_c4_full_n : STD_LOGIC;
    signal out_time_c4_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out_time_c4_empty_n : STD_LOGIC;
    signal useConn_c_full_n : STD_LOGIC;
    signal useConn_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal useConn_c_empty_n : STD_LOGIC;
    signal basePort_c_full_n : STD_LOGIC;
    signal basePort_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal basePort_c_empty_n : STD_LOGIC;
    signal expectedRxByteCnt_c_full_n : STD_LOGIC;
    signal expectedRxByteCnt_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal expectedRxByteCnt_c_empty_n : STD_LOGIC;
    signal expectedRxByteCnt_c44_full_n : STD_LOGIC;
    signal expectedRxByteCnt_c44_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal expectedRxByteCnt_c44_empty_n : STD_LOGIC;
    signal out_time_c_full_n : STD_LOGIC;
    signal out_time_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out_time_c_empty_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c_full_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ComputeWordCnt_loc_c_empty_n : STD_LOGIC;
    signal s_data_net_out_full_n : STD_LOGIC;
    signal s_data_net_out_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal s_data_net_out_empty_n : STD_LOGIC;
    signal timesha_full_n : STD_LOGIC;
    signal timesha_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal timesha_empty_n : STD_LOGIC;
    signal timeaes_full_n : STD_LOGIC;
    signal timeaes_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal timeaes_empty_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c45_full_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c45_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ComputeWordCnt_loc_c45_empty_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c46_full_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c46_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ComputeWordCnt_loc_c46_empty_n : STD_LOGIC;
    signal s_data_cal_full_n : STD_LOGIC;
    signal s_data_cal_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal s_data_cal_empty_n : STD_LOGIC;
    signal s_data_out_full_n : STD_LOGIC;
    signal s_data_out_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal s_data_out_empty_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c47_full_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c47_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ComputeWordCnt_loc_c47_empty_n : STD_LOGIC;
    signal endMsgLenStrm_full_n : STD_LOGIC;
    signal endMsgLenStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endMsgLenStrm_empty_n : STD_LOGIC;
    signal msgLenStrm_full_n : STD_LOGIC;
    signal msgLenStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal msgLenStrm_empty_n : STD_LOGIC;
    signal msgStrm_full_n : STD_LOGIC;
    signal msgStrm_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal msgStrm_empty_n : STD_LOGIC;
    signal sha_in_full_n : STD_LOGIC;
    signal sha_in_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal sha_in_empty_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c48_full_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c48_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ComputeWordCnt_loc_c48_empty_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c49_full_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c49_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ComputeWordCnt_loc_c49_empty_n : STD_LOGIC;
    signal sha_out_full_n : STD_LOGIC;
    signal sha_out_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal sha_out_empty_n : STD_LOGIC;
    signal digestStrm_full_n : STD_LOGIC;
    signal digestStrm_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal digestStrm_empty_n : STD_LOGIC;
    signal endDigestStrm_full_n : STD_LOGIC;
    signal endDigestStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endDigestStrm_empty_n : STD_LOGIC;
    signal ciphertextStrm_full_n : STD_LOGIC;
    signal ciphertextStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal ciphertextStrm_empty_n : STD_LOGIC;
    signal endCiphertextStrm_full_n : STD_LOGIC;
    signal endCiphertextStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endCiphertextStrm_empty_n : STD_LOGIC;
    signal cipherkeyStrm_full_n : STD_LOGIC;
    signal cipherkeyStrm_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal cipherkeyStrm_empty_n : STD_LOGIC;
    signal IVStrm_full_n : STD_LOGIC;
    signal IVStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal IVStrm_empty_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c50_full_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c50_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ComputeWordCnt_loc_c50_empty_n : STD_LOGIC;
    signal plaintextStrm_full_n : STD_LOGIC;
    signal plaintextStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal plaintextStrm_empty_n : STD_LOGIC;
    signal endPlaintextStrm_full_n : STD_LOGIC;
    signal endPlaintextStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endPlaintextStrm_empty_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c51_full_n : STD_LOGIC;
    signal ComputeWordCnt_loc_c51_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ComputeWordCnt_loc_c51_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_hls_recv_krnl_entry3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_hls_recv_krnl_entry3_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_tie_off_tcp_open_connection_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_tie_off_tcp_open_connection_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_tie_off_tcp_tx_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_tie_off_tcp_tx_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_tie_off_udp_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_tie_off_udp_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_tie_off_tcp_close_con_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_tie_off_tcp_close_con_U0_ap_ready : STD_LOGIC;
    signal start_for_hls_recv_krnl_entry45_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_recv_krnl_entry45_U0_full_n : STD_LOGIC;
    signal start_for_hls_recv_krnl_entry45_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_recv_krnl_entry45_U0_empty_n : STD_LOGIC;
    signal start_for_Block_split11_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_split11_proc_U0_full_n : STD_LOGIC;
    signal start_for_Block_split11_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_split11_proc_U0_empty_n : STD_LOGIC;
    signal start_for_listenPorts_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_listenPorts_U0_full_n : STD_LOGIC;
    signal start_for_listenPorts_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_listenPorts_U0_empty_n : STD_LOGIC;
    signal start_for_recvData_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_recvData_U0_full_n : STD_LOGIC;
    signal start_for_recvData_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_recvData_U0_empty_n : STD_LOGIC;
    signal start_for_backgroundclock_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_backgroundclock_U0_full_n : STD_LOGIC;
    signal start_for_backgroundclock_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_backgroundclock_U0_empty_n : STD_LOGIC;
    signal start_for_partition_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_partition_U0_full_n : STD_LOGIC;
    signal start_for_partition_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_partition_U0_empty_n : STD_LOGIC;
    signal listenPorts_U0_start_full_n : STD_LOGIC;
    signal listenPorts_U0_start_write : STD_LOGIC;
    signal recvData_U0_start_full_n : STD_LOGIC;
    signal recvData_U0_start_write : STD_LOGIC;
    signal backgroundclock_U0_start_full_n : STD_LOGIC;
    signal backgroundclock_U0_start_write : STD_LOGIC;
    signal start_for_consumetrans_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_consumetrans_U0_full_n : STD_LOGIC;
    signal start_for_consumetrans_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_consumetrans_U0_empty_n : STD_LOGIC;
    signal start_for_prepare_sha_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_prepare_sha_U0_full_n : STD_LOGIC;
    signal start_for_prepare_sha_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_prepare_sha_U0_empty_n : STD_LOGIC;
    signal consumetrans_U0_start_full_n : STD_LOGIC;
    signal consumetrans_U0_start_write : STD_LOGIC;
    signal start_for_mysha_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_mysha_U0_full_n : STD_LOGIC;
    signal start_for_mysha_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_mysha_U0_empty_n : STD_LOGIC;
    signal start_for_consumesha_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_consumesha_U0_full_n : STD_LOGIC;
    signal start_for_consumesha_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_consumesha_U0_empty_n : STD_LOGIC;
    signal start_for_prepare_aes_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_prepare_aes_U0_full_n : STD_LOGIC;
    signal start_for_prepare_aes_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_prepare_aes_U0_empty_n : STD_LOGIC;
    signal consumesha_U0_start_full_n : STD_LOGIC;
    signal consumesha_U0_start_write : STD_LOGIC;
    signal start_for_myaes_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_myaes_U0_full_n : STD_LOGIC;
    signal start_for_myaes_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_myaes_U0_empty_n : STD_LOGIC;
    signal start_for_consumeaes_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_consumeaes_U0_full_n : STD_LOGIC;
    signal start_for_consumeaes_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_consumeaes_U0_empty_n : STD_LOGIC;
    signal consumeaes_U0_start_full_n : STD_LOGIC;
    signal consumeaes_U0_start_write : STD_LOGIC;
    signal tie_off_tcp_open_connection_U0_start_full_n : STD_LOGIC;
    signal tie_off_tcp_open_connection_U0_start_write : STD_LOGIC;
    signal tie_off_tcp_tx_U0_start_full_n : STD_LOGIC;
    signal tie_off_tcp_tx_U0_start_write : STD_LOGIC;
    signal tie_off_udp_U0_start_full_n : STD_LOGIC;
    signal tie_off_udp_U0_start_write : STD_LOGIC;
    signal tie_off_tcp_close_con_U0_start_full_n : STD_LOGIC;
    signal tie_off_tcp_close_con_U0_start_write : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hls_recv_krnl_hls_recv_krnl_entry3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        useConn : IN STD_LOGIC_VECTOR (31 downto 0);
        basePort : IN STD_LOGIC_VECTOR (31 downto 0);
        expectedRxByteCnt : IN STD_LOGIC_VECTOR (63 downto 0);
        out_time : IN STD_LOGIC_VECTOR (63 downto 0);
        useConn_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        useConn_out_full_n : IN STD_LOGIC;
        useConn_out_write : OUT STD_LOGIC;
        basePort_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        basePort_out_full_n : IN STD_LOGIC;
        basePort_out_write : OUT STD_LOGIC;
        expectedRxByteCnt_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        expectedRxByteCnt_out_full_n : IN STD_LOGIC;
        expectedRxByteCnt_out_write : OUT STD_LOGIC;
        out_time_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_time_out_full_n : IN STD_LOGIC;
        out_time_out_write : OUT STD_LOGIC );
    end component;


    component hls_recv_krnl_hls_recv_krnl_entry45 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        useConn_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        useConn_empty_n : IN STD_LOGIC;
        useConn_read : OUT STD_LOGIC;
        basePort_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        basePort_empty_n : IN STD_LOGIC;
        basePort_read : OUT STD_LOGIC;
        expectedRxByteCnt_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        expectedRxByteCnt_empty_n : IN STD_LOGIC;
        expectedRxByteCnt_read : OUT STD_LOGIC;
        out_time_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        out_time_empty_n : IN STD_LOGIC;
        out_time_read : OUT STD_LOGIC;
        useConn_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        useConn_out_full_n : IN STD_LOGIC;
        useConn_out_write : OUT STD_LOGIC;
        basePort_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        basePort_out_full_n : IN STD_LOGIC;
        basePort_out_write : OUT STD_LOGIC;
        expectedRxByteCnt_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        expectedRxByteCnt_out_full_n : IN STD_LOGIC;
        expectedRxByteCnt_out_write : OUT STD_LOGIC;
        expectedRxByteCnt_out1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        expectedRxByteCnt_out1_full_n : IN STD_LOGIC;
        expectedRxByteCnt_out1_write : OUT STD_LOGIC;
        out_time_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_time_out_full_n : IN STD_LOGIC;
        out_time_out_write : OUT STD_LOGIC );
    end component;


    component hls_recv_krnl_Block_split11_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        expectedRxByteCnt_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        expectedRxByteCnt_empty_n : IN STD_LOGIC;
        expectedRxByteCnt_read : OUT STD_LOGIC;
        ComputeWordCnt_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_out_out_full_n : IN STD_LOGIC;
        ComputeWordCnt_out_out_write : OUT STD_LOGIC );
    end component;


    component hls_recv_krnl_listenPorts IS
    port (
        basePort_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        basePort_empty_n : IN STD_LOGIC;
        basePort_read : OUT STD_LOGIC;
        useConn_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        useConn_empty_n : IN STD_LOGIC;
        useConn_read : OUT STD_LOGIC;
        m_axis_tcp_listen_port_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axis_tcp_listen_port_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axis_tcp_listen_port_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axis_tcp_listen_port_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        s_axis_tcp_port_status_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        s_axis_tcp_port_status_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_tcp_port_status_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_tcp_port_status_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        m_axis_tcp_listen_port_TVALID : OUT STD_LOGIC;
        m_axis_tcp_listen_port_TREADY : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        s_axis_tcp_port_status_TVALID : IN STD_LOGIC;
        s_axis_tcp_port_status_TREADY : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_recvData IS
    port (
        expRxBytePerSession_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        expRxBytePerSession_empty_n : IN STD_LOGIC;
        expRxBytePerSession_read : OUT STD_LOGIC;
        s_axis_tcp_notification_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        s_axis_tcp_notification_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
        s_axis_tcp_notification_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        s_axis_tcp_notification_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axis_tcp_read_pkg_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axis_tcp_read_pkg_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axis_tcp_read_pkg_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axis_tcp_read_pkg_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        s_axis_tcp_rx_meta_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        s_axis_tcp_rx_meta_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
        s_axis_tcp_rx_meta_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        s_axis_tcp_rx_meta_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_tcp_rx_data_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        s_axis_tcp_rx_data_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_tcp_rx_data_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_tcp_rx_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_data_net_out_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        s_data_net_out_full_n : IN STD_LOGIC;
        s_data_net_out_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        s_axis_tcp_notification_TVALID : IN STD_LOGIC;
        s_axis_tcp_notification_TREADY : OUT STD_LOGIC;
        m_axis_tcp_read_pkg_TVALID : OUT STD_LOGIC;
        m_axis_tcp_read_pkg_TREADY : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        s_axis_tcp_rx_meta_TVALID : IN STD_LOGIC;
        s_axis_tcp_rx_meta_TREADY : OUT STD_LOGIC;
        s_axis_tcp_rx_data_TVALID : IN STD_LOGIC;
        s_axis_tcp_rx_data_TREADY : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_backgroundclock IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        timesha_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        timesha_empty_n : IN STD_LOGIC;
        timesha_read : OUT STD_LOGIC;
        timeaes_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        timeaes_empty_n : IN STD_LOGIC;
        timeaes_read : OUT STD_LOGIC;
        out_time_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        out_time_empty_n : IN STD_LOGIC;
        out_time_read : OUT STD_LOGIC );
    end component;


    component hls_recv_krnl_partition IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        ComputeWordCnt_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_loc_empty_n : IN STD_LOGIC;
        ComputeWordCnt_loc_read : OUT STD_LOGIC;
        ComputeWordCnt_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_loc_out_full_n : IN STD_LOGIC;
        ComputeWordCnt_loc_out_write : OUT STD_LOGIC;
        ComputeWordCnt_loc_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_loc_out1_full_n : IN STD_LOGIC;
        ComputeWordCnt_loc_out1_write : OUT STD_LOGIC;
        s_data_net_out_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        s_data_net_out_empty_n : IN STD_LOGIC;
        s_data_net_out_read : OUT STD_LOGIC;
        s_data_cal_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        s_data_cal_full_n : IN STD_LOGIC;
        s_data_cal_write : OUT STD_LOGIC;
        s_data_out_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        s_data_out_full_n : IN STD_LOGIC;
        s_data_out_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_consumetrans IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ComputeWordCnt_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_loc_empty_n : IN STD_LOGIC;
        ComputeWordCnt_loc_read : OUT STD_LOGIC;
        s_data_out_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        s_data_out_empty_n : IN STD_LOGIC;
        s_data_out_read : OUT STD_LOGIC );
    end component;


    component hls_recv_krnl_prepare_sha IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        ComputeWordCnt_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_loc_empty_n : IN STD_LOGIC;
        ComputeWordCnt_loc_read : OUT STD_LOGIC;
        ComputeWordCnt_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_loc_out_full_n : IN STD_LOGIC;
        ComputeWordCnt_loc_out_write : OUT STD_LOGIC;
        s_data_cal_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        s_data_cal_empty_n : IN STD_LOGIC;
        s_data_cal_read : OUT STD_LOGIC;
        endMsgLenStrm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        endMsgLenStrm_full_n : IN STD_LOGIC;
        endMsgLenStrm_write : OUT STD_LOGIC;
        msgLenStrm_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        msgLenStrm_full_n : IN STD_LOGIC;
        msgLenStrm_write : OUT STD_LOGIC;
        msgStrm_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        msgStrm_full_n : IN STD_LOGIC;
        msgStrm_write : OUT STD_LOGIC;
        sha_in_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        sha_in_full_n : IN STD_LOGIC;
        sha_in_write : OUT STD_LOGIC );
    end component;


    component hls_recv_krnl_mysha IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        timesha_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        timesha_full_n : IN STD_LOGIC;
        timesha_write : OUT STD_LOGIC;
        ComputeWordCnt_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_loc_empty_n : IN STD_LOGIC;
        ComputeWordCnt_loc_read : OUT STD_LOGIC;
        ComputeWordCnt_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_loc_out_full_n : IN STD_LOGIC;
        ComputeWordCnt_loc_out_write : OUT STD_LOGIC;
        ComputeWordCnt_loc_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_loc_out1_full_n : IN STD_LOGIC;
        ComputeWordCnt_loc_out1_write : OUT STD_LOGIC;
        sha_in_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        sha_in_empty_n : IN STD_LOGIC;
        sha_in_read : OUT STD_LOGIC;
        sha_out_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        sha_out_full_n : IN STD_LOGIC;
        sha_out_write : OUT STD_LOGIC;
        endMsgLenStrm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        endMsgLenStrm_empty_n : IN STD_LOGIC;
        endMsgLenStrm_read : OUT STD_LOGIC;
        msgLenStrm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        msgLenStrm_empty_n : IN STD_LOGIC;
        msgLenStrm_read : OUT STD_LOGIC;
        msgStrm_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        msgStrm_empty_n : IN STD_LOGIC;
        msgStrm_read : OUT STD_LOGIC;
        digestStrm_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        digestStrm_full_n : IN STD_LOGIC;
        digestStrm_write : OUT STD_LOGIC;
        endDigestStrm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        endDigestStrm_full_n : IN STD_LOGIC;
        endDigestStrm_write : OUT STD_LOGIC );
    end component;


    component hls_recv_krnl_consumesha IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ComputeWordCnt_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_loc_empty_n : IN STD_LOGIC;
        ComputeWordCnt_loc_read : OUT STD_LOGIC;
        endDigestStrm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        endDigestStrm_empty_n : IN STD_LOGIC;
        endDigestStrm_read : OUT STD_LOGIC;
        digestStrm_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        digestStrm_empty_n : IN STD_LOGIC;
        digestStrm_read : OUT STD_LOGIC );
    end component;


    component hls_recv_krnl_prepare_aes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        ciphertextStrm_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        ciphertextStrm_full_n : IN STD_LOGIC;
        ciphertextStrm_write : OUT STD_LOGIC;
        endCiphertextStrm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        endCiphertextStrm_full_n : IN STD_LOGIC;
        endCiphertextStrm_write : OUT STD_LOGIC;
        cipherkeyStrm_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        cipherkeyStrm_full_n : IN STD_LOGIC;
        cipherkeyStrm_write : OUT STD_LOGIC;
        IVStrm_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        IVStrm_full_n : IN STD_LOGIC;
        IVStrm_write : OUT STD_LOGIC;
        ComputeWordCnt_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_loc_empty_n : IN STD_LOGIC;
        ComputeWordCnt_loc_read : OUT STD_LOGIC;
        ComputeWordCnt_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_loc_out_full_n : IN STD_LOGIC;
        ComputeWordCnt_loc_out_write : OUT STD_LOGIC;
        sha_out_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        sha_out_empty_n : IN STD_LOGIC;
        sha_out_read : OUT STD_LOGIC );
    end component;


    component hls_recv_krnl_myaes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        ciphertextStrm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        ciphertextStrm_empty_n : IN STD_LOGIC;
        ciphertextStrm_read : OUT STD_LOGIC;
        endCiphertextStrm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        endCiphertextStrm_empty_n : IN STD_LOGIC;
        endCiphertextStrm_read : OUT STD_LOGIC;
        cipherkeyStrm_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        cipherkeyStrm_empty_n : IN STD_LOGIC;
        cipherkeyStrm_read : OUT STD_LOGIC;
        IVStrm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        IVStrm_empty_n : IN STD_LOGIC;
        IVStrm_read : OUT STD_LOGIC;
        plaintextStrm_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        plaintextStrm_full_n : IN STD_LOGIC;
        plaintextStrm_write : OUT STD_LOGIC;
        endPlaintextStrm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        endPlaintextStrm_full_n : IN STD_LOGIC;
        endPlaintextStrm_write : OUT STD_LOGIC;
        timeaes_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        timeaes_full_n : IN STD_LOGIC;
        timeaes_write : OUT STD_LOGIC;
        ComputeWordCnt_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_loc_empty_n : IN STD_LOGIC;
        ComputeWordCnt_loc_read : OUT STD_LOGIC;
        ComputeWordCnt_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_loc_out_full_n : IN STD_LOGIC;
        ComputeWordCnt_loc_out_write : OUT STD_LOGIC );
    end component;


    component hls_recv_krnl_consumeaes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        plaintextStrm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        plaintextStrm_empty_n : IN STD_LOGIC;
        plaintextStrm_read : OUT STD_LOGIC;
        endPlaintextStrm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        endPlaintextStrm_empty_n : IN STD_LOGIC;
        endPlaintextStrm_read : OUT STD_LOGIC;
        ComputeWordCnt_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ComputeWordCnt_loc_empty_n : IN STD_LOGIC;
        ComputeWordCnt_loc_read : OUT STD_LOGIC );
    end component;


    component hls_recv_krnl_tie_off_tcp_open_connection IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axis_tcp_open_connection_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_tcp_open_connection_TVALID : OUT STD_LOGIC;
        m_axis_tcp_open_connection_TREADY : IN STD_LOGIC;
        m_axis_tcp_open_connection_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_tcp_open_connection_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_tcp_open_connection_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        s_axis_tcp_open_status_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        s_axis_tcp_open_status_TVALID : IN STD_LOGIC;
        s_axis_tcp_open_status_TREADY : OUT STD_LOGIC;
        s_axis_tcp_open_status_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
        s_axis_tcp_open_status_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        s_axis_tcp_open_status_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hls_recv_krnl_tie_off_tcp_tx IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axis_tcp_tx_meta_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axis_tcp_tx_meta_TVALID : OUT STD_LOGIC;
        m_axis_tcp_tx_meta_TREADY : IN STD_LOGIC;
        m_axis_tcp_tx_meta_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axis_tcp_tx_meta_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axis_tcp_tx_meta_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_tcp_tx_data_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axis_tcp_tx_data_TVALID : OUT STD_LOGIC;
        m_axis_tcp_tx_data_TREADY : IN STD_LOGIC;
        m_axis_tcp_tx_data_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_tcp_tx_data_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_tcp_tx_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        s_axis_tcp_tx_status_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_tcp_tx_status_TVALID : IN STD_LOGIC;
        s_axis_tcp_tx_status_TREADY : OUT STD_LOGIC;
        s_axis_tcp_tx_status_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        s_axis_tcp_tx_status_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        s_axis_tcp_tx_status_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hls_recv_krnl_tie_off_udp IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_udp_rx_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        s_axis_udp_rx_TVALID : IN STD_LOGIC;
        s_axis_udp_rx_TREADY : OUT STD_LOGIC;
        s_axis_udp_rx_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_udp_rx_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_udp_rx_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axis_udp_tx_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axis_udp_tx_TVALID : OUT STD_LOGIC;
        m_axis_udp_tx_TREADY : IN STD_LOGIC;
        m_axis_udp_tx_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_udp_tx_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_udp_tx_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        s_axis_udp_rx_meta_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        s_axis_udp_rx_meta_TVALID : IN STD_LOGIC;
        s_axis_udp_rx_meta_TREADY : OUT STD_LOGIC;
        s_axis_udp_rx_meta_TKEEP : IN STD_LOGIC_VECTOR (31 downto 0);
        s_axis_udp_rx_meta_TSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        s_axis_udp_rx_meta_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axis_udp_tx_meta_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axis_udp_tx_meta_TVALID : OUT STD_LOGIC;
        m_axis_udp_tx_meta_TREADY : IN STD_LOGIC;
        m_axis_udp_tx_meta_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axis_udp_tx_meta_TSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axis_udp_tx_meta_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hls_recv_krnl_tie_off_tcp_close_con IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axis_tcp_close_connection_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axis_tcp_close_connection_TVALID : OUT STD_LOGIC;
        m_axis_tcp_close_connection_TREADY : IN STD_LOGIC;
        m_axis_tcp_close_connection_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axis_tcp_close_connection_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axis_tcp_close_connection_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hls_recv_krnl_fifo_w32_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_fifo_w64_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_fifo_w512_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (511 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (511 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_fifo_w1_d1_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_fifo_w128_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_fifo_w256_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_start_for_hls_recv_krnl_entry45_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_start_for_Block_split11_proc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_start_for_listenPorts_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_start_for_recvData_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_start_for_backgroundclock_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_start_for_partition_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_start_for_consumetrans_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_start_for_prepare_sha_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_start_for_mysha_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_start_for_consumesha_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_start_for_prepare_aes_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_start_for_myaes_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_start_for_consumeaes_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        useConn : OUT STD_LOGIC_VECTOR (31 downto 0);
        basePort : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay : OUT STD_LOGIC_VECTOR (31 downto 0);
        expectedRxByteCnt : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_time : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component hls_recv_krnl_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        useConn => useConn,
        basePort => basePort,
        delay => delay,
        expectedRxByteCnt => expectedRxByteCnt,
        out_time => out_time,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem_m_axi_U : component hls_recv_krnl_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 64,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => backgroundclock_U0_m_axi_gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => backgroundclock_U0_m_axi_gmem_AWADDR,
        I_AWID => backgroundclock_U0_m_axi_gmem_AWID,
        I_AWLEN => backgroundclock_U0_m_axi_gmem_AWLEN,
        I_AWSIZE => backgroundclock_U0_m_axi_gmem_AWSIZE,
        I_AWLOCK => backgroundclock_U0_m_axi_gmem_AWLOCK,
        I_AWCACHE => backgroundclock_U0_m_axi_gmem_AWCACHE,
        I_AWQOS => backgroundclock_U0_m_axi_gmem_AWQOS,
        I_AWPROT => backgroundclock_U0_m_axi_gmem_AWPROT,
        I_AWUSER => backgroundclock_U0_m_axi_gmem_AWUSER,
        I_AWBURST => backgroundclock_U0_m_axi_gmem_AWBURST,
        I_AWREGION => backgroundclock_U0_m_axi_gmem_AWREGION,
        I_WVALID => backgroundclock_U0_m_axi_gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => backgroundclock_U0_m_axi_gmem_WDATA,
        I_WID => backgroundclock_U0_m_axi_gmem_WID,
        I_WUSER => backgroundclock_U0_m_axi_gmem_WUSER,
        I_WLAST => backgroundclock_U0_m_axi_gmem_WLAST,
        I_WSTRB => backgroundclock_U0_m_axi_gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => backgroundclock_U0_m_axi_gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    hls_recv_krnl_entry3_U0 : component hls_recv_krnl_hls_recv_krnl_entry3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hls_recv_krnl_entry3_U0_ap_start,
        start_full_n => start_for_hls_recv_krnl_entry45_U0_full_n,
        ap_done => hls_recv_krnl_entry3_U0_ap_done,
        ap_continue => hls_recv_krnl_entry3_U0_ap_continue,
        ap_idle => hls_recv_krnl_entry3_U0_ap_idle,
        ap_ready => hls_recv_krnl_entry3_U0_ap_ready,
        start_out => hls_recv_krnl_entry3_U0_start_out,
        start_write => hls_recv_krnl_entry3_U0_start_write,
        useConn => useConn,
        basePort => basePort,
        expectedRxByteCnt => expectedRxByteCnt,
        out_time => out_time,
        useConn_out_din => hls_recv_krnl_entry3_U0_useConn_out_din,
        useConn_out_full_n => useConn_c1_full_n,
        useConn_out_write => hls_recv_krnl_entry3_U0_useConn_out_write,
        basePort_out_din => hls_recv_krnl_entry3_U0_basePort_out_din,
        basePort_out_full_n => basePort_c2_full_n,
        basePort_out_write => hls_recv_krnl_entry3_U0_basePort_out_write,
        expectedRxByteCnt_out_din => hls_recv_krnl_entry3_U0_expectedRxByteCnt_out_din,
        expectedRxByteCnt_out_full_n => expectedRxByteCnt_c3_full_n,
        expectedRxByteCnt_out_write => hls_recv_krnl_entry3_U0_expectedRxByteCnt_out_write,
        out_time_out_din => hls_recv_krnl_entry3_U0_out_time_out_din,
        out_time_out_full_n => out_time_c4_full_n,
        out_time_out_write => hls_recv_krnl_entry3_U0_out_time_out_write);

    hls_recv_krnl_entry45_U0 : component hls_recv_krnl_hls_recv_krnl_entry45
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hls_recv_krnl_entry45_U0_ap_start,
        start_full_n => hls_recv_krnl_entry45_U0_start_full_n,
        ap_done => hls_recv_krnl_entry45_U0_ap_done,
        ap_continue => hls_recv_krnl_entry45_U0_ap_continue,
        ap_idle => hls_recv_krnl_entry45_U0_ap_idle,
        ap_ready => hls_recv_krnl_entry45_U0_ap_ready,
        start_out => hls_recv_krnl_entry45_U0_start_out,
        start_write => hls_recv_krnl_entry45_U0_start_write,
        useConn_dout => useConn_c1_dout,
        useConn_empty_n => useConn_c1_empty_n,
        useConn_read => hls_recv_krnl_entry45_U0_useConn_read,
        basePort_dout => basePort_c2_dout,
        basePort_empty_n => basePort_c2_empty_n,
        basePort_read => hls_recv_krnl_entry45_U0_basePort_read,
        expectedRxByteCnt_dout => expectedRxByteCnt_c3_dout,
        expectedRxByteCnt_empty_n => expectedRxByteCnt_c3_empty_n,
        expectedRxByteCnt_read => hls_recv_krnl_entry45_U0_expectedRxByteCnt_read,
        out_time_dout => out_time_c4_dout,
        out_time_empty_n => out_time_c4_empty_n,
        out_time_read => hls_recv_krnl_entry45_U0_out_time_read,
        useConn_out_din => hls_recv_krnl_entry45_U0_useConn_out_din,
        useConn_out_full_n => useConn_c_full_n,
        useConn_out_write => hls_recv_krnl_entry45_U0_useConn_out_write,
        basePort_out_din => hls_recv_krnl_entry45_U0_basePort_out_din,
        basePort_out_full_n => basePort_c_full_n,
        basePort_out_write => hls_recv_krnl_entry45_U0_basePort_out_write,
        expectedRxByteCnt_out_din => hls_recv_krnl_entry45_U0_expectedRxByteCnt_out_din,
        expectedRxByteCnt_out_full_n => expectedRxByteCnt_c_full_n,
        expectedRxByteCnt_out_write => hls_recv_krnl_entry45_U0_expectedRxByteCnt_out_write,
        expectedRxByteCnt_out1_din => hls_recv_krnl_entry45_U0_expectedRxByteCnt_out1_din,
        expectedRxByteCnt_out1_full_n => expectedRxByteCnt_c44_full_n,
        expectedRxByteCnt_out1_write => hls_recv_krnl_entry45_U0_expectedRxByteCnt_out1_write,
        out_time_out_din => hls_recv_krnl_entry45_U0_out_time_out_din,
        out_time_out_full_n => out_time_c_full_n,
        out_time_out_write => hls_recv_krnl_entry45_U0_out_time_out_write);

    Block_split11_proc_U0 : component hls_recv_krnl_Block_split11_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_split11_proc_U0_ap_start,
        start_full_n => start_for_partition_U0_full_n,
        ap_done => Block_split11_proc_U0_ap_done,
        ap_continue => Block_split11_proc_U0_ap_continue,
        ap_idle => Block_split11_proc_U0_ap_idle,
        ap_ready => Block_split11_proc_U0_ap_ready,
        start_out => Block_split11_proc_U0_start_out,
        start_write => Block_split11_proc_U0_start_write,
        expectedRxByteCnt_dout => expectedRxByteCnt_c_dout,
        expectedRxByteCnt_empty_n => expectedRxByteCnt_c_empty_n,
        expectedRxByteCnt_read => Block_split11_proc_U0_expectedRxByteCnt_read,
        ComputeWordCnt_out_out_din => Block_split11_proc_U0_ComputeWordCnt_out_out_din,
        ComputeWordCnt_out_out_full_n => ComputeWordCnt_loc_c_full_n,
        ComputeWordCnt_out_out_write => Block_split11_proc_U0_ComputeWordCnt_out_out_write);

    listenPorts_U0 : component hls_recv_krnl_listenPorts
    port map (
        basePort_dout => basePort_c_dout,
        basePort_empty_n => basePort_c_empty_n,
        basePort_read => listenPorts_U0_basePort_read,
        useConn_dout => useConn_c_dout,
        useConn_empty_n => useConn_c_empty_n,
        useConn_read => listenPorts_U0_useConn_read,
        m_axis_tcp_listen_port_TDATA => listenPorts_U0_m_axis_tcp_listen_port_TDATA,
        m_axis_tcp_listen_port_TKEEP => listenPorts_U0_m_axis_tcp_listen_port_TKEEP,
        m_axis_tcp_listen_port_TSTRB => listenPorts_U0_m_axis_tcp_listen_port_TSTRB,
        m_axis_tcp_listen_port_TLAST => listenPorts_U0_m_axis_tcp_listen_port_TLAST,
        s_axis_tcp_port_status_TDATA => s_axis_tcp_port_status_TDATA,
        s_axis_tcp_port_status_TKEEP => s_axis_tcp_port_status_TKEEP,
        s_axis_tcp_port_status_TSTRB => s_axis_tcp_port_status_TSTRB,
        s_axis_tcp_port_status_TLAST => s_axis_tcp_port_status_TLAST,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => listenPorts_U0_ap_start,
        m_axis_tcp_listen_port_TVALID => listenPorts_U0_m_axis_tcp_listen_port_TVALID,
        m_axis_tcp_listen_port_TREADY => m_axis_tcp_listen_port_TREADY,
        ap_done => listenPorts_U0_ap_done,
        s_axis_tcp_port_status_TVALID => s_axis_tcp_port_status_TVALID,
        s_axis_tcp_port_status_TREADY => listenPorts_U0_s_axis_tcp_port_status_TREADY,
        ap_ready => listenPorts_U0_ap_ready,
        ap_idle => listenPorts_U0_ap_idle,
        ap_continue => listenPorts_U0_ap_continue);

    recvData_U0 : component hls_recv_krnl_recvData
    port map (
        expRxBytePerSession_dout => expectedRxByteCnt_c44_dout,
        expRxBytePerSession_empty_n => expectedRxByteCnt_c44_empty_n,
        expRxBytePerSession_read => recvData_U0_expRxBytePerSession_read,
        s_axis_tcp_notification_TDATA => s_axis_tcp_notification_TDATA,
        s_axis_tcp_notification_TKEEP => s_axis_tcp_notification_TKEEP,
        s_axis_tcp_notification_TSTRB => s_axis_tcp_notification_TSTRB,
        s_axis_tcp_notification_TLAST => s_axis_tcp_notification_TLAST,
        m_axis_tcp_read_pkg_TDATA => recvData_U0_m_axis_tcp_read_pkg_TDATA,
        m_axis_tcp_read_pkg_TKEEP => recvData_U0_m_axis_tcp_read_pkg_TKEEP,
        m_axis_tcp_read_pkg_TSTRB => recvData_U0_m_axis_tcp_read_pkg_TSTRB,
        m_axis_tcp_read_pkg_TLAST => recvData_U0_m_axis_tcp_read_pkg_TLAST,
        s_axis_tcp_rx_meta_TDATA => s_axis_tcp_rx_meta_TDATA,
        s_axis_tcp_rx_meta_TKEEP => s_axis_tcp_rx_meta_TKEEP,
        s_axis_tcp_rx_meta_TSTRB => s_axis_tcp_rx_meta_TSTRB,
        s_axis_tcp_rx_meta_TLAST => s_axis_tcp_rx_meta_TLAST,
        s_axis_tcp_rx_data_TDATA => s_axis_tcp_rx_data_TDATA,
        s_axis_tcp_rx_data_TKEEP => s_axis_tcp_rx_data_TKEEP,
        s_axis_tcp_rx_data_TSTRB => s_axis_tcp_rx_data_TSTRB,
        s_axis_tcp_rx_data_TLAST => s_axis_tcp_rx_data_TLAST,
        s_data_net_out_din => recvData_U0_s_data_net_out_din,
        s_data_net_out_full_n => s_data_net_out_full_n,
        s_data_net_out_write => recvData_U0_s_data_net_out_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        s_axis_tcp_notification_TVALID => s_axis_tcp_notification_TVALID,
        s_axis_tcp_notification_TREADY => recvData_U0_s_axis_tcp_notification_TREADY,
        m_axis_tcp_read_pkg_TVALID => recvData_U0_m_axis_tcp_read_pkg_TVALID,
        m_axis_tcp_read_pkg_TREADY => m_axis_tcp_read_pkg_TREADY,
        ap_start => recvData_U0_ap_start,
        ap_done => recvData_U0_ap_done,
        s_axis_tcp_rx_meta_TVALID => s_axis_tcp_rx_meta_TVALID,
        s_axis_tcp_rx_meta_TREADY => recvData_U0_s_axis_tcp_rx_meta_TREADY,
        s_axis_tcp_rx_data_TVALID => s_axis_tcp_rx_data_TVALID,
        s_axis_tcp_rx_data_TREADY => recvData_U0_s_axis_tcp_rx_data_TREADY,
        ap_ready => recvData_U0_ap_ready,
        ap_idle => recvData_U0_ap_idle,
        ap_continue => recvData_U0_ap_continue);

    backgroundclock_U0 : component hls_recv_krnl_backgroundclock
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => backgroundclock_U0_ap_start,
        ap_done => backgroundclock_U0_ap_done,
        ap_continue => backgroundclock_U0_ap_continue,
        ap_idle => backgroundclock_U0_ap_idle,
        ap_ready => backgroundclock_U0_ap_ready,
        m_axi_gmem_AWVALID => backgroundclock_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => backgroundclock_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => backgroundclock_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => backgroundclock_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => backgroundclock_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => backgroundclock_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => backgroundclock_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => backgroundclock_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => backgroundclock_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => backgroundclock_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => backgroundclock_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => backgroundclock_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => backgroundclock_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => backgroundclock_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => backgroundclock_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => backgroundclock_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => backgroundclock_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => backgroundclock_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => backgroundclock_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => backgroundclock_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => backgroundclock_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => backgroundclock_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => backgroundclock_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => backgroundclock_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => backgroundclock_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => backgroundclock_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => backgroundclock_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => backgroundclock_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => backgroundclock_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => backgroundclock_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => backgroundclock_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv64_0,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => backgroundclock_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => gmem_BRESP,
        m_axi_gmem_BID => gmem_BID,
        m_axi_gmem_BUSER => gmem_BUSER,
        timesha_dout => timesha_dout,
        timesha_empty_n => timesha_empty_n,
        timesha_read => backgroundclock_U0_timesha_read,
        timeaes_dout => timeaes_dout,
        timeaes_empty_n => timeaes_empty_n,
        timeaes_read => backgroundclock_U0_timeaes_read,
        out_time_dout => out_time_c_dout,
        out_time_empty_n => out_time_c_empty_n,
        out_time_read => backgroundclock_U0_out_time_read);

    partition_U0 : component hls_recv_krnl_partition
    port map (
        ap_start => partition_U0_ap_start,
        start_full_n => partition_U0_start_full_n,
        start_out => partition_U0_start_out,
        start_write => partition_U0_start_write,
        ComputeWordCnt_loc_dout => ComputeWordCnt_loc_c_dout,
        ComputeWordCnt_loc_empty_n => ComputeWordCnt_loc_c_empty_n,
        ComputeWordCnt_loc_read => partition_U0_ComputeWordCnt_loc_read,
        ComputeWordCnt_loc_out_din => partition_U0_ComputeWordCnt_loc_out_din,
        ComputeWordCnt_loc_out_full_n => ComputeWordCnt_loc_c45_full_n,
        ComputeWordCnt_loc_out_write => partition_U0_ComputeWordCnt_loc_out_write,
        ComputeWordCnt_loc_out1_din => partition_U0_ComputeWordCnt_loc_out1_din,
        ComputeWordCnt_loc_out1_full_n => ComputeWordCnt_loc_c46_full_n,
        ComputeWordCnt_loc_out1_write => partition_U0_ComputeWordCnt_loc_out1_write,
        s_data_net_out_dout => s_data_net_out_dout,
        s_data_net_out_empty_n => s_data_net_out_empty_n,
        s_data_net_out_read => partition_U0_s_data_net_out_read,
        s_data_cal_din => partition_U0_s_data_cal_din,
        s_data_cal_full_n => s_data_cal_full_n,
        s_data_cal_write => partition_U0_s_data_cal_write,
        s_data_out_din => partition_U0_s_data_out_din,
        s_data_out_full_n => s_data_out_full_n,
        s_data_out_write => partition_U0_s_data_out_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_done => partition_U0_ap_done,
        ap_ready => partition_U0_ap_ready,
        ap_idle => partition_U0_ap_idle,
        ap_continue => partition_U0_ap_continue);

    consumetrans_U0 : component hls_recv_krnl_consumetrans
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => consumetrans_U0_ap_start,
        ap_done => consumetrans_U0_ap_done,
        ap_continue => consumetrans_U0_ap_continue,
        ap_idle => consumetrans_U0_ap_idle,
        ap_ready => consumetrans_U0_ap_ready,
        ComputeWordCnt_loc_dout => ComputeWordCnt_loc_c45_dout,
        ComputeWordCnt_loc_empty_n => ComputeWordCnt_loc_c45_empty_n,
        ComputeWordCnt_loc_read => consumetrans_U0_ComputeWordCnt_loc_read,
        s_data_out_dout => s_data_out_dout,
        s_data_out_empty_n => s_data_out_empty_n,
        s_data_out_read => consumetrans_U0_s_data_out_read);

    prepare_sha_U0 : component hls_recv_krnl_prepare_sha
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => prepare_sha_U0_ap_start,
        start_full_n => start_for_mysha_U0_full_n,
        ap_done => prepare_sha_U0_ap_done,
        ap_continue => prepare_sha_U0_ap_continue,
        ap_idle => prepare_sha_U0_ap_idle,
        ap_ready => prepare_sha_U0_ap_ready,
        start_out => prepare_sha_U0_start_out,
        start_write => prepare_sha_U0_start_write,
        ComputeWordCnt_loc_dout => ComputeWordCnt_loc_c46_dout,
        ComputeWordCnt_loc_empty_n => ComputeWordCnt_loc_c46_empty_n,
        ComputeWordCnt_loc_read => prepare_sha_U0_ComputeWordCnt_loc_read,
        ComputeWordCnt_loc_out_din => prepare_sha_U0_ComputeWordCnt_loc_out_din,
        ComputeWordCnt_loc_out_full_n => ComputeWordCnt_loc_c47_full_n,
        ComputeWordCnt_loc_out_write => prepare_sha_U0_ComputeWordCnt_loc_out_write,
        s_data_cal_dout => s_data_cal_dout,
        s_data_cal_empty_n => s_data_cal_empty_n,
        s_data_cal_read => prepare_sha_U0_s_data_cal_read,
        endMsgLenStrm_din => prepare_sha_U0_endMsgLenStrm_din,
        endMsgLenStrm_full_n => endMsgLenStrm_full_n,
        endMsgLenStrm_write => prepare_sha_U0_endMsgLenStrm_write,
        msgLenStrm_din => prepare_sha_U0_msgLenStrm_din,
        msgLenStrm_full_n => msgLenStrm_full_n,
        msgLenStrm_write => prepare_sha_U0_msgLenStrm_write,
        msgStrm_din => prepare_sha_U0_msgStrm_din,
        msgStrm_full_n => msgStrm_full_n,
        msgStrm_write => prepare_sha_U0_msgStrm_write,
        sha_in_din => prepare_sha_U0_sha_in_din,
        sha_in_full_n => sha_in_full_n,
        sha_in_write => prepare_sha_U0_sha_in_write);

    mysha_U0 : component hls_recv_krnl_mysha
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mysha_U0_ap_start,
        start_full_n => mysha_U0_start_full_n,
        ap_done => mysha_U0_ap_done,
        ap_continue => mysha_U0_ap_continue,
        ap_idle => mysha_U0_ap_idle,
        ap_ready => mysha_U0_ap_ready,
        start_out => mysha_U0_start_out,
        start_write => mysha_U0_start_write,
        timesha_din => mysha_U0_timesha_din,
        timesha_full_n => timesha_full_n,
        timesha_write => mysha_U0_timesha_write,
        ComputeWordCnt_loc_dout => ComputeWordCnt_loc_c47_dout,
        ComputeWordCnt_loc_empty_n => ComputeWordCnt_loc_c47_empty_n,
        ComputeWordCnt_loc_read => mysha_U0_ComputeWordCnt_loc_read,
        ComputeWordCnt_loc_out_din => mysha_U0_ComputeWordCnt_loc_out_din,
        ComputeWordCnt_loc_out_full_n => ComputeWordCnt_loc_c48_full_n,
        ComputeWordCnt_loc_out_write => mysha_U0_ComputeWordCnt_loc_out_write,
        ComputeWordCnt_loc_out1_din => mysha_U0_ComputeWordCnt_loc_out1_din,
        ComputeWordCnt_loc_out1_full_n => ComputeWordCnt_loc_c49_full_n,
        ComputeWordCnt_loc_out1_write => mysha_U0_ComputeWordCnt_loc_out1_write,
        sha_in_dout => sha_in_dout,
        sha_in_empty_n => sha_in_empty_n,
        sha_in_read => mysha_U0_sha_in_read,
        sha_out_din => mysha_U0_sha_out_din,
        sha_out_full_n => sha_out_full_n,
        sha_out_write => mysha_U0_sha_out_write,
        endMsgLenStrm_dout => endMsgLenStrm_dout,
        endMsgLenStrm_empty_n => endMsgLenStrm_empty_n,
        endMsgLenStrm_read => mysha_U0_endMsgLenStrm_read,
        msgLenStrm_dout => msgLenStrm_dout,
        msgLenStrm_empty_n => msgLenStrm_empty_n,
        msgLenStrm_read => mysha_U0_msgLenStrm_read,
        msgStrm_dout => msgStrm_dout,
        msgStrm_empty_n => msgStrm_empty_n,
        msgStrm_read => mysha_U0_msgStrm_read,
        digestStrm_din => mysha_U0_digestStrm_din,
        digestStrm_full_n => digestStrm_full_n,
        digestStrm_write => mysha_U0_digestStrm_write,
        endDigestStrm_din => mysha_U0_endDigestStrm_din,
        endDigestStrm_full_n => endDigestStrm_full_n,
        endDigestStrm_write => mysha_U0_endDigestStrm_write);

    consumesha_U0 : component hls_recv_krnl_consumesha
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => consumesha_U0_ap_start,
        ap_done => consumesha_U0_ap_done,
        ap_continue => consumesha_U0_ap_continue,
        ap_idle => consumesha_U0_ap_idle,
        ap_ready => consumesha_U0_ap_ready,
        ComputeWordCnt_loc_dout => ComputeWordCnt_loc_c48_dout,
        ComputeWordCnt_loc_empty_n => ComputeWordCnt_loc_c48_empty_n,
        ComputeWordCnt_loc_read => consumesha_U0_ComputeWordCnt_loc_read,
        endDigestStrm_dout => endDigestStrm_dout,
        endDigestStrm_empty_n => endDigestStrm_empty_n,
        endDigestStrm_read => consumesha_U0_endDigestStrm_read,
        digestStrm_dout => digestStrm_dout,
        digestStrm_empty_n => digestStrm_empty_n,
        digestStrm_read => consumesha_U0_digestStrm_read);

    prepare_aes_U0 : component hls_recv_krnl_prepare_aes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => prepare_aes_U0_ap_start,
        start_full_n => start_for_myaes_U0_full_n,
        ap_done => prepare_aes_U0_ap_done,
        ap_continue => prepare_aes_U0_ap_continue,
        ap_idle => prepare_aes_U0_ap_idle,
        ap_ready => prepare_aes_U0_ap_ready,
        start_out => prepare_aes_U0_start_out,
        start_write => prepare_aes_U0_start_write,
        ciphertextStrm_din => prepare_aes_U0_ciphertextStrm_din,
        ciphertextStrm_full_n => ciphertextStrm_full_n,
        ciphertextStrm_write => prepare_aes_U0_ciphertextStrm_write,
        endCiphertextStrm_din => prepare_aes_U0_endCiphertextStrm_din,
        endCiphertextStrm_full_n => endCiphertextStrm_full_n,
        endCiphertextStrm_write => prepare_aes_U0_endCiphertextStrm_write,
        cipherkeyStrm_din => prepare_aes_U0_cipherkeyStrm_din,
        cipherkeyStrm_full_n => cipherkeyStrm_full_n,
        cipherkeyStrm_write => prepare_aes_U0_cipherkeyStrm_write,
        IVStrm_din => prepare_aes_U0_IVStrm_din,
        IVStrm_full_n => IVStrm_full_n,
        IVStrm_write => prepare_aes_U0_IVStrm_write,
        ComputeWordCnt_loc_dout => ComputeWordCnt_loc_c49_dout,
        ComputeWordCnt_loc_empty_n => ComputeWordCnt_loc_c49_empty_n,
        ComputeWordCnt_loc_read => prepare_aes_U0_ComputeWordCnt_loc_read,
        ComputeWordCnt_loc_out_din => prepare_aes_U0_ComputeWordCnt_loc_out_din,
        ComputeWordCnt_loc_out_full_n => ComputeWordCnt_loc_c50_full_n,
        ComputeWordCnt_loc_out_write => prepare_aes_U0_ComputeWordCnt_loc_out_write,
        sha_out_dout => sha_out_dout,
        sha_out_empty_n => sha_out_empty_n,
        sha_out_read => prepare_aes_U0_sha_out_read);

    myaes_U0 : component hls_recv_krnl_myaes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => myaes_U0_ap_start,
        start_full_n => start_for_consumeaes_U0_full_n,
        ap_done => myaes_U0_ap_done,
        ap_continue => myaes_U0_ap_continue,
        ap_idle => myaes_U0_ap_idle,
        ap_ready => myaes_U0_ap_ready,
        start_out => myaes_U0_start_out,
        start_write => myaes_U0_start_write,
        ciphertextStrm_dout => ciphertextStrm_dout,
        ciphertextStrm_empty_n => ciphertextStrm_empty_n,
        ciphertextStrm_read => myaes_U0_ciphertextStrm_read,
        endCiphertextStrm_dout => endCiphertextStrm_dout,
        endCiphertextStrm_empty_n => endCiphertextStrm_empty_n,
        endCiphertextStrm_read => myaes_U0_endCiphertextStrm_read,
        cipherkeyStrm_dout => cipherkeyStrm_dout,
        cipherkeyStrm_empty_n => cipherkeyStrm_empty_n,
        cipherkeyStrm_read => myaes_U0_cipherkeyStrm_read,
        IVStrm_dout => IVStrm_dout,
        IVStrm_empty_n => IVStrm_empty_n,
        IVStrm_read => myaes_U0_IVStrm_read,
        plaintextStrm_din => myaes_U0_plaintextStrm_din,
        plaintextStrm_full_n => plaintextStrm_full_n,
        plaintextStrm_write => myaes_U0_plaintextStrm_write,
        endPlaintextStrm_din => myaes_U0_endPlaintextStrm_din,
        endPlaintextStrm_full_n => endPlaintextStrm_full_n,
        endPlaintextStrm_write => myaes_U0_endPlaintextStrm_write,
        timeaes_din => myaes_U0_timeaes_din,
        timeaes_full_n => timeaes_full_n,
        timeaes_write => myaes_U0_timeaes_write,
        ComputeWordCnt_loc_dout => ComputeWordCnt_loc_c50_dout,
        ComputeWordCnt_loc_empty_n => ComputeWordCnt_loc_c50_empty_n,
        ComputeWordCnt_loc_read => myaes_U0_ComputeWordCnt_loc_read,
        ComputeWordCnt_loc_out_din => myaes_U0_ComputeWordCnt_loc_out_din,
        ComputeWordCnt_loc_out_full_n => ComputeWordCnt_loc_c51_full_n,
        ComputeWordCnt_loc_out_write => myaes_U0_ComputeWordCnt_loc_out_write);

    consumeaes_U0 : component hls_recv_krnl_consumeaes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => consumeaes_U0_ap_start,
        ap_done => consumeaes_U0_ap_done,
        ap_continue => consumeaes_U0_ap_continue,
        ap_idle => consumeaes_U0_ap_idle,
        ap_ready => consumeaes_U0_ap_ready,
        plaintextStrm_dout => plaintextStrm_dout,
        plaintextStrm_empty_n => plaintextStrm_empty_n,
        plaintextStrm_read => consumeaes_U0_plaintextStrm_read,
        endPlaintextStrm_dout => endPlaintextStrm_dout,
        endPlaintextStrm_empty_n => endPlaintextStrm_empty_n,
        endPlaintextStrm_read => consumeaes_U0_endPlaintextStrm_read,
        ComputeWordCnt_loc_dout => ComputeWordCnt_loc_c51_dout,
        ComputeWordCnt_loc_empty_n => ComputeWordCnt_loc_c51_empty_n,
        ComputeWordCnt_loc_read => consumeaes_U0_ComputeWordCnt_loc_read);

    tie_off_tcp_open_connection_U0 : component hls_recv_krnl_tie_off_tcp_open_connection
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => tie_off_tcp_open_connection_U0_ap_start,
        ap_done => tie_off_tcp_open_connection_U0_ap_done,
        ap_continue => tie_off_tcp_open_connection_U0_ap_continue,
        ap_idle => tie_off_tcp_open_connection_U0_ap_idle,
        ap_ready => tie_off_tcp_open_connection_U0_ap_ready,
        m_axis_tcp_open_connection_TDATA => tie_off_tcp_open_connection_U0_m_axis_tcp_open_connection_TDATA,
        m_axis_tcp_open_connection_TVALID => tie_off_tcp_open_connection_U0_m_axis_tcp_open_connection_TVALID,
        m_axis_tcp_open_connection_TREADY => m_axis_tcp_open_connection_TREADY,
        m_axis_tcp_open_connection_TKEEP => tie_off_tcp_open_connection_U0_m_axis_tcp_open_connection_TKEEP,
        m_axis_tcp_open_connection_TSTRB => tie_off_tcp_open_connection_U0_m_axis_tcp_open_connection_TSTRB,
        m_axis_tcp_open_connection_TLAST => tie_off_tcp_open_connection_U0_m_axis_tcp_open_connection_TLAST,
        s_axis_tcp_open_status_TDATA => s_axis_tcp_open_status_TDATA,
        s_axis_tcp_open_status_TVALID => s_axis_tcp_open_status_TVALID,
        s_axis_tcp_open_status_TREADY => tie_off_tcp_open_connection_U0_s_axis_tcp_open_status_TREADY,
        s_axis_tcp_open_status_TKEEP => s_axis_tcp_open_status_TKEEP,
        s_axis_tcp_open_status_TSTRB => s_axis_tcp_open_status_TSTRB,
        s_axis_tcp_open_status_TLAST => s_axis_tcp_open_status_TLAST);

    tie_off_tcp_tx_U0 : component hls_recv_krnl_tie_off_tcp_tx
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => tie_off_tcp_tx_U0_ap_start,
        ap_done => tie_off_tcp_tx_U0_ap_done,
        ap_continue => tie_off_tcp_tx_U0_ap_continue,
        ap_idle => tie_off_tcp_tx_U0_ap_idle,
        ap_ready => tie_off_tcp_tx_U0_ap_ready,
        m_axis_tcp_tx_meta_TDATA => tie_off_tcp_tx_U0_m_axis_tcp_tx_meta_TDATA,
        m_axis_tcp_tx_meta_TVALID => tie_off_tcp_tx_U0_m_axis_tcp_tx_meta_TVALID,
        m_axis_tcp_tx_meta_TREADY => m_axis_tcp_tx_meta_TREADY,
        m_axis_tcp_tx_meta_TKEEP => tie_off_tcp_tx_U0_m_axis_tcp_tx_meta_TKEEP,
        m_axis_tcp_tx_meta_TSTRB => tie_off_tcp_tx_U0_m_axis_tcp_tx_meta_TSTRB,
        m_axis_tcp_tx_meta_TLAST => tie_off_tcp_tx_U0_m_axis_tcp_tx_meta_TLAST,
        m_axis_tcp_tx_data_TDATA => tie_off_tcp_tx_U0_m_axis_tcp_tx_data_TDATA,
        m_axis_tcp_tx_data_TVALID => tie_off_tcp_tx_U0_m_axis_tcp_tx_data_TVALID,
        m_axis_tcp_tx_data_TREADY => m_axis_tcp_tx_data_TREADY,
        m_axis_tcp_tx_data_TKEEP => tie_off_tcp_tx_U0_m_axis_tcp_tx_data_TKEEP,
        m_axis_tcp_tx_data_TSTRB => tie_off_tcp_tx_U0_m_axis_tcp_tx_data_TSTRB,
        m_axis_tcp_tx_data_TLAST => tie_off_tcp_tx_U0_m_axis_tcp_tx_data_TLAST,
        s_axis_tcp_tx_status_TDATA => s_axis_tcp_tx_status_TDATA,
        s_axis_tcp_tx_status_TVALID => s_axis_tcp_tx_status_TVALID,
        s_axis_tcp_tx_status_TREADY => tie_off_tcp_tx_U0_s_axis_tcp_tx_status_TREADY,
        s_axis_tcp_tx_status_TKEEP => s_axis_tcp_tx_status_TKEEP,
        s_axis_tcp_tx_status_TSTRB => s_axis_tcp_tx_status_TSTRB,
        s_axis_tcp_tx_status_TLAST => s_axis_tcp_tx_status_TLAST);

    tie_off_udp_U0 : component hls_recv_krnl_tie_off_udp
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => tie_off_udp_U0_ap_start,
        ap_done => tie_off_udp_U0_ap_done,
        ap_continue => tie_off_udp_U0_ap_continue,
        ap_idle => tie_off_udp_U0_ap_idle,
        ap_ready => tie_off_udp_U0_ap_ready,
        s_axis_udp_rx_TDATA => s_axis_udp_rx_TDATA,
        s_axis_udp_rx_TVALID => s_axis_udp_rx_TVALID,
        s_axis_udp_rx_TREADY => tie_off_udp_U0_s_axis_udp_rx_TREADY,
        s_axis_udp_rx_TKEEP => s_axis_udp_rx_TKEEP,
        s_axis_udp_rx_TSTRB => s_axis_udp_rx_TSTRB,
        s_axis_udp_rx_TLAST => s_axis_udp_rx_TLAST,
        m_axis_udp_tx_TDATA => tie_off_udp_U0_m_axis_udp_tx_TDATA,
        m_axis_udp_tx_TVALID => tie_off_udp_U0_m_axis_udp_tx_TVALID,
        m_axis_udp_tx_TREADY => m_axis_udp_tx_TREADY,
        m_axis_udp_tx_TKEEP => tie_off_udp_U0_m_axis_udp_tx_TKEEP,
        m_axis_udp_tx_TSTRB => tie_off_udp_U0_m_axis_udp_tx_TSTRB,
        m_axis_udp_tx_TLAST => tie_off_udp_U0_m_axis_udp_tx_TLAST,
        s_axis_udp_rx_meta_TDATA => s_axis_udp_rx_meta_TDATA,
        s_axis_udp_rx_meta_TVALID => s_axis_udp_rx_meta_TVALID,
        s_axis_udp_rx_meta_TREADY => tie_off_udp_U0_s_axis_udp_rx_meta_TREADY,
        s_axis_udp_rx_meta_TKEEP => s_axis_udp_rx_meta_TKEEP,
        s_axis_udp_rx_meta_TSTRB => s_axis_udp_rx_meta_TSTRB,
        s_axis_udp_rx_meta_TLAST => s_axis_udp_rx_meta_TLAST,
        m_axis_udp_tx_meta_TDATA => tie_off_udp_U0_m_axis_udp_tx_meta_TDATA,
        m_axis_udp_tx_meta_TVALID => tie_off_udp_U0_m_axis_udp_tx_meta_TVALID,
        m_axis_udp_tx_meta_TREADY => m_axis_udp_tx_meta_TREADY,
        m_axis_udp_tx_meta_TKEEP => tie_off_udp_U0_m_axis_udp_tx_meta_TKEEP,
        m_axis_udp_tx_meta_TSTRB => tie_off_udp_U0_m_axis_udp_tx_meta_TSTRB,
        m_axis_udp_tx_meta_TLAST => tie_off_udp_U0_m_axis_udp_tx_meta_TLAST);

    tie_off_tcp_close_con_U0 : component hls_recv_krnl_tie_off_tcp_close_con
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => tie_off_tcp_close_con_U0_ap_start,
        ap_done => tie_off_tcp_close_con_U0_ap_done,
        ap_continue => tie_off_tcp_close_con_U0_ap_continue,
        ap_idle => tie_off_tcp_close_con_U0_ap_idle,
        ap_ready => tie_off_tcp_close_con_U0_ap_ready,
        m_axis_tcp_close_connection_TDATA => tie_off_tcp_close_con_U0_m_axis_tcp_close_connection_TDATA,
        m_axis_tcp_close_connection_TVALID => tie_off_tcp_close_con_U0_m_axis_tcp_close_connection_TVALID,
        m_axis_tcp_close_connection_TREADY => m_axis_tcp_close_connection_TREADY,
        m_axis_tcp_close_connection_TKEEP => tie_off_tcp_close_con_U0_m_axis_tcp_close_connection_TKEEP,
        m_axis_tcp_close_connection_TSTRB => tie_off_tcp_close_con_U0_m_axis_tcp_close_connection_TSTRB,
        m_axis_tcp_close_connection_TLAST => tie_off_tcp_close_con_U0_m_axis_tcp_close_connection_TLAST);

    useConn_c1_U : component hls_recv_krnl_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_recv_krnl_entry3_U0_useConn_out_din,
        if_full_n => useConn_c1_full_n,
        if_write => hls_recv_krnl_entry3_U0_useConn_out_write,
        if_dout => useConn_c1_dout,
        if_empty_n => useConn_c1_empty_n,
        if_read => hls_recv_krnl_entry45_U0_useConn_read);

    basePort_c2_U : component hls_recv_krnl_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_recv_krnl_entry3_U0_basePort_out_din,
        if_full_n => basePort_c2_full_n,
        if_write => hls_recv_krnl_entry3_U0_basePort_out_write,
        if_dout => basePort_c2_dout,
        if_empty_n => basePort_c2_empty_n,
        if_read => hls_recv_krnl_entry45_U0_basePort_read);

    expectedRxByteCnt_c3_U : component hls_recv_krnl_fifo_w64_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_recv_krnl_entry3_U0_expectedRxByteCnt_out_din,
        if_full_n => expectedRxByteCnt_c3_full_n,
        if_write => hls_recv_krnl_entry3_U0_expectedRxByteCnt_out_write,
        if_dout => expectedRxByteCnt_c3_dout,
        if_empty_n => expectedRxByteCnt_c3_empty_n,
        if_read => hls_recv_krnl_entry45_U0_expectedRxByteCnt_read);

    out_time_c4_U : component hls_recv_krnl_fifo_w64_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_recv_krnl_entry3_U0_out_time_out_din,
        if_full_n => out_time_c4_full_n,
        if_write => hls_recv_krnl_entry3_U0_out_time_out_write,
        if_dout => out_time_c4_dout,
        if_empty_n => out_time_c4_empty_n,
        if_read => hls_recv_krnl_entry45_U0_out_time_read);

    useConn_c_U : component hls_recv_krnl_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_recv_krnl_entry45_U0_useConn_out_din,
        if_full_n => useConn_c_full_n,
        if_write => hls_recv_krnl_entry45_U0_useConn_out_write,
        if_dout => useConn_c_dout,
        if_empty_n => useConn_c_empty_n,
        if_read => listenPorts_U0_useConn_read);

    basePort_c_U : component hls_recv_krnl_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_recv_krnl_entry45_U0_basePort_out_din,
        if_full_n => basePort_c_full_n,
        if_write => hls_recv_krnl_entry45_U0_basePort_out_write,
        if_dout => basePort_c_dout,
        if_empty_n => basePort_c_empty_n,
        if_read => listenPorts_U0_basePort_read);

    expectedRxByteCnt_c_U : component hls_recv_krnl_fifo_w64_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_recv_krnl_entry45_U0_expectedRxByteCnt_out_din,
        if_full_n => expectedRxByteCnt_c_full_n,
        if_write => hls_recv_krnl_entry45_U0_expectedRxByteCnt_out_write,
        if_dout => expectedRxByteCnt_c_dout,
        if_empty_n => expectedRxByteCnt_c_empty_n,
        if_read => Block_split11_proc_U0_expectedRxByteCnt_read);

    expectedRxByteCnt_c44_U : component hls_recv_krnl_fifo_w64_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_recv_krnl_entry45_U0_expectedRxByteCnt_out1_din,
        if_full_n => expectedRxByteCnt_c44_full_n,
        if_write => hls_recv_krnl_entry45_U0_expectedRxByteCnt_out1_write,
        if_dout => expectedRxByteCnt_c44_dout,
        if_empty_n => expectedRxByteCnt_c44_empty_n,
        if_read => recvData_U0_expRxBytePerSession_read);

    out_time_c_U : component hls_recv_krnl_fifo_w64_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_recv_krnl_entry45_U0_out_time_out_din,
        if_full_n => out_time_c_full_n,
        if_write => hls_recv_krnl_entry45_U0_out_time_out_write,
        if_dout => out_time_c_dout,
        if_empty_n => out_time_c_empty_n,
        if_read => backgroundclock_U0_out_time_read);

    ComputeWordCnt_loc_c_U : component hls_recv_krnl_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split11_proc_U0_ComputeWordCnt_out_out_din,
        if_full_n => ComputeWordCnt_loc_c_full_n,
        if_write => Block_split11_proc_U0_ComputeWordCnt_out_out_write,
        if_dout => ComputeWordCnt_loc_c_dout,
        if_empty_n => ComputeWordCnt_loc_c_empty_n,
        if_read => partition_U0_ComputeWordCnt_loc_read);

    s_data_net_out_U : component hls_recv_krnl_fifo_w512_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => recvData_U0_s_data_net_out_din,
        if_full_n => s_data_net_out_full_n,
        if_write => recvData_U0_s_data_net_out_write,
        if_dout => s_data_net_out_dout,
        if_empty_n => s_data_net_out_empty_n,
        if_read => partition_U0_s_data_net_out_read);

    timesha_U : component hls_recv_krnl_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mysha_U0_timesha_din,
        if_full_n => timesha_full_n,
        if_write => mysha_U0_timesha_write,
        if_dout => timesha_dout,
        if_empty_n => timesha_empty_n,
        if_read => backgroundclock_U0_timesha_read);

    timeaes_U : component hls_recv_krnl_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => myaes_U0_timeaes_din,
        if_full_n => timeaes_full_n,
        if_write => myaes_U0_timeaes_write,
        if_dout => timeaes_dout,
        if_empty_n => timeaes_empty_n,
        if_read => backgroundclock_U0_timeaes_read);

    ComputeWordCnt_loc_c45_U : component hls_recv_krnl_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => partition_U0_ComputeWordCnt_loc_out_din,
        if_full_n => ComputeWordCnt_loc_c45_full_n,
        if_write => partition_U0_ComputeWordCnt_loc_out_write,
        if_dout => ComputeWordCnt_loc_c45_dout,
        if_empty_n => ComputeWordCnt_loc_c45_empty_n,
        if_read => consumetrans_U0_ComputeWordCnt_loc_read);

    ComputeWordCnt_loc_c46_U : component hls_recv_krnl_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => partition_U0_ComputeWordCnt_loc_out1_din,
        if_full_n => ComputeWordCnt_loc_c46_full_n,
        if_write => partition_U0_ComputeWordCnt_loc_out1_write,
        if_dout => ComputeWordCnt_loc_c46_dout,
        if_empty_n => ComputeWordCnt_loc_c46_empty_n,
        if_read => prepare_sha_U0_ComputeWordCnt_loc_read);

    s_data_cal_U : component hls_recv_krnl_fifo_w512_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => partition_U0_s_data_cal_din,
        if_full_n => s_data_cal_full_n,
        if_write => partition_U0_s_data_cal_write,
        if_dout => s_data_cal_dout,
        if_empty_n => s_data_cal_empty_n,
        if_read => prepare_sha_U0_s_data_cal_read);

    s_data_out_U : component hls_recv_krnl_fifo_w512_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => partition_U0_s_data_out_din,
        if_full_n => s_data_out_full_n,
        if_write => partition_U0_s_data_out_write,
        if_dout => s_data_out_dout,
        if_empty_n => s_data_out_empty_n,
        if_read => consumetrans_U0_s_data_out_read);

    ComputeWordCnt_loc_c47_U : component hls_recv_krnl_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => prepare_sha_U0_ComputeWordCnt_loc_out_din,
        if_full_n => ComputeWordCnt_loc_c47_full_n,
        if_write => prepare_sha_U0_ComputeWordCnt_loc_out_write,
        if_dout => ComputeWordCnt_loc_c47_dout,
        if_empty_n => ComputeWordCnt_loc_c47_empty_n,
        if_read => mysha_U0_ComputeWordCnt_loc_read);

    endMsgLenStrm_U : component hls_recv_krnl_fifo_w1_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => prepare_sha_U0_endMsgLenStrm_din,
        if_full_n => endMsgLenStrm_full_n,
        if_write => prepare_sha_U0_endMsgLenStrm_write,
        if_dout => endMsgLenStrm_dout,
        if_empty_n => endMsgLenStrm_empty_n,
        if_read => mysha_U0_endMsgLenStrm_read);

    msgLenStrm_U : component hls_recv_krnl_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => prepare_sha_U0_msgLenStrm_din,
        if_full_n => msgLenStrm_full_n,
        if_write => prepare_sha_U0_msgLenStrm_write,
        if_dout => msgLenStrm_dout,
        if_empty_n => msgLenStrm_empty_n,
        if_read => mysha_U0_msgLenStrm_read);

    msgStrm_U : component hls_recv_krnl_fifo_w64_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => prepare_sha_U0_msgStrm_din,
        if_full_n => msgStrm_full_n,
        if_write => prepare_sha_U0_msgStrm_write,
        if_dout => msgStrm_dout,
        if_empty_n => msgStrm_empty_n,
        if_read => mysha_U0_msgStrm_read);

    sha_in_U : component hls_recv_krnl_fifo_w512_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => prepare_sha_U0_sha_in_din,
        if_full_n => sha_in_full_n,
        if_write => prepare_sha_U0_sha_in_write,
        if_dout => sha_in_dout,
        if_empty_n => sha_in_empty_n,
        if_read => mysha_U0_sha_in_read);

    ComputeWordCnt_loc_c48_U : component hls_recv_krnl_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mysha_U0_ComputeWordCnt_loc_out_din,
        if_full_n => ComputeWordCnt_loc_c48_full_n,
        if_write => mysha_U0_ComputeWordCnt_loc_out_write,
        if_dout => ComputeWordCnt_loc_c48_dout,
        if_empty_n => ComputeWordCnt_loc_c48_empty_n,
        if_read => consumesha_U0_ComputeWordCnt_loc_read);

    ComputeWordCnt_loc_c49_U : component hls_recv_krnl_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mysha_U0_ComputeWordCnt_loc_out1_din,
        if_full_n => ComputeWordCnt_loc_c49_full_n,
        if_write => mysha_U0_ComputeWordCnt_loc_out1_write,
        if_dout => ComputeWordCnt_loc_c49_dout,
        if_empty_n => ComputeWordCnt_loc_c49_empty_n,
        if_read => prepare_aes_U0_ComputeWordCnt_loc_read);

    sha_out_U : component hls_recv_krnl_fifo_w512_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mysha_U0_sha_out_din,
        if_full_n => sha_out_full_n,
        if_write => mysha_U0_sha_out_write,
        if_dout => sha_out_dout,
        if_empty_n => sha_out_empty_n,
        if_read => prepare_aes_U0_sha_out_read);

    digestStrm_U : component hls_recv_krnl_fifo_w256_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mysha_U0_digestStrm_din,
        if_full_n => digestStrm_full_n,
        if_write => mysha_U0_digestStrm_write,
        if_dout => digestStrm_dout,
        if_empty_n => digestStrm_empty_n,
        if_read => consumesha_U0_digestStrm_read);

    endDigestStrm_U : component hls_recv_krnl_fifo_w1_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mysha_U0_endDigestStrm_din,
        if_full_n => endDigestStrm_full_n,
        if_write => mysha_U0_endDigestStrm_write,
        if_dout => endDigestStrm_dout,
        if_empty_n => endDigestStrm_empty_n,
        if_read => consumesha_U0_endDigestStrm_read);

    ciphertextStrm_U : component hls_recv_krnl_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => prepare_aes_U0_ciphertextStrm_din,
        if_full_n => ciphertextStrm_full_n,
        if_write => prepare_aes_U0_ciphertextStrm_write,
        if_dout => ciphertextStrm_dout,
        if_empty_n => ciphertextStrm_empty_n,
        if_read => myaes_U0_ciphertextStrm_read);

    endCiphertextStrm_U : component hls_recv_krnl_fifo_w1_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => prepare_aes_U0_endCiphertextStrm_din,
        if_full_n => endCiphertextStrm_full_n,
        if_write => prepare_aes_U0_endCiphertextStrm_write,
        if_dout => endCiphertextStrm_dout,
        if_empty_n => endCiphertextStrm_empty_n,
        if_read => myaes_U0_endCiphertextStrm_read);

    cipherkeyStrm_U : component hls_recv_krnl_fifo_w256_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => prepare_aes_U0_cipherkeyStrm_din,
        if_full_n => cipherkeyStrm_full_n,
        if_write => prepare_aes_U0_cipherkeyStrm_write,
        if_dout => cipherkeyStrm_dout,
        if_empty_n => cipherkeyStrm_empty_n,
        if_read => myaes_U0_cipherkeyStrm_read);

    IVStrm_U : component hls_recv_krnl_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => prepare_aes_U0_IVStrm_din,
        if_full_n => IVStrm_full_n,
        if_write => prepare_aes_U0_IVStrm_write,
        if_dout => IVStrm_dout,
        if_empty_n => IVStrm_empty_n,
        if_read => myaes_U0_IVStrm_read);

    ComputeWordCnt_loc_c50_U : component hls_recv_krnl_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => prepare_aes_U0_ComputeWordCnt_loc_out_din,
        if_full_n => ComputeWordCnt_loc_c50_full_n,
        if_write => prepare_aes_U0_ComputeWordCnt_loc_out_write,
        if_dout => ComputeWordCnt_loc_c50_dout,
        if_empty_n => ComputeWordCnt_loc_c50_empty_n,
        if_read => myaes_U0_ComputeWordCnt_loc_read);

    plaintextStrm_U : component hls_recv_krnl_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => myaes_U0_plaintextStrm_din,
        if_full_n => plaintextStrm_full_n,
        if_write => myaes_U0_plaintextStrm_write,
        if_dout => plaintextStrm_dout,
        if_empty_n => plaintextStrm_empty_n,
        if_read => consumeaes_U0_plaintextStrm_read);

    endPlaintextStrm_U : component hls_recv_krnl_fifo_w1_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => myaes_U0_endPlaintextStrm_din,
        if_full_n => endPlaintextStrm_full_n,
        if_write => myaes_U0_endPlaintextStrm_write,
        if_dout => endPlaintextStrm_dout,
        if_empty_n => endPlaintextStrm_empty_n,
        if_read => consumeaes_U0_endPlaintextStrm_read);

    ComputeWordCnt_loc_c51_U : component hls_recv_krnl_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => myaes_U0_ComputeWordCnt_loc_out_din,
        if_full_n => ComputeWordCnt_loc_c51_full_n,
        if_write => myaes_U0_ComputeWordCnt_loc_out_write,
        if_dout => ComputeWordCnt_loc_c51_dout,
        if_empty_n => ComputeWordCnt_loc_c51_empty_n,
        if_read => consumeaes_U0_ComputeWordCnt_loc_read);

    start_for_hls_recv_krnl_entry45_U0_U : component hls_recv_krnl_start_for_hls_recv_krnl_entry45_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_hls_recv_krnl_entry45_U0_din,
        if_full_n => start_for_hls_recv_krnl_entry45_U0_full_n,
        if_write => hls_recv_krnl_entry3_U0_start_write,
        if_dout => start_for_hls_recv_krnl_entry45_U0_dout,
        if_empty_n => start_for_hls_recv_krnl_entry45_U0_empty_n,
        if_read => hls_recv_krnl_entry45_U0_ap_ready);

    start_for_Block_split11_proc_U0_U : component hls_recv_krnl_start_for_Block_split11_proc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Block_split11_proc_U0_din,
        if_full_n => start_for_Block_split11_proc_U0_full_n,
        if_write => hls_recv_krnl_entry45_U0_start_write,
        if_dout => start_for_Block_split11_proc_U0_dout,
        if_empty_n => start_for_Block_split11_proc_U0_empty_n,
        if_read => Block_split11_proc_U0_ap_ready);

    start_for_listenPorts_U0_U : component hls_recv_krnl_start_for_listenPorts_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_listenPorts_U0_din,
        if_full_n => start_for_listenPorts_U0_full_n,
        if_write => hls_recv_krnl_entry45_U0_start_write,
        if_dout => start_for_listenPorts_U0_dout,
        if_empty_n => start_for_listenPorts_U0_empty_n,
        if_read => listenPorts_U0_ap_ready);

    start_for_recvData_U0_U : component hls_recv_krnl_start_for_recvData_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_recvData_U0_din,
        if_full_n => start_for_recvData_U0_full_n,
        if_write => hls_recv_krnl_entry45_U0_start_write,
        if_dout => start_for_recvData_U0_dout,
        if_empty_n => start_for_recvData_U0_empty_n,
        if_read => recvData_U0_ap_ready);

    start_for_backgroundclock_U0_U : component hls_recv_krnl_start_for_backgroundclock_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_backgroundclock_U0_din,
        if_full_n => start_for_backgroundclock_U0_full_n,
        if_write => hls_recv_krnl_entry45_U0_start_write,
        if_dout => start_for_backgroundclock_U0_dout,
        if_empty_n => start_for_backgroundclock_U0_empty_n,
        if_read => backgroundclock_U0_ap_ready);

    start_for_partition_U0_U : component hls_recv_krnl_start_for_partition_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_partition_U0_din,
        if_full_n => start_for_partition_U0_full_n,
        if_write => Block_split11_proc_U0_start_write,
        if_dout => start_for_partition_U0_dout,
        if_empty_n => start_for_partition_U0_empty_n,
        if_read => partition_U0_ap_ready);

    start_for_consumetrans_U0_U : component hls_recv_krnl_start_for_consumetrans_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_consumetrans_U0_din,
        if_full_n => start_for_consumetrans_U0_full_n,
        if_write => partition_U0_start_write,
        if_dout => start_for_consumetrans_U0_dout,
        if_empty_n => start_for_consumetrans_U0_empty_n,
        if_read => consumetrans_U0_ap_ready);

    start_for_prepare_sha_U0_U : component hls_recv_krnl_start_for_prepare_sha_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_prepare_sha_U0_din,
        if_full_n => start_for_prepare_sha_U0_full_n,
        if_write => partition_U0_start_write,
        if_dout => start_for_prepare_sha_U0_dout,
        if_empty_n => start_for_prepare_sha_U0_empty_n,
        if_read => prepare_sha_U0_ap_ready);

    start_for_mysha_U0_U : component hls_recv_krnl_start_for_mysha_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_mysha_U0_din,
        if_full_n => start_for_mysha_U0_full_n,
        if_write => prepare_sha_U0_start_write,
        if_dout => start_for_mysha_U0_dout,
        if_empty_n => start_for_mysha_U0_empty_n,
        if_read => mysha_U0_ap_ready);

    start_for_consumesha_U0_U : component hls_recv_krnl_start_for_consumesha_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_consumesha_U0_din,
        if_full_n => start_for_consumesha_U0_full_n,
        if_write => mysha_U0_start_write,
        if_dout => start_for_consumesha_U0_dout,
        if_empty_n => start_for_consumesha_U0_empty_n,
        if_read => consumesha_U0_ap_ready);

    start_for_prepare_aes_U0_U : component hls_recv_krnl_start_for_prepare_aes_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_prepare_aes_U0_din,
        if_full_n => start_for_prepare_aes_U0_full_n,
        if_write => mysha_U0_start_write,
        if_dout => start_for_prepare_aes_U0_dout,
        if_empty_n => start_for_prepare_aes_U0_empty_n,
        if_read => prepare_aes_U0_ap_ready);

    start_for_myaes_U0_U : component hls_recv_krnl_start_for_myaes_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_myaes_U0_din,
        if_full_n => start_for_myaes_U0_full_n,
        if_write => prepare_aes_U0_start_write,
        if_dout => start_for_myaes_U0_dout,
        if_empty_n => start_for_myaes_U0_empty_n,
        if_read => myaes_U0_ap_ready);

    start_for_consumeaes_U0_U : component hls_recv_krnl_start_for_consumeaes_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_consumeaes_U0_din,
        if_full_n => start_for_consumeaes_U0_full_n,
        if_write => myaes_U0_start_write,
        if_dout => start_for_consumeaes_U0_dout,
        if_empty_n => start_for_consumeaes_U0_empty_n,
        if_read => consumeaes_U0_ap_ready);





    ap_sync_reg_hls_recv_krnl_entry3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_hls_recv_krnl_entry3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_hls_recv_krnl_entry3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_hls_recv_krnl_entry3_U0_ap_ready <= ap_sync_hls_recv_krnl_entry3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_tie_off_tcp_close_con_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_tie_off_tcp_close_con_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_tie_off_tcp_close_con_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_tie_off_tcp_close_con_U0_ap_ready <= ap_sync_tie_off_tcp_close_con_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_tie_off_tcp_open_connection_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_tie_off_tcp_open_connection_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_tie_off_tcp_open_connection_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_tie_off_tcp_open_connection_U0_ap_ready <= ap_sync_tie_off_tcp_open_connection_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_tie_off_tcp_tx_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_tie_off_tcp_tx_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_tie_off_tcp_tx_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_tie_off_tcp_tx_U0_ap_ready <= ap_sync_tie_off_tcp_tx_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_tie_off_udp_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_tie_off_udp_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_tie_off_udp_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_tie_off_udp_U0_ap_ready <= ap_sync_tie_off_udp_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    Block_split11_proc_U0_ap_continue <= ap_const_logic_1;
    Block_split11_proc_U0_ap_start <= start_for_Block_split11_proc_U0_empty_n;
    ap_done <= ap_sync_done;
    ap_idle <= (tie_off_udp_U0_ap_idle and tie_off_tcp_tx_U0_ap_idle and tie_off_tcp_open_connection_U0_ap_idle and tie_off_tcp_close_con_U0_ap_idle and recvData_U0_ap_idle and prepare_sha_U0_ap_idle and prepare_aes_U0_ap_idle and partition_U0_ap_idle and mysha_U0_ap_idle and myaes_U0_ap_idle and listenPorts_U0_ap_idle and hls_recv_krnl_entry45_U0_ap_idle and hls_recv_krnl_entry3_U0_ap_idle and consumetrans_U0_ap_idle and consumesha_U0_ap_idle and consumeaes_U0_ap_idle and backgroundclock_U0_ap_idle and Block_split11_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (tie_off_udp_U0_ap_done and tie_off_tcp_tx_U0_ap_done and tie_off_tcp_open_connection_U0_ap_done and tie_off_tcp_close_con_U0_ap_done and recvData_U0_ap_done and listenPorts_U0_ap_done and consumetrans_U0_ap_done and consumesha_U0_ap_done and consumeaes_U0_ap_done and backgroundclock_U0_ap_done);
    ap_sync_hls_recv_krnl_entry3_U0_ap_ready <= (hls_recv_krnl_entry3_U0_ap_ready or ap_sync_reg_hls_recv_krnl_entry3_U0_ap_ready);
    ap_sync_ready <= (ap_sync_tie_off_udp_U0_ap_ready and ap_sync_tie_off_tcp_tx_U0_ap_ready and ap_sync_tie_off_tcp_open_connection_U0_ap_ready and ap_sync_tie_off_tcp_close_con_U0_ap_ready and ap_sync_hls_recv_krnl_entry3_U0_ap_ready);
    ap_sync_tie_off_tcp_close_con_U0_ap_ready <= (tie_off_tcp_close_con_U0_ap_ready or ap_sync_reg_tie_off_tcp_close_con_U0_ap_ready);
    ap_sync_tie_off_tcp_open_connection_U0_ap_ready <= (tie_off_tcp_open_connection_U0_ap_ready or ap_sync_reg_tie_off_tcp_open_connection_U0_ap_ready);
    ap_sync_tie_off_tcp_tx_U0_ap_ready <= (tie_off_tcp_tx_U0_ap_ready or ap_sync_reg_tie_off_tcp_tx_U0_ap_ready);
    ap_sync_tie_off_udp_U0_ap_ready <= (tie_off_udp_U0_ap_ready or ap_sync_reg_tie_off_udp_U0_ap_ready);
    backgroundclock_U0_ap_continue <= ap_sync_continue;
    backgroundclock_U0_ap_start <= start_for_backgroundclock_U0_empty_n;
    backgroundclock_U0_start_full_n <= ap_const_logic_1;
    backgroundclock_U0_start_write <= ap_const_logic_0;
    consumeaes_U0_ap_continue <= ap_sync_continue;
    consumeaes_U0_ap_start <= start_for_consumeaes_U0_empty_n;
    consumeaes_U0_start_full_n <= ap_const_logic_1;
    consumeaes_U0_start_write <= ap_const_logic_0;
    consumesha_U0_ap_continue <= ap_sync_continue;
    consumesha_U0_ap_start <= start_for_consumesha_U0_empty_n;
    consumesha_U0_start_full_n <= ap_const_logic_1;
    consumesha_U0_start_write <= ap_const_logic_0;
    consumetrans_U0_ap_continue <= ap_sync_continue;
    consumetrans_U0_ap_start <= start_for_consumetrans_U0_empty_n;
    consumetrans_U0_start_full_n <= ap_const_logic_1;
    consumetrans_U0_start_write <= ap_const_logic_0;
    hls_recv_krnl_entry3_U0_ap_continue <= ap_const_logic_1;
    hls_recv_krnl_entry3_U0_ap_start <= ((ap_sync_reg_hls_recv_krnl_entry3_U0_ap_ready xor ap_const_logic_1) and ap_start);
    hls_recv_krnl_entry45_U0_ap_continue <= ap_const_logic_1;
    hls_recv_krnl_entry45_U0_ap_start <= start_for_hls_recv_krnl_entry45_U0_empty_n;
    hls_recv_krnl_entry45_U0_start_full_n <= (start_for_recvData_U0_full_n and start_for_listenPorts_U0_full_n and start_for_backgroundclock_U0_full_n and start_for_Block_split11_proc_U0_full_n);
    listenPorts_U0_ap_continue <= ap_sync_continue;
    listenPorts_U0_ap_start <= start_for_listenPorts_U0_empty_n;
    listenPorts_U0_start_full_n <= ap_const_logic_1;
    listenPorts_U0_start_write <= ap_const_logic_0;
    m_axis_tcp_close_connection_TDATA <= tie_off_tcp_close_con_U0_m_axis_tcp_close_connection_TDATA;
    m_axis_tcp_close_connection_TKEEP <= tie_off_tcp_close_con_U0_m_axis_tcp_close_connection_TKEEP;
    m_axis_tcp_close_connection_TLAST <= tie_off_tcp_close_con_U0_m_axis_tcp_close_connection_TLAST;
    m_axis_tcp_close_connection_TSTRB <= tie_off_tcp_close_con_U0_m_axis_tcp_close_connection_TSTRB;
    m_axis_tcp_close_connection_TVALID <= tie_off_tcp_close_con_U0_m_axis_tcp_close_connection_TVALID;
    m_axis_tcp_listen_port_TDATA <= listenPorts_U0_m_axis_tcp_listen_port_TDATA;
    m_axis_tcp_listen_port_TKEEP <= listenPorts_U0_m_axis_tcp_listen_port_TKEEP;
    m_axis_tcp_listen_port_TLAST <= listenPorts_U0_m_axis_tcp_listen_port_TLAST;
    m_axis_tcp_listen_port_TSTRB <= listenPorts_U0_m_axis_tcp_listen_port_TSTRB;
    m_axis_tcp_listen_port_TVALID <= listenPorts_U0_m_axis_tcp_listen_port_TVALID;
    m_axis_tcp_open_connection_TDATA <= tie_off_tcp_open_connection_U0_m_axis_tcp_open_connection_TDATA;
    m_axis_tcp_open_connection_TKEEP <= tie_off_tcp_open_connection_U0_m_axis_tcp_open_connection_TKEEP;
    m_axis_tcp_open_connection_TLAST <= tie_off_tcp_open_connection_U0_m_axis_tcp_open_connection_TLAST;
    m_axis_tcp_open_connection_TSTRB <= tie_off_tcp_open_connection_U0_m_axis_tcp_open_connection_TSTRB;
    m_axis_tcp_open_connection_TVALID <= tie_off_tcp_open_connection_U0_m_axis_tcp_open_connection_TVALID;
    m_axis_tcp_read_pkg_TDATA <= recvData_U0_m_axis_tcp_read_pkg_TDATA;
    m_axis_tcp_read_pkg_TKEEP <= recvData_U0_m_axis_tcp_read_pkg_TKEEP;
    m_axis_tcp_read_pkg_TLAST <= recvData_U0_m_axis_tcp_read_pkg_TLAST;
    m_axis_tcp_read_pkg_TSTRB <= recvData_U0_m_axis_tcp_read_pkg_TSTRB;
    m_axis_tcp_read_pkg_TVALID <= recvData_U0_m_axis_tcp_read_pkg_TVALID;
    m_axis_tcp_tx_data_TDATA <= tie_off_tcp_tx_U0_m_axis_tcp_tx_data_TDATA;
    m_axis_tcp_tx_data_TKEEP <= tie_off_tcp_tx_U0_m_axis_tcp_tx_data_TKEEP;
    m_axis_tcp_tx_data_TLAST <= tie_off_tcp_tx_U0_m_axis_tcp_tx_data_TLAST;
    m_axis_tcp_tx_data_TSTRB <= tie_off_tcp_tx_U0_m_axis_tcp_tx_data_TSTRB;
    m_axis_tcp_tx_data_TVALID <= tie_off_tcp_tx_U0_m_axis_tcp_tx_data_TVALID;
    m_axis_tcp_tx_meta_TDATA <= tie_off_tcp_tx_U0_m_axis_tcp_tx_meta_TDATA;
    m_axis_tcp_tx_meta_TKEEP <= tie_off_tcp_tx_U0_m_axis_tcp_tx_meta_TKEEP;
    m_axis_tcp_tx_meta_TLAST <= tie_off_tcp_tx_U0_m_axis_tcp_tx_meta_TLAST;
    m_axis_tcp_tx_meta_TSTRB <= tie_off_tcp_tx_U0_m_axis_tcp_tx_meta_TSTRB;
    m_axis_tcp_tx_meta_TVALID <= tie_off_tcp_tx_U0_m_axis_tcp_tx_meta_TVALID;
    m_axis_udp_tx_TDATA <= tie_off_udp_U0_m_axis_udp_tx_TDATA;
    m_axis_udp_tx_TKEEP <= tie_off_udp_U0_m_axis_udp_tx_TKEEP;
    m_axis_udp_tx_TLAST <= tie_off_udp_U0_m_axis_udp_tx_TLAST;
    m_axis_udp_tx_TSTRB <= tie_off_udp_U0_m_axis_udp_tx_TSTRB;
    m_axis_udp_tx_TVALID <= tie_off_udp_U0_m_axis_udp_tx_TVALID;
    m_axis_udp_tx_meta_TDATA <= tie_off_udp_U0_m_axis_udp_tx_meta_TDATA;
    m_axis_udp_tx_meta_TKEEP <= tie_off_udp_U0_m_axis_udp_tx_meta_TKEEP;
    m_axis_udp_tx_meta_TLAST <= tie_off_udp_U0_m_axis_udp_tx_meta_TLAST;
    m_axis_udp_tx_meta_TSTRB <= tie_off_udp_U0_m_axis_udp_tx_meta_TSTRB;
    m_axis_udp_tx_meta_TVALID <= tie_off_udp_U0_m_axis_udp_tx_meta_TVALID;
    myaes_U0_ap_continue <= ap_const_logic_1;
    myaes_U0_ap_start <= start_for_myaes_U0_empty_n;
    mysha_U0_ap_continue <= ap_const_logic_1;
    mysha_U0_ap_start <= start_for_mysha_U0_empty_n;
    mysha_U0_start_full_n <= (start_for_prepare_aes_U0_full_n and start_for_consumesha_U0_full_n);
    partition_U0_ap_continue <= ap_const_logic_1;
    partition_U0_ap_start <= start_for_partition_U0_empty_n;
    partition_U0_start_full_n <= (start_for_prepare_sha_U0_full_n and start_for_consumetrans_U0_full_n);
    prepare_aes_U0_ap_continue <= ap_const_logic_1;
    prepare_aes_U0_ap_start <= start_for_prepare_aes_U0_empty_n;
    prepare_sha_U0_ap_continue <= ap_const_logic_1;
    prepare_sha_U0_ap_start <= start_for_prepare_sha_U0_empty_n;
    recvData_U0_ap_continue <= ap_sync_continue;
    recvData_U0_ap_start <= start_for_recvData_U0_empty_n;
    recvData_U0_start_full_n <= ap_const_logic_1;
    recvData_U0_start_write <= ap_const_logic_0;
    s_axis_tcp_notification_TREADY <= recvData_U0_s_axis_tcp_notification_TREADY;
    s_axis_tcp_open_status_TREADY <= tie_off_tcp_open_connection_U0_s_axis_tcp_open_status_TREADY;
    s_axis_tcp_port_status_TREADY <= listenPorts_U0_s_axis_tcp_port_status_TREADY;
    s_axis_tcp_rx_data_TREADY <= recvData_U0_s_axis_tcp_rx_data_TREADY;
    s_axis_tcp_rx_meta_TREADY <= recvData_U0_s_axis_tcp_rx_meta_TREADY;
    s_axis_tcp_tx_status_TREADY <= tie_off_tcp_tx_U0_s_axis_tcp_tx_status_TREADY;
    s_axis_udp_rx_TREADY <= tie_off_udp_U0_s_axis_udp_rx_TREADY;
    s_axis_udp_rx_meta_TREADY <= tie_off_udp_U0_s_axis_udp_rx_meta_TREADY;
    start_for_Block_split11_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_backgroundclock_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_consumeaes_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_consumesha_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_consumetrans_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_hls_recv_krnl_entry45_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_listenPorts_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_myaes_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_mysha_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_partition_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_prepare_aes_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_prepare_sha_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_recvData_U0_din <= (0=>ap_const_logic_1, others=>'-');
    tie_off_tcp_close_con_U0_ap_continue <= ap_sync_continue;
    tie_off_tcp_close_con_U0_ap_start <= ((ap_sync_reg_tie_off_tcp_close_con_U0_ap_ready xor ap_const_logic_1) and ap_start);
    tie_off_tcp_close_con_U0_start_full_n <= ap_const_logic_1;
    tie_off_tcp_close_con_U0_start_write <= ap_const_logic_0;
    tie_off_tcp_open_connection_U0_ap_continue <= ap_sync_continue;
    tie_off_tcp_open_connection_U0_ap_start <= ((ap_sync_reg_tie_off_tcp_open_connection_U0_ap_ready xor ap_const_logic_1) and ap_start);
    tie_off_tcp_open_connection_U0_start_full_n <= ap_const_logic_1;
    tie_off_tcp_open_connection_U0_start_write <= ap_const_logic_0;
    tie_off_tcp_tx_U0_ap_continue <= ap_sync_continue;
    tie_off_tcp_tx_U0_ap_start <= ((ap_sync_reg_tie_off_tcp_tx_U0_ap_ready xor ap_const_logic_1) and ap_start);
    tie_off_tcp_tx_U0_start_full_n <= ap_const_logic_1;
    tie_off_tcp_tx_U0_start_write <= ap_const_logic_0;
    tie_off_udp_U0_ap_continue <= ap_sync_continue;
    tie_off_udp_U0_ap_start <= ((ap_sync_reg_tie_off_udp_U0_ap_ready xor ap_const_logic_1) and ap_start);
    tie_off_udp_U0_start_full_n <= ap_const_logic_1;
    tie_off_udp_U0_start_write <= ap_const_logic_0;
end behav;
