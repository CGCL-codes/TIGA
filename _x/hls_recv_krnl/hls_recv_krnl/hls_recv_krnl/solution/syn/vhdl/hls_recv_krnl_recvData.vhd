-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_recv_krnl_recvData is
port (
    expRxBytePerSession_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    expRxBytePerSession_empty_n : IN STD_LOGIC;
    expRxBytePerSession_read : OUT STD_LOGIC;
    s_axis_tcp_notification_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    s_axis_tcp_notification_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    s_axis_tcp_notification_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    s_axis_tcp_notification_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_tcp_read_pkg_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axis_tcp_read_pkg_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axis_tcp_read_pkg_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axis_tcp_read_pkg_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tcp_rx_meta_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    s_axis_tcp_rx_meta_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    s_axis_tcp_rx_meta_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    s_axis_tcp_rx_meta_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tcp_rx_data_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    s_axis_tcp_rx_data_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_tcp_rx_data_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_tcp_rx_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_data_net_out_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    s_data_net_out_full_n : IN STD_LOGIC;
    s_data_net_out_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    s_axis_tcp_notification_TVALID : IN STD_LOGIC;
    s_axis_tcp_notification_TREADY : OUT STD_LOGIC;
    m_axis_tcp_read_pkg_TVALID : OUT STD_LOGIC;
    m_axis_tcp_read_pkg_TREADY : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    s_axis_tcp_rx_meta_TVALID : IN STD_LOGIC;
    s_axis_tcp_rx_meta_TREADY : OUT STD_LOGIC;
    s_axis_tcp_rx_data_TVALID : IN STD_LOGIC;
    s_axis_tcp_rx_data_TREADY : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of hls_recv_krnl_recvData is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal recvData_handshake_U0_ap_start : STD_LOGIC;
    signal recvData_handshake_U0_ap_done : STD_LOGIC;
    signal recvData_handshake_U0_ap_continue : STD_LOGIC;
    signal recvData_handshake_U0_ap_idle : STD_LOGIC;
    signal recvData_handshake_U0_ap_ready : STD_LOGIC;
    signal recvData_handshake_U0_nextRxPacketLength3_din : STD_LOGIC_VECTOR (15 downto 0);
    signal recvData_handshake_U0_nextRxPacketLength3_write : STD_LOGIC;
    signal recvData_handshake_U0_expRxBytePerSession_read : STD_LOGIC;
    signal recvData_handshake_U0_s_axis_tcp_notification_TREADY : STD_LOGIC;
    signal recvData_handshake_U0_m_axis_tcp_read_pkg_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal recvData_handshake_U0_m_axis_tcp_read_pkg_TVALID : STD_LOGIC;
    signal recvData_handshake_U0_m_axis_tcp_read_pkg_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal recvData_handshake_U0_m_axis_tcp_read_pkg_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal recvData_handshake_U0_m_axis_tcp_read_pkg_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal recvData_handshake_U0_expRxBytePerSession_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal recvData_handshake_U0_expRxBytePerSession_out_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal recvData_consumeData_U0_ap_start : STD_LOGIC;
    signal recvData_consumeData_U0_ap_done : STD_LOGIC;
    signal recvData_consumeData_U0_ap_continue : STD_LOGIC;
    signal recvData_consumeData_U0_ap_idle : STD_LOGIC;
    signal recvData_consumeData_U0_ap_ready : STD_LOGIC;
    signal recvData_consumeData_U0_nextRxPacketLength3_read : STD_LOGIC;
    signal recvData_consumeData_U0_expRxBytePerSession_read : STD_LOGIC;
    signal recvData_consumeData_U0_s_axis_tcp_rx_meta_TREADY : STD_LOGIC;
    signal recvData_consumeData_U0_s_axis_tcp_rx_data_TREADY : STD_LOGIC;
    signal recvData_consumeData_U0_s_data_net_out_din : STD_LOGIC_VECTOR (511 downto 0);
    signal recvData_consumeData_U0_s_data_net_out_write : STD_LOGIC;
    signal ap_sync_reg_recvData_consumeData_U0_ap_start : STD_LOGIC := '0';
    signal nextRxPacketLength_full_n : STD_LOGIC;
    signal nextRxPacketLength_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal nextRxPacketLength_empty_n : STD_LOGIC;
    signal expRxBytePerSession_c_i_full_n : STD_LOGIC;
    signal expRxBytePerSession_c_i_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal expRxBytePerSession_c_i_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hls_recv_krnl_recvData_handshake IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        nextRxPacketLength3_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        nextRxPacketLength3_full_n : IN STD_LOGIC;
        nextRxPacketLength3_write : OUT STD_LOGIC;
        expRxBytePerSession_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        expRxBytePerSession_empty_n : IN STD_LOGIC;
        expRxBytePerSession_read : OUT STD_LOGIC;
        s_axis_tcp_notification_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        s_axis_tcp_notification_TVALID : IN STD_LOGIC;
        s_axis_tcp_notification_TREADY : OUT STD_LOGIC;
        s_axis_tcp_notification_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
        s_axis_tcp_notification_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        s_axis_tcp_notification_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axis_tcp_read_pkg_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axis_tcp_read_pkg_TVALID : OUT STD_LOGIC;
        m_axis_tcp_read_pkg_TREADY : IN STD_LOGIC;
        m_axis_tcp_read_pkg_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axis_tcp_read_pkg_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axis_tcp_read_pkg_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        expRxBytePerSession_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        expRxBytePerSession_out_full_n : IN STD_LOGIC;
        expRxBytePerSession_out_write : OUT STD_LOGIC );
    end component;


    component hls_recv_krnl_recvData_consumeData IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        nextRxPacketLength3_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        nextRxPacketLength3_empty_n : IN STD_LOGIC;
        nextRxPacketLength3_read : OUT STD_LOGIC;
        expRxBytePerSession_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        expRxBytePerSession_empty_n : IN STD_LOGIC;
        expRxBytePerSession_read : OUT STD_LOGIC;
        s_axis_tcp_rx_meta_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        s_axis_tcp_rx_meta_TVALID : IN STD_LOGIC;
        s_axis_tcp_rx_meta_TREADY : OUT STD_LOGIC;
        s_axis_tcp_rx_meta_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
        s_axis_tcp_rx_meta_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        s_axis_tcp_rx_meta_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_tcp_rx_data_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        s_axis_tcp_rx_data_TVALID : IN STD_LOGIC;
        s_axis_tcp_rx_data_TREADY : OUT STD_LOGIC;
        s_axis_tcp_rx_data_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_tcp_rx_data_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_tcp_rx_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_data_net_out_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        s_data_net_out_full_n : IN STD_LOGIC;
        s_data_net_out_write : OUT STD_LOGIC );
    end component;


    component hls_recv_krnl_fifo_w16_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_recv_krnl_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    recvData_handshake_U0 : component hls_recv_krnl_recvData_handshake
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => recvData_handshake_U0_ap_start,
        ap_done => recvData_handshake_U0_ap_done,
        ap_continue => recvData_handshake_U0_ap_continue,
        ap_idle => recvData_handshake_U0_ap_idle,
        ap_ready => recvData_handshake_U0_ap_ready,
        nextRxPacketLength3_din => recvData_handshake_U0_nextRxPacketLength3_din,
        nextRxPacketLength3_full_n => nextRxPacketLength_full_n,
        nextRxPacketLength3_write => recvData_handshake_U0_nextRxPacketLength3_write,
        expRxBytePerSession_dout => expRxBytePerSession_dout,
        expRxBytePerSession_empty_n => expRxBytePerSession_empty_n,
        expRxBytePerSession_read => recvData_handshake_U0_expRxBytePerSession_read,
        s_axis_tcp_notification_TDATA => s_axis_tcp_notification_TDATA,
        s_axis_tcp_notification_TVALID => s_axis_tcp_notification_TVALID,
        s_axis_tcp_notification_TREADY => recvData_handshake_U0_s_axis_tcp_notification_TREADY,
        s_axis_tcp_notification_TKEEP => s_axis_tcp_notification_TKEEP,
        s_axis_tcp_notification_TSTRB => s_axis_tcp_notification_TSTRB,
        s_axis_tcp_notification_TLAST => s_axis_tcp_notification_TLAST,
        m_axis_tcp_read_pkg_TDATA => recvData_handshake_U0_m_axis_tcp_read_pkg_TDATA,
        m_axis_tcp_read_pkg_TVALID => recvData_handshake_U0_m_axis_tcp_read_pkg_TVALID,
        m_axis_tcp_read_pkg_TREADY => m_axis_tcp_read_pkg_TREADY,
        m_axis_tcp_read_pkg_TKEEP => recvData_handshake_U0_m_axis_tcp_read_pkg_TKEEP,
        m_axis_tcp_read_pkg_TSTRB => recvData_handshake_U0_m_axis_tcp_read_pkg_TSTRB,
        m_axis_tcp_read_pkg_TLAST => recvData_handshake_U0_m_axis_tcp_read_pkg_TLAST,
        expRxBytePerSession_out_din => recvData_handshake_U0_expRxBytePerSession_out_din,
        expRxBytePerSession_out_full_n => expRxBytePerSession_c_i_full_n,
        expRxBytePerSession_out_write => recvData_handshake_U0_expRxBytePerSession_out_write);

    recvData_consumeData_U0 : component hls_recv_krnl_recvData_consumeData
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => recvData_consumeData_U0_ap_start,
        ap_done => recvData_consumeData_U0_ap_done,
        ap_continue => recvData_consumeData_U0_ap_continue,
        ap_idle => recvData_consumeData_U0_ap_idle,
        ap_ready => recvData_consumeData_U0_ap_ready,
        nextRxPacketLength3_dout => nextRxPacketLength_dout,
        nextRxPacketLength3_empty_n => nextRxPacketLength_empty_n,
        nextRxPacketLength3_read => recvData_consumeData_U0_nextRxPacketLength3_read,
        expRxBytePerSession_dout => expRxBytePerSession_c_i_dout,
        expRxBytePerSession_empty_n => expRxBytePerSession_c_i_empty_n,
        expRxBytePerSession_read => recvData_consumeData_U0_expRxBytePerSession_read,
        s_axis_tcp_rx_meta_TDATA => s_axis_tcp_rx_meta_TDATA,
        s_axis_tcp_rx_meta_TVALID => s_axis_tcp_rx_meta_TVALID,
        s_axis_tcp_rx_meta_TREADY => recvData_consumeData_U0_s_axis_tcp_rx_meta_TREADY,
        s_axis_tcp_rx_meta_TKEEP => s_axis_tcp_rx_meta_TKEEP,
        s_axis_tcp_rx_meta_TSTRB => s_axis_tcp_rx_meta_TSTRB,
        s_axis_tcp_rx_meta_TLAST => s_axis_tcp_rx_meta_TLAST,
        s_axis_tcp_rx_data_TDATA => s_axis_tcp_rx_data_TDATA,
        s_axis_tcp_rx_data_TVALID => s_axis_tcp_rx_data_TVALID,
        s_axis_tcp_rx_data_TREADY => recvData_consumeData_U0_s_axis_tcp_rx_data_TREADY,
        s_axis_tcp_rx_data_TKEEP => s_axis_tcp_rx_data_TKEEP,
        s_axis_tcp_rx_data_TSTRB => s_axis_tcp_rx_data_TSTRB,
        s_axis_tcp_rx_data_TLAST => s_axis_tcp_rx_data_TLAST,
        s_data_net_out_din => recvData_consumeData_U0_s_data_net_out_din,
        s_data_net_out_full_n => s_data_net_out_full_n,
        s_data_net_out_write => recvData_consumeData_U0_s_data_net_out_write);

    nextRxPacketLength_U : component hls_recv_krnl_fifo_w16_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => recvData_handshake_U0_nextRxPacketLength3_din,
        if_full_n => nextRxPacketLength_full_n,
        if_write => recvData_handshake_U0_nextRxPacketLength3_write,
        if_dout => nextRxPacketLength_dout,
        if_empty_n => nextRxPacketLength_empty_n,
        if_read => recvData_consumeData_U0_nextRxPacketLength3_read);

    expRxBytePerSession_c_i_U : component hls_recv_krnl_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => recvData_handshake_U0_expRxBytePerSession_out_din,
        if_full_n => expRxBytePerSession_c_i_full_n,
        if_write => recvData_handshake_U0_expRxBytePerSession_out_write,
        if_dout => expRxBytePerSession_c_i_dout,
        if_empty_n => expRxBytePerSession_c_i_empty_n,
        if_read => recvData_consumeData_U0_expRxBytePerSession_read);





    ap_sync_reg_recvData_consumeData_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_recvData_consumeData_U0_ap_start <= ap_const_logic_0;
            else
                if ((ap_start = ap_const_logic_1)) then 
                    ap_sync_reg_recvData_consumeData_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= ap_sync_done;
    ap_idle <= (recvData_handshake_U0_ap_idle and recvData_consumeData_U0_ap_idle);
    ap_ready <= recvData_handshake_U0_ap_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (recvData_handshake_U0_ap_done and recvData_consumeData_U0_ap_done);
    ap_sync_ready <= recvData_handshake_U0_ap_ready;
    expRxBytePerSession_read <= recvData_handshake_U0_expRxBytePerSession_read;
    m_axis_tcp_read_pkg_TDATA <= recvData_handshake_U0_m_axis_tcp_read_pkg_TDATA;
    m_axis_tcp_read_pkg_TKEEP <= recvData_handshake_U0_m_axis_tcp_read_pkg_TKEEP;
    m_axis_tcp_read_pkg_TLAST <= recvData_handshake_U0_m_axis_tcp_read_pkg_TLAST;
    m_axis_tcp_read_pkg_TSTRB <= recvData_handshake_U0_m_axis_tcp_read_pkg_TSTRB;
    m_axis_tcp_read_pkg_TVALID <= recvData_handshake_U0_m_axis_tcp_read_pkg_TVALID;
    recvData_consumeData_U0_ap_continue <= ap_sync_continue;
    recvData_consumeData_U0_ap_start <= (ap_sync_reg_recvData_consumeData_U0_ap_start or ap_start);
    recvData_handshake_U0_ap_continue <= ap_sync_continue;
    recvData_handshake_U0_ap_start <= ap_start;
    s_axis_tcp_notification_TREADY <= recvData_handshake_U0_s_axis_tcp_notification_TREADY;
    s_axis_tcp_rx_data_TREADY <= recvData_consumeData_U0_s_axis_tcp_rx_data_TREADY;
    s_axis_tcp_rx_meta_TREADY <= recvData_consumeData_U0_s_axis_tcp_rx_meta_TREADY;
    s_data_net_out_din <= recvData_consumeData_U0_s_data_net_out_din;
    s_data_net_out_write <= recvData_consumeData_U0_s_data_net_out_write;
end behav;
