-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_recv_krnl_prepare_sha is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    ComputeWordCnt_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ComputeWordCnt_loc_empty_n : IN STD_LOGIC;
    ComputeWordCnt_loc_read : OUT STD_LOGIC;
    ComputeWordCnt_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ComputeWordCnt_loc_out_full_n : IN STD_LOGIC;
    ComputeWordCnt_loc_out_write : OUT STD_LOGIC;
    s_data_cal_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    s_data_cal_empty_n : IN STD_LOGIC;
    s_data_cal_read : OUT STD_LOGIC;
    endMsgLenStrm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    endMsgLenStrm_full_n : IN STD_LOGIC;
    endMsgLenStrm_write : OUT STD_LOGIC;
    msgLenStrm_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    msgLenStrm_full_n : IN STD_LOGIC;
    msgLenStrm_write : OUT STD_LOGIC;
    msgStrm_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    msgStrm_full_n : IN STD_LOGIC;
    msgStrm_write : OUT STD_LOGIC;
    sha_in_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    sha_in_full_n : IN STD_LOGIC;
    sha_in_write : OUT STD_LOGIC );
end;


architecture behav of hls_recv_krnl_prepare_sha is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal ComputeWordCnt_loc_blk_n : STD_LOGIC;
    signal ComputeWordCnt_loc_out_blk_n : STD_LOGIC;
    signal s_data_cal_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal endMsgLenStrm_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal msgLenStrm_blk_n : STD_LOGIC;
    signal msgStrm_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sha_in_blk_n : STD_LOGIC;
    signal cmp_i_i_i_i_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_i_i_reg_257 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_i_i_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_i_i_i_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_i_i_i_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_i_i_i_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_i_i_i_reg_281 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_i_i_i_reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_i_i_i_reg_291 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state3 : BOOLEAN;
    signal zext_ln358_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln358_1_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln358_2_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln358_3_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln358_4_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln358_5_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln358_6_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln358_7_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln674_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                cmp_i_i_i_i_reg_257 <= cmp_i_i_i_i_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                p_Result_1_i_i_i_reg_261 <= s_data_cal_dout(95 downto 64);
                p_Result_2_i_i_i_reg_266 <= s_data_cal_dout(159 downto 128);
                p_Result_3_i_i_i_reg_271 <= s_data_cal_dout(223 downto 192);
                p_Result_4_i_i_i_reg_276 <= s_data_cal_dout(287 downto 256);
                p_Result_5_i_i_i_reg_281 <= s_data_cal_dout(351 downto 320);
                p_Result_6_i_i_i_reg_286 <= s_data_cal_dout(415 downto 384);
                p_Result_7_i_i_i_reg_291 <= s_data_cal_dout(479 downto 448);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ComputeWordCnt_loc_empty_n, ComputeWordCnt_loc_out_full_n, s_data_cal_empty_n, endMsgLenStrm_full_n, msgLenStrm_full_n, msgStrm_full_n, sha_in_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, cmp_i_i_i_i_reg_257)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = ComputeWordCnt_loc_out_full_n) or (ap_const_logic_0 = ComputeWordCnt_loc_empty_n) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((sha_in_full_n = ap_const_logic_0) or (msgStrm_full_n = ap_const_logic_0) or (msgLenStrm_full_n = ap_const_logic_0) or (endMsgLenStrm_full_n = ap_const_logic_0) or (s_data_cal_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((msgStrm_full_n = ap_const_logic_0) or (endMsgLenStrm_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (cmp_i_i_i_i_reg_257 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (cmp_i_i_i_i_reg_257 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    ComputeWordCnt_loc_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ComputeWordCnt_loc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ComputeWordCnt_loc_blk_n <= ComputeWordCnt_loc_empty_n;
        else 
            ComputeWordCnt_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ComputeWordCnt_loc_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ComputeWordCnt_loc_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ComputeWordCnt_loc_out_blk_n <= ComputeWordCnt_loc_out_full_n;
        else 
            ComputeWordCnt_loc_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ComputeWordCnt_loc_out_din <= ComputeWordCnt_loc_dout;

    ComputeWordCnt_loc_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ComputeWordCnt_loc_empty_n, ComputeWordCnt_loc_out_full_n)
    begin
        if ((not(((ap_const_logic_0 = ComputeWordCnt_loc_out_full_n) or (ap_const_logic_0 = ComputeWordCnt_loc_empty_n) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ComputeWordCnt_loc_out_write <= ap_const_logic_1;
        else 
            ComputeWordCnt_loc_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ComputeWordCnt_loc_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ComputeWordCnt_loc_empty_n, ComputeWordCnt_loc_out_full_n)
    begin
        if ((not(((ap_const_logic_0 = ComputeWordCnt_loc_out_full_n) or (ap_const_logic_0 = ComputeWordCnt_loc_empty_n) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ComputeWordCnt_loc_read <= ap_const_logic_1;
        else 
            ComputeWordCnt_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, ComputeWordCnt_loc_empty_n, ComputeWordCnt_loc_out_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ComputeWordCnt_loc_out_full_n) or (ap_const_logic_0 = ComputeWordCnt_loc_empty_n) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(s_data_cal_empty_n, endMsgLenStrm_full_n, msgLenStrm_full_n, msgStrm_full_n, sha_in_full_n)
    begin
                ap_block_state2 <= ((sha_in_full_n = ap_const_logic_0) or (msgStrm_full_n = ap_const_logic_0) or (msgLenStrm_full_n = ap_const_logic_0) or (endMsgLenStrm_full_n = ap_const_logic_0) or (s_data_cal_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(endMsgLenStrm_full_n, msgStrm_full_n)
    begin
                ap_block_state3 <= ((msgStrm_full_n = ap_const_logic_0) or (endMsgLenStrm_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    cmp_i_i_i_i_fu_144_p2 <= "1" when (ComputeWordCnt_loc_dout = ap_const_lv32_0) else "0";

    endMsgLenStrm_blk_n_assign_proc : process(endMsgLenStrm_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            endMsgLenStrm_blk_n <= endMsgLenStrm_full_n;
        else 
            endMsgLenStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    endMsgLenStrm_din_assign_proc : process(s_data_cal_empty_n, endMsgLenStrm_full_n, msgLenStrm_full_n, msgStrm_full_n, sha_in_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((not(((msgStrm_full_n = ap_const_logic_0) or (endMsgLenStrm_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            endMsgLenStrm_din <= ap_const_lv1_1;
        elsif ((not(((sha_in_full_n = ap_const_logic_0) or (msgStrm_full_n = ap_const_logic_0) or (msgLenStrm_full_n = ap_const_logic_0) or (endMsgLenStrm_full_n = ap_const_logic_0) or (s_data_cal_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            endMsgLenStrm_din <= ap_const_lv1_0;
        else 
            endMsgLenStrm_din <= "X";
        end if; 
    end process;


    endMsgLenStrm_write_assign_proc : process(s_data_cal_empty_n, endMsgLenStrm_full_n, msgLenStrm_full_n, msgStrm_full_n, sha_in_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((not(((msgStrm_full_n = ap_const_logic_0) or (endMsgLenStrm_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((sha_in_full_n = ap_const_logic_0) or (msgStrm_full_n = ap_const_logic_0) or (msgLenStrm_full_n = ap_const_logic_0) or (endMsgLenStrm_full_n = ap_const_logic_0) or (s_data_cal_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            endMsgLenStrm_write <= ap_const_logic_1;
        else 
            endMsgLenStrm_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    msgLenStrm_blk_n_assign_proc : process(msgLenStrm_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            msgLenStrm_blk_n <= msgLenStrm_full_n;
        else 
            msgLenStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    msgLenStrm_din <= ap_const_lv128_lc_2;

    msgLenStrm_write_assign_proc : process(s_data_cal_empty_n, endMsgLenStrm_full_n, msgLenStrm_full_n, msgStrm_full_n, sha_in_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((sha_in_full_n = ap_const_logic_0) or (msgStrm_full_n = ap_const_logic_0) or (msgLenStrm_full_n = ap_const_logic_0) or (endMsgLenStrm_full_n = ap_const_logic_0) or (s_data_cal_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            msgLenStrm_write <= ap_const_logic_1;
        else 
            msgLenStrm_write <= ap_const_logic_0;
        end if; 
    end process;


    msgStrm_blk_n_assign_proc : process(msgStrm_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            msgStrm_blk_n <= msgStrm_full_n;
        else 
            msgStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    msgStrm_din_assign_proc : process(s_data_cal_empty_n, endMsgLenStrm_full_n, msgLenStrm_full_n, msgStrm_full_n, sha_in_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln358_fu_154_p1, zext_ln358_1_fu_229_p1, zext_ln358_2_fu_233_p1, zext_ln358_3_fu_237_p1, zext_ln358_4_fu_241_p1, zext_ln358_5_fu_245_p1, zext_ln358_6_fu_249_p1, zext_ln358_7_fu_253_p1)
    begin
        if (((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            msgStrm_din <= zext_ln358_7_fu_253_p1;
        elsif (((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            msgStrm_din <= zext_ln358_6_fu_249_p1;
        elsif (((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            msgStrm_din <= zext_ln358_5_fu_245_p1;
        elsif (((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            msgStrm_din <= zext_ln358_4_fu_241_p1;
        elsif (((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            msgStrm_din <= zext_ln358_3_fu_237_p1;
        elsif (((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            msgStrm_din <= zext_ln358_2_fu_233_p1;
        elsif ((not(((msgStrm_full_n = ap_const_logic_0) or (endMsgLenStrm_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            msgStrm_din <= zext_ln358_1_fu_229_p1;
        elsif ((not(((sha_in_full_n = ap_const_logic_0) or (msgStrm_full_n = ap_const_logic_0) or (msgLenStrm_full_n = ap_const_logic_0) or (endMsgLenStrm_full_n = ap_const_logic_0) or (s_data_cal_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            msgStrm_din <= zext_ln358_fu_154_p1;
        else 
            msgStrm_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    msgStrm_write_assign_proc : process(s_data_cal_empty_n, endMsgLenStrm_full_n, msgLenStrm_full_n, msgStrm_full_n, sha_in_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((msgStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((msgStrm_full_n = ap_const_logic_0) or (endMsgLenStrm_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((sha_in_full_n = ap_const_logic_0) or (msgStrm_full_n = ap_const_logic_0) or (msgLenStrm_full_n = ap_const_logic_0) or (endMsgLenStrm_full_n = ap_const_logic_0) or (s_data_cal_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            msgStrm_write <= ap_const_logic_1;
        else 
            msgStrm_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    s_data_cal_blk_n_assign_proc : process(s_data_cal_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_data_cal_blk_n <= s_data_cal_empty_n;
        else 
            s_data_cal_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_data_cal_read_assign_proc : process(s_data_cal_empty_n, endMsgLenStrm_full_n, msgLenStrm_full_n, msgStrm_full_n, sha_in_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((sha_in_full_n = ap_const_logic_0) or (msgStrm_full_n = ap_const_logic_0) or (msgLenStrm_full_n = ap_const_logic_0) or (endMsgLenStrm_full_n = ap_const_logic_0) or (s_data_cal_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            s_data_cal_read <= ap_const_logic_1;
        else 
            s_data_cal_read <= ap_const_logic_0;
        end if; 
    end process;


    sha_in_blk_n_assign_proc : process(sha_in_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sha_in_blk_n <= sha_in_full_n;
        else 
            sha_in_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sha_in_din <= s_data_cal_dout;

    sha_in_write_assign_proc : process(s_data_cal_empty_n, endMsgLenStrm_full_n, msgLenStrm_full_n, msgStrm_full_n, sha_in_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((sha_in_full_n = ap_const_logic_0) or (msgStrm_full_n = ap_const_logic_0) or (msgLenStrm_full_n = ap_const_logic_0) or (endMsgLenStrm_full_n = ap_const_logic_0) or (s_data_cal_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sha_in_write <= ap_const_logic_1;
        else 
            sha_in_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln674_fu_150_p1 <= s_data_cal_dout(32 - 1 downto 0);
    zext_ln358_1_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_i_i_i_reg_261),64));
    zext_ln358_2_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_2_i_i_i_reg_266),64));
    zext_ln358_3_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_3_i_i_i_reg_271),64));
    zext_ln358_4_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_i_i_i_reg_276),64));
    zext_ln358_5_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_5_i_i_i_reg_281),64));
    zext_ln358_6_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_6_i_i_i_reg_286),64));
    zext_ln358_7_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_7_i_i_i_reg_291),64));
    zext_ln358_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln674_fu_150_p1),64));
end behav;
